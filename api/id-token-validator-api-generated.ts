/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddIdTokenValidator200Response } from '../models';
// @ts-ignore
import { AddIdTokenValidatorRequest } from '../models';
// @ts-ignore
import { EnumidTokenValidatorAllowedSigningAlgorithmProp } from '../models';
// @ts-ignore
import { EnumopenidConnectIdTokenValidatorSchemaUrn } from '../models';
// @ts-ignore
import { IdTokenValidatorListResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * IdTokenValidatorApi - axios parameter creator
 * @export
 */
export const IdTokenValidatorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new ID Token Validator to the config
         * @param {AddIdTokenValidatorRequest} addIdTokenValidatorRequest Create a new ID Token Validator in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewValidator: async (addIdTokenValidatorRequest: AddIdTokenValidatorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addIdTokenValidatorRequest' is not null or undefined
            assertParamExists('addNewValidator', 'addIdTokenValidatorRequest', addIdTokenValidatorRequest)
            const localVarPath = `/id-token-validators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addIdTokenValidatorRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/id-token-validators',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addIdTokenValidatorRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a ID Token Validator
         * @param {string} idTokenValidatorName Name of the ID Token Validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteValidator: async (idTokenValidatorName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idTokenValidatorName' is not null or undefined
            assertParamExists('deleteValidator', 'idTokenValidatorName', idTokenValidatorName)
            const localVarPath = `/id-token-validators/{id-token-validator-name}`
                .replace(`{${"id-token-validator-name"}}`, encodeURIComponent(String(idTokenValidatorName !== undefined ? idTokenValidatorName : `-id-token-validator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/id-token-validators/{id-token-validator-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single ID Token Validator
         * @param {string} idTokenValidatorName Name of the ID Token Validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleByIdTokenValidator: async (idTokenValidatorName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idTokenValidatorName' is not null or undefined
            assertParamExists('getSingleByIdTokenValidator', 'idTokenValidatorName', idTokenValidatorName)
            const localVarPath = `/id-token-validators/{id-token-validator-name}`
                .replace(`{${"id-token-validator-name"}}`, encodeURIComponent(String(idTokenValidatorName !== undefined ? idTokenValidatorName : `-id-token-validator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/id-token-validators/{id-token-validator-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all ID Token Validator objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllValidators: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/id-token-validators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/id-token-validators',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing ID Token Validator by name
         * @param {string} idTokenValidatorName Name of the ID Token Validator
         * @param {UpdateRequest} updateRequest Update an existing ID Token Validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (idTokenValidatorName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idTokenValidatorName' is not null or undefined
            assertParamExists('updateByName', 'idTokenValidatorName', idTokenValidatorName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/id-token-validators/{id-token-validator-name}`
                .replace(`{${"id-token-validator-name"}}`, encodeURIComponent(String(idTokenValidatorName !== undefined ? idTokenValidatorName : `-id-token-validator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/id-token-validators/{id-token-validator-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdTokenValidatorApi - functional programming interface
 * @export
 */
export const IdTokenValidatorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdTokenValidatorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new ID Token Validator to the config
         * @param {IdTokenValidatorApiAddNewValidatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewValidator(requestParameters: IdTokenValidatorApiAddNewValidatorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddIdTokenValidator200Response>> {
            const addIdTokenValidatorRequest: AddIdTokenValidatorRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewValidator(addIdTokenValidatorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a ID Token Validator
         * @param {IdTokenValidatorApiDeleteValidatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteValidator(requestParameters: IdTokenValidatorApiDeleteValidatorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteValidator(requestParameters.idTokenValidatorName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single ID Token Validator
         * @param {IdTokenValidatorApiGetSingleByIdTokenValidatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleByIdTokenValidator(requestParameters: IdTokenValidatorApiGetSingleByIdTokenValidatorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddIdTokenValidator200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleByIdTokenValidator(requestParameters.idTokenValidatorName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all ID Token Validator objects
         * @param {IdTokenValidatorApiListAllValidatorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllValidators(requestParameters: IdTokenValidatorApiListAllValidatorsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdTokenValidatorListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllValidators(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing ID Token Validator by name
         * @param {IdTokenValidatorApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: IdTokenValidatorApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddIdTokenValidator200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.idTokenValidatorName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdTokenValidatorApi - factory interface
 * @export
 */
export const IdTokenValidatorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdTokenValidatorApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new ID Token Validator to the config
         * @param {IdTokenValidatorApiAddNewValidatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewValidator(requestParameters: IdTokenValidatorApiAddNewValidatorRequest, options?: AxiosRequestConfig): AxiosPromise<AddIdTokenValidator200Response> {
            return localVarFp.addNewValidator(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a ID Token Validator
         * @param {IdTokenValidatorApiDeleteValidatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteValidator(requestParameters: IdTokenValidatorApiDeleteValidatorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteValidator(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single ID Token Validator
         * @param {IdTokenValidatorApiGetSingleByIdTokenValidatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleByIdTokenValidator(requestParameters: IdTokenValidatorApiGetSingleByIdTokenValidatorRequest, options?: AxiosRequestConfig): AxiosPromise<AddIdTokenValidator200Response> {
            return localVarFp.getSingleByIdTokenValidator(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all ID Token Validator objects
         * @param {IdTokenValidatorApiListAllValidatorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllValidators(requestParameters: IdTokenValidatorApiListAllValidatorsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IdTokenValidatorListResponse> {
            return localVarFp.listAllValidators(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing ID Token Validator by name
         * @param {IdTokenValidatorApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: IdTokenValidatorApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddIdTokenValidator200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewValidator operation in IdTokenValidatorApi.
 * @export
 * @interface IdTokenValidatorApiAddNewValidatorRequest
 */
export type IdTokenValidatorApiAddNewValidatorRequest = {
    
} & AddIdTokenValidatorRequest

/**
 * Request parameters for deleteValidator operation in IdTokenValidatorApi.
 * @export
 * @interface IdTokenValidatorApiDeleteValidatorRequest
 */
export type IdTokenValidatorApiDeleteValidatorRequest = {
    
    /**
    * Name of the ID Token Validator
    * @type {string}
    * @memberof IdTokenValidatorApiDeleteValidator
    */
    readonly idTokenValidatorName: string
    
}

/**
 * Request parameters for getSingleByIdTokenValidator operation in IdTokenValidatorApi.
 * @export
 * @interface IdTokenValidatorApiGetSingleByIdTokenValidatorRequest
 */
export type IdTokenValidatorApiGetSingleByIdTokenValidatorRequest = {
    
    /**
    * Name of the ID Token Validator
    * @type {string}
    * @memberof IdTokenValidatorApiGetSingleByIdTokenValidator
    */
    readonly idTokenValidatorName: string
    
}

/**
 * Request parameters for listAllValidators operation in IdTokenValidatorApi.
 * @export
 * @interface IdTokenValidatorApiListAllValidatorsRequest
 */
export type IdTokenValidatorApiListAllValidatorsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof IdTokenValidatorApiListAllValidators
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in IdTokenValidatorApi.
 * @export
 * @interface IdTokenValidatorApiUpdateByNameRequest
 */
export type IdTokenValidatorApiUpdateByNameRequest = {
    
    /**
    * Name of the ID Token Validator
    * @type {string}
    * @memberof IdTokenValidatorApiUpdateByName
    */
    readonly idTokenValidatorName: string
    
} & UpdateRequest

/**
 * IdTokenValidatorApiGenerated - object-oriented interface
 * @export
 * @class IdTokenValidatorApiGenerated
 * @extends {BaseAPI}
 */
export class IdTokenValidatorApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new ID Token Validator to the config
     * @param {IdTokenValidatorApiAddNewValidatorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdTokenValidatorApiGenerated
     */
    public addNewValidator(requestParameters: IdTokenValidatorApiAddNewValidatorRequest, options?: AxiosRequestConfig) {
        return IdTokenValidatorApiFp(this.configuration).addNewValidator(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a ID Token Validator
     * @param {IdTokenValidatorApiDeleteValidatorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdTokenValidatorApiGenerated
     */
    public deleteValidator(requestParameters: IdTokenValidatorApiDeleteValidatorRequest, options?: AxiosRequestConfig) {
        return IdTokenValidatorApiFp(this.configuration).deleteValidator(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single ID Token Validator
     * @param {IdTokenValidatorApiGetSingleByIdTokenValidatorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdTokenValidatorApiGenerated
     */
    public getSingleByIdTokenValidator(requestParameters: IdTokenValidatorApiGetSingleByIdTokenValidatorRequest, options?: AxiosRequestConfig) {
        return IdTokenValidatorApiFp(this.configuration).getSingleByIdTokenValidator(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all ID Token Validator objects
     * @param {IdTokenValidatorApiListAllValidatorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdTokenValidatorApiGenerated
     */
    public listAllValidators(requestParameters: IdTokenValidatorApiListAllValidatorsRequest = {}, options?: AxiosRequestConfig) {
        return IdTokenValidatorApiFp(this.configuration).listAllValidators(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing ID Token Validator by name
     * @param {IdTokenValidatorApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdTokenValidatorApiGenerated
     */
    public updateByName(requestParameters: IdTokenValidatorApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return IdTokenValidatorApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
