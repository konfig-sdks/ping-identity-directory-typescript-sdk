/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddKeyManagerProvider200Response } from '../models';
// @ts-ignore
import { AddKeyManagerProviderRequest } from '../models';
// @ts-ignore
import { EnumthirdPartyKeyManagerProviderSchemaUrn } from '../models';
// @ts-ignore
import { GetKeyManagerProvider200Response } from '../models';
// @ts-ignore
import { KeyManagerProviderListResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * KeyManagerProviderApi - axios parameter creator
 * @export
 */
export const KeyManagerProviderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Key Manager Provider to the config
         * @param {AddKeyManagerProviderRequest} addKeyManagerProviderRequest Create a new Key Manager Provider in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewProvider: async (addKeyManagerProviderRequest: AddKeyManagerProviderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addKeyManagerProviderRequest' is not null or undefined
            assertParamExists('addNewProvider', 'addKeyManagerProviderRequest', addKeyManagerProviderRequest)
            const localVarPath = `/key-manager-providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addKeyManagerProviderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/key-manager-providers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addKeyManagerProviderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Key Manager Provider
         * @param {string} keyManagerProviderName Name of the Key Manager Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvider: async (keyManagerProviderName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyManagerProviderName' is not null or undefined
            assertParamExists('deleteProvider', 'keyManagerProviderName', keyManagerProviderName)
            const localVarPath = `/key-manager-providers/{key-manager-provider-name}`
                .replace(`{${"key-manager-provider-name"}}`, encodeURIComponent(String(keyManagerProviderName !== undefined ? keyManagerProviderName : `-key-manager-provider-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/key-manager-providers/{key-manager-provider-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Key Manager Provider
         * @param {string} keyManagerProviderName Name of the Key Manager Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (keyManagerProviderName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyManagerProviderName' is not null or undefined
            assertParamExists('getSingle', 'keyManagerProviderName', keyManagerProviderName)
            const localVarPath = `/key-manager-providers/{key-manager-provider-name}`
                .replace(`{${"key-manager-provider-name"}}`, encodeURIComponent(String(keyManagerProviderName !== undefined ? keyManagerProviderName : `-key-manager-provider-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/key-manager-providers/{key-manager-provider-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Key Manager Provider objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllProviders: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/key-manager-providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/key-manager-providers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Key Manager Provider by name
         * @param {string} keyManagerProviderName Name of the Key Manager Provider
         * @param {UpdateRequest} updateRequest Update an existing Key Manager Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (keyManagerProviderName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyManagerProviderName' is not null or undefined
            assertParamExists('updateByName', 'keyManagerProviderName', keyManagerProviderName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/key-manager-providers/{key-manager-provider-name}`
                .replace(`{${"key-manager-provider-name"}}`, encodeURIComponent(String(keyManagerProviderName !== undefined ? keyManagerProviderName : `-key-manager-provider-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/key-manager-providers/{key-manager-provider-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeyManagerProviderApi - functional programming interface
 * @export
 */
export const KeyManagerProviderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KeyManagerProviderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Key Manager Provider to the config
         * @param {KeyManagerProviderApiAddNewProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewProvider(requestParameters: KeyManagerProviderApiAddNewProviderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddKeyManagerProvider200Response>> {
            const addKeyManagerProviderRequest: AddKeyManagerProviderRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewProvider(addKeyManagerProviderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Key Manager Provider
         * @param {KeyManagerProviderApiDeleteProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProvider(requestParameters: KeyManagerProviderApiDeleteProviderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProvider(requestParameters.keyManagerProviderName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Key Manager Provider
         * @param {KeyManagerProviderApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: KeyManagerProviderApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKeyManagerProvider200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.keyManagerProviderName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Key Manager Provider objects
         * @param {KeyManagerProviderApiListAllProvidersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllProviders(requestParameters: KeyManagerProviderApiListAllProvidersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyManagerProviderListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllProviders(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Key Manager Provider by name
         * @param {KeyManagerProviderApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: KeyManagerProviderApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKeyManagerProvider200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.keyManagerProviderName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KeyManagerProviderApi - factory interface
 * @export
 */
export const KeyManagerProviderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KeyManagerProviderApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Key Manager Provider to the config
         * @param {KeyManagerProviderApiAddNewProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewProvider(requestParameters: KeyManagerProviderApiAddNewProviderRequest, options?: AxiosRequestConfig): AxiosPromise<AddKeyManagerProvider200Response> {
            return localVarFp.addNewProvider(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Key Manager Provider
         * @param {KeyManagerProviderApiDeleteProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvider(requestParameters: KeyManagerProviderApiDeleteProviderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProvider(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Key Manager Provider
         * @param {KeyManagerProviderApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: KeyManagerProviderApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<GetKeyManagerProvider200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Key Manager Provider objects
         * @param {KeyManagerProviderApiListAllProvidersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllProviders(requestParameters: KeyManagerProviderApiListAllProvidersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<KeyManagerProviderListResponse> {
            return localVarFp.listAllProviders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Key Manager Provider by name
         * @param {KeyManagerProviderApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: KeyManagerProviderApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<GetKeyManagerProvider200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewProvider operation in KeyManagerProviderApi.
 * @export
 * @interface KeyManagerProviderApiAddNewProviderRequest
 */
export type KeyManagerProviderApiAddNewProviderRequest = {
    
} & AddKeyManagerProviderRequest

/**
 * Request parameters for deleteProvider operation in KeyManagerProviderApi.
 * @export
 * @interface KeyManagerProviderApiDeleteProviderRequest
 */
export type KeyManagerProviderApiDeleteProviderRequest = {
    
    /**
    * Name of the Key Manager Provider
    * @type {string}
    * @memberof KeyManagerProviderApiDeleteProvider
    */
    readonly keyManagerProviderName: string
    
}

/**
 * Request parameters for getSingle operation in KeyManagerProviderApi.
 * @export
 * @interface KeyManagerProviderApiGetSingleRequest
 */
export type KeyManagerProviderApiGetSingleRequest = {
    
    /**
    * Name of the Key Manager Provider
    * @type {string}
    * @memberof KeyManagerProviderApiGetSingle
    */
    readonly keyManagerProviderName: string
    
}

/**
 * Request parameters for listAllProviders operation in KeyManagerProviderApi.
 * @export
 * @interface KeyManagerProviderApiListAllProvidersRequest
 */
export type KeyManagerProviderApiListAllProvidersRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof KeyManagerProviderApiListAllProviders
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in KeyManagerProviderApi.
 * @export
 * @interface KeyManagerProviderApiUpdateByNameRequest
 */
export type KeyManagerProviderApiUpdateByNameRequest = {
    
    /**
    * Name of the Key Manager Provider
    * @type {string}
    * @memberof KeyManagerProviderApiUpdateByName
    */
    readonly keyManagerProviderName: string
    
} & UpdateRequest

/**
 * KeyManagerProviderApiGenerated - object-oriented interface
 * @export
 * @class KeyManagerProviderApiGenerated
 * @extends {BaseAPI}
 */
export class KeyManagerProviderApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Key Manager Provider to the config
     * @param {KeyManagerProviderApiAddNewProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyManagerProviderApiGenerated
     */
    public addNewProvider(requestParameters: KeyManagerProviderApiAddNewProviderRequest, options?: AxiosRequestConfig) {
        return KeyManagerProviderApiFp(this.configuration).addNewProvider(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Key Manager Provider
     * @param {KeyManagerProviderApiDeleteProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyManagerProviderApiGenerated
     */
    public deleteProvider(requestParameters: KeyManagerProviderApiDeleteProviderRequest, options?: AxiosRequestConfig) {
        return KeyManagerProviderApiFp(this.configuration).deleteProvider(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Key Manager Provider
     * @param {KeyManagerProviderApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyManagerProviderApiGenerated
     */
    public getSingle(requestParameters: KeyManagerProviderApiGetSingleRequest, options?: AxiosRequestConfig) {
        return KeyManagerProviderApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Key Manager Provider objects
     * @param {KeyManagerProviderApiListAllProvidersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyManagerProviderApiGenerated
     */
    public listAllProviders(requestParameters: KeyManagerProviderApiListAllProvidersRequest = {}, options?: AxiosRequestConfig) {
        return KeyManagerProviderApiFp(this.configuration).listAllProviders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Key Manager Provider by name
     * @param {KeyManagerProviderApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyManagerProviderApiGenerated
     */
    public updateByName(requestParameters: KeyManagerProviderApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return KeyManagerProviderApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
