/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddResultCodeMapRequest } from '../models';
// @ts-ignore
import { EnumresultCodeMapSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { ResultCodeMapListResponse } from '../models';
// @ts-ignore
import { ResultCodeMapResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ResultCodeMapApi - axios parameter creator
 * @export
 */
export const ResultCodeMapApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Result Code Map to the config
         * @param {AddResultCodeMapRequest} addResultCodeMapRequest Create a new Result Code Map in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewResultCodeMap: async (addResultCodeMapRequest: AddResultCodeMapRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addResultCodeMapRequest' is not null or undefined
            assertParamExists('addNewResultCodeMap', 'addResultCodeMapRequest', addResultCodeMapRequest)
            const localVarPath = `/result-code-maps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addResultCodeMapRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/result-code-maps',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addResultCodeMapRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Result Code Map
         * @param {string} resultCodeMapName Name of the Result Code Map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResultCodeMap: async (resultCodeMapName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resultCodeMapName' is not null or undefined
            assertParamExists('deleteResultCodeMap', 'resultCodeMapName', resultCodeMapName)
            const localVarPath = `/result-code-maps/{result-code-map-name}`
                .replace(`{${"result-code-map-name"}}`, encodeURIComponent(String(resultCodeMapName !== undefined ? resultCodeMapName : `-result-code-map-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/result-code-maps/{result-code-map-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Result Code Map objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/result-code-maps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/result-code-maps',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Result Code Map
         * @param {string} resultCodeMapName Name of the Result Code Map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleMap: async (resultCodeMapName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resultCodeMapName' is not null or undefined
            assertParamExists('getSingleMap', 'resultCodeMapName', resultCodeMapName)
            const localVarPath = `/result-code-maps/{result-code-map-name}`
                .replace(`{${"result-code-map-name"}}`, encodeURIComponent(String(resultCodeMapName !== undefined ? resultCodeMapName : `-result-code-map-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/result-code-maps/{result-code-map-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Result Code Map by name
         * @param {string} resultCodeMapName Name of the Result Code Map
         * @param {UpdateRequest} updateRequest Update an existing Result Code Map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (resultCodeMapName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resultCodeMapName' is not null or undefined
            assertParamExists('updateByName', 'resultCodeMapName', resultCodeMapName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/result-code-maps/{result-code-map-name}`
                .replace(`{${"result-code-map-name"}}`, encodeURIComponent(String(resultCodeMapName !== undefined ? resultCodeMapName : `-result-code-map-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/result-code-maps/{result-code-map-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResultCodeMapApi - functional programming interface
 * @export
 */
export const ResultCodeMapApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResultCodeMapApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Result Code Map to the config
         * @param {ResultCodeMapApiAddNewResultCodeMapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewResultCodeMap(requestParameters: ResultCodeMapApiAddNewResultCodeMapRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCodeMapResponse>> {
            const addResultCodeMapRequest: AddResultCodeMapRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewResultCodeMap(addResultCodeMapRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Result Code Map
         * @param {ResultCodeMapApiDeleteResultCodeMapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResultCodeMap(requestParameters: ResultCodeMapApiDeleteResultCodeMapRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResultCodeMap(requestParameters.resultCodeMapName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Result Code Map objects
         * @param {ResultCodeMapApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllObjects(requestParameters: ResultCodeMapApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCodeMapListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Result Code Map
         * @param {ResultCodeMapApiGetSingleMapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleMap(requestParameters: ResultCodeMapApiGetSingleMapRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCodeMapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleMap(requestParameters.resultCodeMapName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Result Code Map by name
         * @param {ResultCodeMapApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ResultCodeMapApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCodeMapResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.resultCodeMapName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResultCodeMapApi - factory interface
 * @export
 */
export const ResultCodeMapApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResultCodeMapApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Result Code Map to the config
         * @param {ResultCodeMapApiAddNewResultCodeMapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewResultCodeMap(requestParameters: ResultCodeMapApiAddNewResultCodeMapRequest, options?: AxiosRequestConfig): AxiosPromise<ResultCodeMapResponse> {
            return localVarFp.addNewResultCodeMap(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Result Code Map
         * @param {ResultCodeMapApiDeleteResultCodeMapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResultCodeMap(requestParameters: ResultCodeMapApiDeleteResultCodeMapRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteResultCodeMap(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Result Code Map objects
         * @param {ResultCodeMapApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects(requestParameters: ResultCodeMapApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ResultCodeMapListResponse> {
            return localVarFp.getAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Result Code Map
         * @param {ResultCodeMapApiGetSingleMapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleMap(requestParameters: ResultCodeMapApiGetSingleMapRequest, options?: AxiosRequestConfig): AxiosPromise<ResultCodeMapResponse> {
            return localVarFp.getSingleMap(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Result Code Map by name
         * @param {ResultCodeMapApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ResultCodeMapApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<ResultCodeMapResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewResultCodeMap operation in ResultCodeMapApi.
 * @export
 * @interface ResultCodeMapApiAddNewResultCodeMapRequest
 */
export type ResultCodeMapApiAddNewResultCodeMapRequest = {
    
} & AddResultCodeMapRequest

/**
 * Request parameters for deleteResultCodeMap operation in ResultCodeMapApi.
 * @export
 * @interface ResultCodeMapApiDeleteResultCodeMapRequest
 */
export type ResultCodeMapApiDeleteResultCodeMapRequest = {
    
    /**
    * Name of the Result Code Map
    * @type {string}
    * @memberof ResultCodeMapApiDeleteResultCodeMap
    */
    readonly resultCodeMapName: string
    
}

/**
 * Request parameters for getAllObjects operation in ResultCodeMapApi.
 * @export
 * @interface ResultCodeMapApiGetAllObjectsRequest
 */
export type ResultCodeMapApiGetAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ResultCodeMapApiGetAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingleMap operation in ResultCodeMapApi.
 * @export
 * @interface ResultCodeMapApiGetSingleMapRequest
 */
export type ResultCodeMapApiGetSingleMapRequest = {
    
    /**
    * Name of the Result Code Map
    * @type {string}
    * @memberof ResultCodeMapApiGetSingleMap
    */
    readonly resultCodeMapName: string
    
}

/**
 * Request parameters for updateByName operation in ResultCodeMapApi.
 * @export
 * @interface ResultCodeMapApiUpdateByNameRequest
 */
export type ResultCodeMapApiUpdateByNameRequest = {
    
    /**
    * Name of the Result Code Map
    * @type {string}
    * @memberof ResultCodeMapApiUpdateByName
    */
    readonly resultCodeMapName: string
    
} & UpdateRequest

/**
 * ResultCodeMapApiGenerated - object-oriented interface
 * @export
 * @class ResultCodeMapApiGenerated
 * @extends {BaseAPI}
 */
export class ResultCodeMapApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Result Code Map to the config
     * @param {ResultCodeMapApiAddNewResultCodeMapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultCodeMapApiGenerated
     */
    public addNewResultCodeMap(requestParameters: ResultCodeMapApiAddNewResultCodeMapRequest, options?: AxiosRequestConfig) {
        return ResultCodeMapApiFp(this.configuration).addNewResultCodeMap(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Result Code Map
     * @param {ResultCodeMapApiDeleteResultCodeMapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultCodeMapApiGenerated
     */
    public deleteResultCodeMap(requestParameters: ResultCodeMapApiDeleteResultCodeMapRequest, options?: AxiosRequestConfig) {
        return ResultCodeMapApiFp(this.configuration).deleteResultCodeMap(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Result Code Map objects
     * @param {ResultCodeMapApiGetAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultCodeMapApiGenerated
     */
    public getAllObjects(requestParameters: ResultCodeMapApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return ResultCodeMapApiFp(this.configuration).getAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Result Code Map
     * @param {ResultCodeMapApiGetSingleMapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultCodeMapApiGenerated
     */
    public getSingleMap(requestParameters: ResultCodeMapApiGetSingleMapRequest, options?: AxiosRequestConfig) {
        return ResultCodeMapApiFp(this.configuration).getSingleMap(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Result Code Map by name
     * @param {ResultCodeMapApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultCodeMapApiGenerated
     */
    public updateByName(requestParameters: ResultCodeMapApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ResultCodeMapApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
