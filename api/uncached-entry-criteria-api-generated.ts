/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddUncachedEntryCriteria200Response } from '../models';
// @ts-ignore
import { AddUncachedEntryCriteriaRequest } from '../models';
// @ts-ignore
import { EnumthirdPartyUncachedEntryCriteriaSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UncachedEntryCriteriaListResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UncachedEntryCriteriaApi - axios parameter creator
 * @export
 */
export const UncachedEntryCriteriaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Uncached Entry Criteria to the config
         * @param {AddUncachedEntryCriteriaRequest} addUncachedEntryCriteriaRequest Create a new Uncached Entry Criteria in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCriteria: async (addUncachedEntryCriteriaRequest: AddUncachedEntryCriteriaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addUncachedEntryCriteriaRequest' is not null or undefined
            assertParamExists('addNewCriteria', 'addUncachedEntryCriteriaRequest', addUncachedEntryCriteriaRequest)
            const localVarPath = `/uncached-entry-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addUncachedEntryCriteriaRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/uncached-entry-criteria',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addUncachedEntryCriteriaRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Uncached Entry Criteria
         * @param {string} uncachedEntryCriteriaName Name of the Uncached Entry Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUncachedEntry: async (uncachedEntryCriteriaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uncachedEntryCriteriaName' is not null or undefined
            assertParamExists('deleteUncachedEntry', 'uncachedEntryCriteriaName', uncachedEntryCriteriaName)
            const localVarPath = `/uncached-entry-criteria/{uncached-entry-criteria-name}`
                .replace(`{${"uncached-entry-criteria-name"}}`, encodeURIComponent(String(uncachedEntryCriteriaName !== undefined ? uncachedEntryCriteriaName : `-uncached-entry-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/uncached-entry-criteria/{uncached-entry-criteria-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Uncached Entry Criteria
         * @param {string} uncachedEntryCriteriaName Name of the Uncached Entry Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByName: async (uncachedEntryCriteriaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uncachedEntryCriteriaName' is not null or undefined
            assertParamExists('getByName', 'uncachedEntryCriteriaName', uncachedEntryCriteriaName)
            const localVarPath = `/uncached-entry-criteria/{uncached-entry-criteria-name}`
                .replace(`{${"uncached-entry-criteria-name"}}`, encodeURIComponent(String(uncachedEntryCriteriaName !== undefined ? uncachedEntryCriteriaName : `-uncached-entry-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/uncached-entry-criteria/{uncached-entry-criteria-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Uncached Entry Criteria objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/uncached-entry-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/uncached-entry-criteria',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Uncached Entry Criteria by name
         * @param {string} uncachedEntryCriteriaName Name of the Uncached Entry Criteria
         * @param {UpdateRequest} updateRequest Update an existing Uncached Entry Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (uncachedEntryCriteriaName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uncachedEntryCriteriaName' is not null or undefined
            assertParamExists('updateByName', 'uncachedEntryCriteriaName', uncachedEntryCriteriaName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/uncached-entry-criteria/{uncached-entry-criteria-name}`
                .replace(`{${"uncached-entry-criteria-name"}}`, encodeURIComponent(String(uncachedEntryCriteriaName !== undefined ? uncachedEntryCriteriaName : `-uncached-entry-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/uncached-entry-criteria/{uncached-entry-criteria-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UncachedEntryCriteriaApi - functional programming interface
 * @export
 */
export const UncachedEntryCriteriaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UncachedEntryCriteriaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Uncached Entry Criteria to the config
         * @param {UncachedEntryCriteriaApiAddNewCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewCriteria(requestParameters: UncachedEntryCriteriaApiAddNewCriteriaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddUncachedEntryCriteria200Response>> {
            const addUncachedEntryCriteriaRequest: AddUncachedEntryCriteriaRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewCriteria(addUncachedEntryCriteriaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Uncached Entry Criteria
         * @param {UncachedEntryCriteriaApiDeleteUncachedEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUncachedEntry(requestParameters: UncachedEntryCriteriaApiDeleteUncachedEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUncachedEntry(requestParameters.uncachedEntryCriteriaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Uncached Entry Criteria
         * @param {UncachedEntryCriteriaApiGetByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByName(requestParameters: UncachedEntryCriteriaApiGetByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddUncachedEntryCriteria200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByName(requestParameters.uncachedEntryCriteriaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Uncached Entry Criteria objects
         * @param {UncachedEntryCriteriaApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listObjects(requestParameters: UncachedEntryCriteriaApiListObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UncachedEntryCriteriaListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Uncached Entry Criteria by name
         * @param {UncachedEntryCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: UncachedEntryCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddUncachedEntryCriteria200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.uncachedEntryCriteriaName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UncachedEntryCriteriaApi - factory interface
 * @export
 */
export const UncachedEntryCriteriaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UncachedEntryCriteriaApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Uncached Entry Criteria to the config
         * @param {UncachedEntryCriteriaApiAddNewCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCriteria(requestParameters: UncachedEntryCriteriaApiAddNewCriteriaRequest, options?: AxiosRequestConfig): AxiosPromise<AddUncachedEntryCriteria200Response> {
            return localVarFp.addNewCriteria(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Uncached Entry Criteria
         * @param {UncachedEntryCriteriaApiDeleteUncachedEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUncachedEntry(requestParameters: UncachedEntryCriteriaApiDeleteUncachedEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUncachedEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Uncached Entry Criteria
         * @param {UncachedEntryCriteriaApiGetByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByName(requestParameters: UncachedEntryCriteriaApiGetByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddUncachedEntryCriteria200Response> {
            return localVarFp.getByName(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Uncached Entry Criteria objects
         * @param {UncachedEntryCriteriaApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects(requestParameters: UncachedEntryCriteriaApiListObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UncachedEntryCriteriaListResponse> {
            return localVarFp.listObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Uncached Entry Criteria by name
         * @param {UncachedEntryCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: UncachedEntryCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddUncachedEntryCriteria200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewCriteria operation in UncachedEntryCriteriaApi.
 * @export
 * @interface UncachedEntryCriteriaApiAddNewCriteriaRequest
 */
export type UncachedEntryCriteriaApiAddNewCriteriaRequest = {
    
} & AddUncachedEntryCriteriaRequest

/**
 * Request parameters for deleteUncachedEntry operation in UncachedEntryCriteriaApi.
 * @export
 * @interface UncachedEntryCriteriaApiDeleteUncachedEntryRequest
 */
export type UncachedEntryCriteriaApiDeleteUncachedEntryRequest = {
    
    /**
    * Name of the Uncached Entry Criteria
    * @type {string}
    * @memberof UncachedEntryCriteriaApiDeleteUncachedEntry
    */
    readonly uncachedEntryCriteriaName: string
    
}

/**
 * Request parameters for getByName operation in UncachedEntryCriteriaApi.
 * @export
 * @interface UncachedEntryCriteriaApiGetByNameRequest
 */
export type UncachedEntryCriteriaApiGetByNameRequest = {
    
    /**
    * Name of the Uncached Entry Criteria
    * @type {string}
    * @memberof UncachedEntryCriteriaApiGetByName
    */
    readonly uncachedEntryCriteriaName: string
    
}

/**
 * Request parameters for listObjects operation in UncachedEntryCriteriaApi.
 * @export
 * @interface UncachedEntryCriteriaApiListObjectsRequest
 */
export type UncachedEntryCriteriaApiListObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof UncachedEntryCriteriaApiListObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in UncachedEntryCriteriaApi.
 * @export
 * @interface UncachedEntryCriteriaApiUpdateByNameRequest
 */
export type UncachedEntryCriteriaApiUpdateByNameRequest = {
    
    /**
    * Name of the Uncached Entry Criteria
    * @type {string}
    * @memberof UncachedEntryCriteriaApiUpdateByName
    */
    readonly uncachedEntryCriteriaName: string
    
} & UpdateRequest

/**
 * UncachedEntryCriteriaApiGenerated - object-oriented interface
 * @export
 * @class UncachedEntryCriteriaApiGenerated
 * @extends {BaseAPI}
 */
export class UncachedEntryCriteriaApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Uncached Entry Criteria to the config
     * @param {UncachedEntryCriteriaApiAddNewCriteriaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UncachedEntryCriteriaApiGenerated
     */
    public addNewCriteria(requestParameters: UncachedEntryCriteriaApiAddNewCriteriaRequest, options?: AxiosRequestConfig) {
        return UncachedEntryCriteriaApiFp(this.configuration).addNewCriteria(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Uncached Entry Criteria
     * @param {UncachedEntryCriteriaApiDeleteUncachedEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UncachedEntryCriteriaApiGenerated
     */
    public deleteUncachedEntry(requestParameters: UncachedEntryCriteriaApiDeleteUncachedEntryRequest, options?: AxiosRequestConfig) {
        return UncachedEntryCriteriaApiFp(this.configuration).deleteUncachedEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Uncached Entry Criteria
     * @param {UncachedEntryCriteriaApiGetByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UncachedEntryCriteriaApiGenerated
     */
    public getByName(requestParameters: UncachedEntryCriteriaApiGetByNameRequest, options?: AxiosRequestConfig) {
        return UncachedEntryCriteriaApiFp(this.configuration).getByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Uncached Entry Criteria objects
     * @param {UncachedEntryCriteriaApiListObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UncachedEntryCriteriaApiGenerated
     */
    public listObjects(requestParameters: UncachedEntryCriteriaApiListObjectsRequest = {}, options?: AxiosRequestConfig) {
        return UncachedEntryCriteriaApiFp(this.configuration).listObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Uncached Entry Criteria by name
     * @param {UncachedEntryCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UncachedEntryCriteriaApiGenerated
     */
    public updateByName(requestParameters: UncachedEntryCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return UncachedEntryCriteriaApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
