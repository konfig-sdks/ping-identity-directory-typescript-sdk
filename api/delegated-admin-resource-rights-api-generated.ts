/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDelegatedAdminResourceRightsRequest } from '../models';
// @ts-ignore
import { DelegatedAdminResourceRightsListResponse } from '../models';
// @ts-ignore
import { DelegatedAdminResourceRightsResponse } from '../models';
// @ts-ignore
import { EnumdelegatedAdminResourceRightsAdminPermissionProp } from '../models';
// @ts-ignore
import { EnumdelegatedAdminResourceRightsAdminScopeProp } from '../models';
// @ts-ignore
import { EnumdelegatedAdminResourceRightsSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DelegatedAdminResourceRightsApi - axios parameter creator
 * @export
 */
export const DelegatedAdminResourceRightsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Delegated Admin Resource Rights to the config
         * @param {string} delegatedAdminRightsName Name of the Delegated Admin Rights
         * @param {AddDelegatedAdminResourceRightsRequest} addDelegatedAdminResourceRightsRequest Create a new Delegated Admin Resource Rights in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig: async (delegatedAdminRightsName: string, addDelegatedAdminResourceRightsRequest: AddDelegatedAdminResourceRightsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminRightsName' is not null or undefined
            assertParamExists('addNewToConfig', 'delegatedAdminRightsName', delegatedAdminRightsName)
            // verify required parameter 'addDelegatedAdminResourceRightsRequest' is not null or undefined
            assertParamExists('addNewToConfig', 'addDelegatedAdminResourceRightsRequest', addDelegatedAdminResourceRightsRequest)
            const localVarPath = `/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights`
                .replace(`{${"delegated-admin-rights-name"}}`, encodeURIComponent(String(delegatedAdminRightsName !== undefined ? delegatedAdminRightsName : `-delegated-admin-rights-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addDelegatedAdminResourceRightsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addDelegatedAdminResourceRightsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Delegated Admin Resource Rights
         * @param {string} delegatedAdminResourceRightsName Name of the Delegated Admin Resource Rights
         * @param {string} delegatedAdminRightsName Name of the Delegated Admin Rights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceRights: async (delegatedAdminResourceRightsName: string, delegatedAdminRightsName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminResourceRightsName' is not null or undefined
            assertParamExists('deleteResourceRights', 'delegatedAdminResourceRightsName', delegatedAdminResourceRightsName)
            // verify required parameter 'delegatedAdminRightsName' is not null or undefined
            assertParamExists('deleteResourceRights', 'delegatedAdminRightsName', delegatedAdminRightsName)
            const localVarPath = `/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights/{delegated-admin-resource-rights-name}`
                .replace(`{${"delegated-admin-resource-rights-name"}}`, encodeURIComponent(String(delegatedAdminResourceRightsName !== undefined ? delegatedAdminResourceRightsName : `-delegated-admin-resource-rights-name-`)))
                .replace(`{${"delegated-admin-rights-name"}}`, encodeURIComponent(String(delegatedAdminRightsName !== undefined ? delegatedAdminRightsName : `-delegated-admin-rights-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights/{delegated-admin-resource-rights-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Delegated Admin Resource Rights
         * @param {string} delegatedAdminResourceRightsName Name of the Delegated Admin Resource Rights
         * @param {string} delegatedAdminRightsName Name of the Delegated Admin Rights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleResourceRights: async (delegatedAdminResourceRightsName: string, delegatedAdminRightsName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminResourceRightsName' is not null or undefined
            assertParamExists('getSingleResourceRights', 'delegatedAdminResourceRightsName', delegatedAdminResourceRightsName)
            // verify required parameter 'delegatedAdminRightsName' is not null or undefined
            assertParamExists('getSingleResourceRights', 'delegatedAdminRightsName', delegatedAdminRightsName)
            const localVarPath = `/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights/{delegated-admin-resource-rights-name}`
                .replace(`{${"delegated-admin-resource-rights-name"}}`, encodeURIComponent(String(delegatedAdminResourceRightsName !== undefined ? delegatedAdminResourceRightsName : `-delegated-admin-resource-rights-name-`)))
                .replace(`{${"delegated-admin-rights-name"}}`, encodeURIComponent(String(delegatedAdminRightsName !== undefined ? delegatedAdminRightsName : `-delegated-admin-rights-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights/{delegated-admin-resource-rights-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Delegated Admin Resource Rights objects
         * @param {string} delegatedAdminRightsName Name of the Delegated Admin Rights
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (delegatedAdminRightsName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminRightsName' is not null or undefined
            assertParamExists('listAllObjects', 'delegatedAdminRightsName', delegatedAdminRightsName)
            const localVarPath = `/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights`
                .replace(`{${"delegated-admin-rights-name"}}`, encodeURIComponent(String(delegatedAdminRightsName !== undefined ? delegatedAdminRightsName : `-delegated-admin-rights-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Delegated Admin Resource Rights by name
         * @param {string} delegatedAdminResourceRightsName Name of the Delegated Admin Resource Rights
         * @param {string} delegatedAdminRightsName Name of the Delegated Admin Rights
         * @param {UpdateRequest} updateRequest Update an existing Delegated Admin Resource Rights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (delegatedAdminResourceRightsName: string, delegatedAdminRightsName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminResourceRightsName' is not null or undefined
            assertParamExists('updateByName', 'delegatedAdminResourceRightsName', delegatedAdminResourceRightsName)
            // verify required parameter 'delegatedAdminRightsName' is not null or undefined
            assertParamExists('updateByName', 'delegatedAdminRightsName', delegatedAdminRightsName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights/{delegated-admin-resource-rights-name}`
                .replace(`{${"delegated-admin-resource-rights-name"}}`, encodeURIComponent(String(delegatedAdminResourceRightsName !== undefined ? delegatedAdminResourceRightsName : `-delegated-admin-resource-rights-name-`)))
                .replace(`{${"delegated-admin-rights-name"}}`, encodeURIComponent(String(delegatedAdminRightsName !== undefined ? delegatedAdminRightsName : `-delegated-admin-rights-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights/{delegated-admin-resource-rights-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DelegatedAdminResourceRightsApi - functional programming interface
 * @export
 */
export const DelegatedAdminResourceRightsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DelegatedAdminResourceRightsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Delegated Admin Resource Rights to the config
         * @param {DelegatedAdminResourceRightsApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewToConfig(requestParameters: DelegatedAdminResourceRightsApiAddNewToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegatedAdminResourceRightsResponse>> {
            const addDelegatedAdminResourceRightsRequest: AddDelegatedAdminResourceRightsRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewToConfig(requestParameters.delegatedAdminRightsName, addDelegatedAdminResourceRightsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Delegated Admin Resource Rights
         * @param {DelegatedAdminResourceRightsApiDeleteResourceRightsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResourceRights(requestParameters: DelegatedAdminResourceRightsApiDeleteResourceRightsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceRights(requestParameters.delegatedAdminResourceRightsName, requestParameters.delegatedAdminRightsName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Delegated Admin Resource Rights
         * @param {DelegatedAdminResourceRightsApiGetSingleResourceRightsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleResourceRights(requestParameters: DelegatedAdminResourceRightsApiGetSingleResourceRightsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegatedAdminResourceRightsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleResourceRights(requestParameters.delegatedAdminResourceRightsName, requestParameters.delegatedAdminRightsName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Delegated Admin Resource Rights objects
         * @param {DelegatedAdminResourceRightsApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: DelegatedAdminResourceRightsApiListAllObjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegatedAdminResourceRightsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.delegatedAdminRightsName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Delegated Admin Resource Rights by name
         * @param {DelegatedAdminResourceRightsApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: DelegatedAdminResourceRightsApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegatedAdminResourceRightsResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.delegatedAdminResourceRightsName, requestParameters.delegatedAdminRightsName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DelegatedAdminResourceRightsApi - factory interface
 * @export
 */
export const DelegatedAdminResourceRightsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DelegatedAdminResourceRightsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Delegated Admin Resource Rights to the config
         * @param {DelegatedAdminResourceRightsApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig(requestParameters: DelegatedAdminResourceRightsApiAddNewToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<DelegatedAdminResourceRightsResponse> {
            return localVarFp.addNewToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Delegated Admin Resource Rights
         * @param {DelegatedAdminResourceRightsApiDeleteResourceRightsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceRights(requestParameters: DelegatedAdminResourceRightsApiDeleteResourceRightsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteResourceRights(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Delegated Admin Resource Rights
         * @param {DelegatedAdminResourceRightsApiGetSingleResourceRightsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleResourceRights(requestParameters: DelegatedAdminResourceRightsApiGetSingleResourceRightsRequest, options?: AxiosRequestConfig): AxiosPromise<DelegatedAdminResourceRightsResponse> {
            return localVarFp.getSingleResourceRights(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Delegated Admin Resource Rights objects
         * @param {DelegatedAdminResourceRightsApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: DelegatedAdminResourceRightsApiListAllObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<DelegatedAdminResourceRightsListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Delegated Admin Resource Rights by name
         * @param {DelegatedAdminResourceRightsApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: DelegatedAdminResourceRightsApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<DelegatedAdminResourceRightsResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewToConfig operation in DelegatedAdminResourceRightsApi.
 * @export
 * @interface DelegatedAdminResourceRightsApiAddNewToConfigRequest
 */
export type DelegatedAdminResourceRightsApiAddNewToConfigRequest = {
    
    /**
    * Name of the Delegated Admin Rights
    * @type {string}
    * @memberof DelegatedAdminResourceRightsApiAddNewToConfig
    */
    readonly delegatedAdminRightsName: string
    
} & AddDelegatedAdminResourceRightsRequest

/**
 * Request parameters for deleteResourceRights operation in DelegatedAdminResourceRightsApi.
 * @export
 * @interface DelegatedAdminResourceRightsApiDeleteResourceRightsRequest
 */
export type DelegatedAdminResourceRightsApiDeleteResourceRightsRequest = {
    
    /**
    * Name of the Delegated Admin Resource Rights
    * @type {string}
    * @memberof DelegatedAdminResourceRightsApiDeleteResourceRights
    */
    readonly delegatedAdminResourceRightsName: string
    
    /**
    * Name of the Delegated Admin Rights
    * @type {string}
    * @memberof DelegatedAdminResourceRightsApiDeleteResourceRights
    */
    readonly delegatedAdminRightsName: string
    
}

/**
 * Request parameters for getSingleResourceRights operation in DelegatedAdminResourceRightsApi.
 * @export
 * @interface DelegatedAdminResourceRightsApiGetSingleResourceRightsRequest
 */
export type DelegatedAdminResourceRightsApiGetSingleResourceRightsRequest = {
    
    /**
    * Name of the Delegated Admin Resource Rights
    * @type {string}
    * @memberof DelegatedAdminResourceRightsApiGetSingleResourceRights
    */
    readonly delegatedAdminResourceRightsName: string
    
    /**
    * Name of the Delegated Admin Rights
    * @type {string}
    * @memberof DelegatedAdminResourceRightsApiGetSingleResourceRights
    */
    readonly delegatedAdminRightsName: string
    
}

/**
 * Request parameters for listAllObjects operation in DelegatedAdminResourceRightsApi.
 * @export
 * @interface DelegatedAdminResourceRightsApiListAllObjectsRequest
 */
export type DelegatedAdminResourceRightsApiListAllObjectsRequest = {
    
    /**
    * Name of the Delegated Admin Rights
    * @type {string}
    * @memberof DelegatedAdminResourceRightsApiListAllObjects
    */
    readonly delegatedAdminRightsName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof DelegatedAdminResourceRightsApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in DelegatedAdminResourceRightsApi.
 * @export
 * @interface DelegatedAdminResourceRightsApiUpdateByNameRequest
 */
export type DelegatedAdminResourceRightsApiUpdateByNameRequest = {
    
    /**
    * Name of the Delegated Admin Resource Rights
    * @type {string}
    * @memberof DelegatedAdminResourceRightsApiUpdateByName
    */
    readonly delegatedAdminResourceRightsName: string
    
    /**
    * Name of the Delegated Admin Rights
    * @type {string}
    * @memberof DelegatedAdminResourceRightsApiUpdateByName
    */
    readonly delegatedAdminRightsName: string
    
} & UpdateRequest

/**
 * DelegatedAdminResourceRightsApiGenerated - object-oriented interface
 * @export
 * @class DelegatedAdminResourceRightsApiGenerated
 * @extends {BaseAPI}
 */
export class DelegatedAdminResourceRightsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Delegated Admin Resource Rights to the config
     * @param {DelegatedAdminResourceRightsApiAddNewToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminResourceRightsApiGenerated
     */
    public addNewToConfig(requestParameters: DelegatedAdminResourceRightsApiAddNewToConfigRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminResourceRightsApiFp(this.configuration).addNewToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Delegated Admin Resource Rights
     * @param {DelegatedAdminResourceRightsApiDeleteResourceRightsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminResourceRightsApiGenerated
     */
    public deleteResourceRights(requestParameters: DelegatedAdminResourceRightsApiDeleteResourceRightsRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminResourceRightsApiFp(this.configuration).deleteResourceRights(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Delegated Admin Resource Rights
     * @param {DelegatedAdminResourceRightsApiGetSingleResourceRightsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminResourceRightsApiGenerated
     */
    public getSingleResourceRights(requestParameters: DelegatedAdminResourceRightsApiGetSingleResourceRightsRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminResourceRightsApiFp(this.configuration).getSingleResourceRights(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Delegated Admin Resource Rights objects
     * @param {DelegatedAdminResourceRightsApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminResourceRightsApiGenerated
     */
    public listAllObjects(requestParameters: DelegatedAdminResourceRightsApiListAllObjectsRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminResourceRightsApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Delegated Admin Resource Rights by name
     * @param {DelegatedAdminResourceRightsApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminResourceRightsApiGenerated
     */
    public updateByName(requestParameters: DelegatedAdminResourceRightsApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminResourceRightsApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
