/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddHttpServletCrossOriginPolicyRequest } from '../models';
// @ts-ignore
import { EnumhttpServletCrossOriginPolicySchemaUrn } from '../models';
// @ts-ignore
import { HttpServletCrossOriginPolicyListResponse } from '../models';
// @ts-ignore
import { HttpServletCrossOriginPolicyResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * HttpServletCrossOriginPolicyApi - axios parameter creator
 * @export
 */
export const HttpServletCrossOriginPolicyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new HTTP Servlet Cross Origin Policy to the config
         * @param {AddHttpServletCrossOriginPolicyRequest} addHttpServletCrossOriginPolicyRequest Create a new HTTP Servlet Cross Origin Policy in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPolicy: async (addHttpServletCrossOriginPolicyRequest: AddHttpServletCrossOriginPolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addHttpServletCrossOriginPolicyRequest' is not null or undefined
            assertParamExists('addNewPolicy', 'addHttpServletCrossOriginPolicyRequest', addHttpServletCrossOriginPolicyRequest)
            const localVarPath = `/http-servlet-cross-origin-policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addHttpServletCrossOriginPolicyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-cross-origin-policies',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addHttpServletCrossOriginPolicyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a HTTP Servlet Cross Origin Policy
         * @param {string} httpServletCrossOriginPolicyName Name of the HTTP Servlet Cross Origin Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy: async (httpServletCrossOriginPolicyName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'httpServletCrossOriginPolicyName' is not null or undefined
            assertParamExists('deletePolicy', 'httpServletCrossOriginPolicyName', httpServletCrossOriginPolicyName)
            const localVarPath = `/http-servlet-cross-origin-policies/{http-servlet-cross-origin-policy-name}`
                .replace(`{${"http-servlet-cross-origin-policy-name"}}`, encodeURIComponent(String(httpServletCrossOriginPolicyName !== undefined ? httpServletCrossOriginPolicyName : `-http-servlet-cross-origin-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-cross-origin-policies/{http-servlet-cross-origin-policy-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single HTTP Servlet Cross Origin Policy
         * @param {string} httpServletCrossOriginPolicyName Name of the HTTP Servlet Cross Origin Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePolicy: async (httpServletCrossOriginPolicyName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'httpServletCrossOriginPolicyName' is not null or undefined
            assertParamExists('getSinglePolicy', 'httpServletCrossOriginPolicyName', httpServletCrossOriginPolicyName)
            const localVarPath = `/http-servlet-cross-origin-policies/{http-servlet-cross-origin-policy-name}`
                .replace(`{${"http-servlet-cross-origin-policy-name"}}`, encodeURIComponent(String(httpServletCrossOriginPolicyName !== undefined ? httpServletCrossOriginPolicyName : `-http-servlet-cross-origin-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-cross-origin-policies/{http-servlet-cross-origin-policy-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all HTTP Servlet Cross Origin Policy objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllPolicies: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/http-servlet-cross-origin-policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-cross-origin-policies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing HTTP Servlet Cross Origin Policy by name
         * @param {string} httpServletCrossOriginPolicyName Name of the HTTP Servlet Cross Origin Policy
         * @param {UpdateRequest} updateRequest Update an existing HTTP Servlet Cross Origin Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (httpServletCrossOriginPolicyName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'httpServletCrossOriginPolicyName' is not null or undefined
            assertParamExists('updateByName', 'httpServletCrossOriginPolicyName', httpServletCrossOriginPolicyName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/http-servlet-cross-origin-policies/{http-servlet-cross-origin-policy-name}`
                .replace(`{${"http-servlet-cross-origin-policy-name"}}`, encodeURIComponent(String(httpServletCrossOriginPolicyName !== undefined ? httpServletCrossOriginPolicyName : `-http-servlet-cross-origin-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-cross-origin-policies/{http-servlet-cross-origin-policy-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HttpServletCrossOriginPolicyApi - functional programming interface
 * @export
 */
export const HttpServletCrossOriginPolicyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HttpServletCrossOriginPolicyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new HTTP Servlet Cross Origin Policy to the config
         * @param {HttpServletCrossOriginPolicyApiAddNewPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewPolicy(requestParameters: HttpServletCrossOriginPolicyApiAddNewPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HttpServletCrossOriginPolicyResponse>> {
            const addHttpServletCrossOriginPolicyRequest: AddHttpServletCrossOriginPolicyRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewPolicy(addHttpServletCrossOriginPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a HTTP Servlet Cross Origin Policy
         * @param {HttpServletCrossOriginPolicyApiDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePolicy(requestParameters: HttpServletCrossOriginPolicyApiDeletePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePolicy(requestParameters.httpServletCrossOriginPolicyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single HTTP Servlet Cross Origin Policy
         * @param {HttpServletCrossOriginPolicyApiGetSinglePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSinglePolicy(requestParameters: HttpServletCrossOriginPolicyApiGetSinglePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HttpServletCrossOriginPolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSinglePolicy(requestParameters.httpServletCrossOriginPolicyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all HTTP Servlet Cross Origin Policy objects
         * @param {HttpServletCrossOriginPolicyApiListAllPoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllPolicies(requestParameters: HttpServletCrossOriginPolicyApiListAllPoliciesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HttpServletCrossOriginPolicyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllPolicies(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing HTTP Servlet Cross Origin Policy by name
         * @param {HttpServletCrossOriginPolicyApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: HttpServletCrossOriginPolicyApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HttpServletCrossOriginPolicyResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.httpServletCrossOriginPolicyName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HttpServletCrossOriginPolicyApi - factory interface
 * @export
 */
export const HttpServletCrossOriginPolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HttpServletCrossOriginPolicyApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new HTTP Servlet Cross Origin Policy to the config
         * @param {HttpServletCrossOriginPolicyApiAddNewPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPolicy(requestParameters: HttpServletCrossOriginPolicyApiAddNewPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<HttpServletCrossOriginPolicyResponse> {
            return localVarFp.addNewPolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a HTTP Servlet Cross Origin Policy
         * @param {HttpServletCrossOriginPolicyApiDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy(requestParameters: HttpServletCrossOriginPolicyApiDeletePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single HTTP Servlet Cross Origin Policy
         * @param {HttpServletCrossOriginPolicyApiGetSinglePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePolicy(requestParameters: HttpServletCrossOriginPolicyApiGetSinglePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<HttpServletCrossOriginPolicyResponse> {
            return localVarFp.getSinglePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all HTTP Servlet Cross Origin Policy objects
         * @param {HttpServletCrossOriginPolicyApiListAllPoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllPolicies(requestParameters: HttpServletCrossOriginPolicyApiListAllPoliciesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<HttpServletCrossOriginPolicyListResponse> {
            return localVarFp.listAllPolicies(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing HTTP Servlet Cross Origin Policy by name
         * @param {HttpServletCrossOriginPolicyApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: HttpServletCrossOriginPolicyApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<HttpServletCrossOriginPolicyResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewPolicy operation in HttpServletCrossOriginPolicyApi.
 * @export
 * @interface HttpServletCrossOriginPolicyApiAddNewPolicyRequest
 */
export type HttpServletCrossOriginPolicyApiAddNewPolicyRequest = {
    
} & AddHttpServletCrossOriginPolicyRequest

/**
 * Request parameters for deletePolicy operation in HttpServletCrossOriginPolicyApi.
 * @export
 * @interface HttpServletCrossOriginPolicyApiDeletePolicyRequest
 */
export type HttpServletCrossOriginPolicyApiDeletePolicyRequest = {
    
    /**
    * Name of the HTTP Servlet Cross Origin Policy
    * @type {string}
    * @memberof HttpServletCrossOriginPolicyApiDeletePolicy
    */
    readonly httpServletCrossOriginPolicyName: string
    
}

/**
 * Request parameters for getSinglePolicy operation in HttpServletCrossOriginPolicyApi.
 * @export
 * @interface HttpServletCrossOriginPolicyApiGetSinglePolicyRequest
 */
export type HttpServletCrossOriginPolicyApiGetSinglePolicyRequest = {
    
    /**
    * Name of the HTTP Servlet Cross Origin Policy
    * @type {string}
    * @memberof HttpServletCrossOriginPolicyApiGetSinglePolicy
    */
    readonly httpServletCrossOriginPolicyName: string
    
}

/**
 * Request parameters for listAllPolicies operation in HttpServletCrossOriginPolicyApi.
 * @export
 * @interface HttpServletCrossOriginPolicyApiListAllPoliciesRequest
 */
export type HttpServletCrossOriginPolicyApiListAllPoliciesRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof HttpServletCrossOriginPolicyApiListAllPolicies
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in HttpServletCrossOriginPolicyApi.
 * @export
 * @interface HttpServletCrossOriginPolicyApiUpdateByNameRequest
 */
export type HttpServletCrossOriginPolicyApiUpdateByNameRequest = {
    
    /**
    * Name of the HTTP Servlet Cross Origin Policy
    * @type {string}
    * @memberof HttpServletCrossOriginPolicyApiUpdateByName
    */
    readonly httpServletCrossOriginPolicyName: string
    
} & UpdateRequest

/**
 * HttpServletCrossOriginPolicyApiGenerated - object-oriented interface
 * @export
 * @class HttpServletCrossOriginPolicyApiGenerated
 * @extends {BaseAPI}
 */
export class HttpServletCrossOriginPolicyApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new HTTP Servlet Cross Origin Policy to the config
     * @param {HttpServletCrossOriginPolicyApiAddNewPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpServletCrossOriginPolicyApiGenerated
     */
    public addNewPolicy(requestParameters: HttpServletCrossOriginPolicyApiAddNewPolicyRequest, options?: AxiosRequestConfig) {
        return HttpServletCrossOriginPolicyApiFp(this.configuration).addNewPolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a HTTP Servlet Cross Origin Policy
     * @param {HttpServletCrossOriginPolicyApiDeletePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpServletCrossOriginPolicyApiGenerated
     */
    public deletePolicy(requestParameters: HttpServletCrossOriginPolicyApiDeletePolicyRequest, options?: AxiosRequestConfig) {
        return HttpServletCrossOriginPolicyApiFp(this.configuration).deletePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single HTTP Servlet Cross Origin Policy
     * @param {HttpServletCrossOriginPolicyApiGetSinglePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpServletCrossOriginPolicyApiGenerated
     */
    public getSinglePolicy(requestParameters: HttpServletCrossOriginPolicyApiGetSinglePolicyRequest, options?: AxiosRequestConfig) {
        return HttpServletCrossOriginPolicyApiFp(this.configuration).getSinglePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all HTTP Servlet Cross Origin Policy objects
     * @param {HttpServletCrossOriginPolicyApiListAllPoliciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpServletCrossOriginPolicyApiGenerated
     */
    public listAllPolicies(requestParameters: HttpServletCrossOriginPolicyApiListAllPoliciesRequest = {}, options?: AxiosRequestConfig) {
        return HttpServletCrossOriginPolicyApiFp(this.configuration).listAllPolicies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing HTTP Servlet Cross Origin Policy by name
     * @param {HttpServletCrossOriginPolicyApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpServletCrossOriginPolicyApiGenerated
     */
    public updateByName(requestParameters: HttpServletCrossOriginPolicyApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return HttpServletCrossOriginPolicyApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
