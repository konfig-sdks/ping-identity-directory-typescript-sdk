/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddSearchReferenceCriteria200Response } from '../models';
// @ts-ignore
import { AddSearchReferenceCriteriaRequest } from '../models';
// @ts-ignore
import { EnumthirdPartySearchReferenceCriteriaSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { SearchReferenceCriteriaListResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SearchReferenceCriteriaApi - axios parameter creator
 * @export
 */
export const SearchReferenceCriteriaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Search Reference Criteria to the config
         * @param {AddSearchReferenceCriteriaRequest} addSearchReferenceCriteriaRequest Create a new Search Reference Criteria in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewReferenceCriteria: async (addSearchReferenceCriteriaRequest: AddSearchReferenceCriteriaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addSearchReferenceCriteriaRequest' is not null or undefined
            assertParamExists('addNewReferenceCriteria', 'addSearchReferenceCriteriaRequest', addSearchReferenceCriteriaRequest)
            const localVarPath = `/search-reference-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addSearchReferenceCriteriaRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search-reference-criteria',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addSearchReferenceCriteriaRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Search Reference Criteria
         * @param {string} searchReferenceCriteriaName Name of the Search Reference Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCriteriaById: async (searchReferenceCriteriaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchReferenceCriteriaName' is not null or undefined
            assertParamExists('deleteCriteriaById', 'searchReferenceCriteriaName', searchReferenceCriteriaName)
            const localVarPath = `/search-reference-criteria/{search-reference-criteria-name}`
                .replace(`{${"search-reference-criteria-name"}}`, encodeURIComponent(String(searchReferenceCriteriaName !== undefined ? searchReferenceCriteriaName : `-search-reference-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search-reference-criteria/{search-reference-criteria-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Search Reference Criteria
         * @param {string} searchReferenceCriteriaName Name of the Search Reference Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (searchReferenceCriteriaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchReferenceCriteriaName' is not null or undefined
            assertParamExists('getSingle', 'searchReferenceCriteriaName', searchReferenceCriteriaName)
            const localVarPath = `/search-reference-criteria/{search-reference-criteria-name}`
                .replace(`{${"search-reference-criteria-name"}}`, encodeURIComponent(String(searchReferenceCriteriaName !== undefined ? searchReferenceCriteriaName : `-search-reference-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search-reference-criteria/{search-reference-criteria-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Search Reference Criteria objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/search-reference-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search-reference-criteria',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Search Reference Criteria by name
         * @param {string} searchReferenceCriteriaName Name of the Search Reference Criteria
         * @param {UpdateRequest} updateRequest Update an existing Search Reference Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (searchReferenceCriteriaName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchReferenceCriteriaName' is not null or undefined
            assertParamExists('updateByName', 'searchReferenceCriteriaName', searchReferenceCriteriaName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/search-reference-criteria/{search-reference-criteria-name}`
                .replace(`{${"search-reference-criteria-name"}}`, encodeURIComponent(String(searchReferenceCriteriaName !== undefined ? searchReferenceCriteriaName : `-search-reference-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search-reference-criteria/{search-reference-criteria-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchReferenceCriteriaApi - functional programming interface
 * @export
 */
export const SearchReferenceCriteriaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchReferenceCriteriaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Search Reference Criteria to the config
         * @param {SearchReferenceCriteriaApiAddNewReferenceCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewReferenceCriteria(requestParameters: SearchReferenceCriteriaApiAddNewReferenceCriteriaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddSearchReferenceCriteria200Response>> {
            const addSearchReferenceCriteriaRequest: AddSearchReferenceCriteriaRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewReferenceCriteria(addSearchReferenceCriteriaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Search Reference Criteria
         * @param {SearchReferenceCriteriaApiDeleteCriteriaByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCriteriaById(requestParameters: SearchReferenceCriteriaApiDeleteCriteriaByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCriteriaById(requestParameters.searchReferenceCriteriaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Search Reference Criteria
         * @param {SearchReferenceCriteriaApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: SearchReferenceCriteriaApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddSearchReferenceCriteria200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.searchReferenceCriteriaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Search Reference Criteria objects
         * @param {SearchReferenceCriteriaApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: SearchReferenceCriteriaApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchReferenceCriteriaListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Search Reference Criteria by name
         * @param {SearchReferenceCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: SearchReferenceCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddSearchReferenceCriteria200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.searchReferenceCriteriaName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchReferenceCriteriaApi - factory interface
 * @export
 */
export const SearchReferenceCriteriaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchReferenceCriteriaApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Search Reference Criteria to the config
         * @param {SearchReferenceCriteriaApiAddNewReferenceCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewReferenceCriteria(requestParameters: SearchReferenceCriteriaApiAddNewReferenceCriteriaRequest, options?: AxiosRequestConfig): AxiosPromise<AddSearchReferenceCriteria200Response> {
            return localVarFp.addNewReferenceCriteria(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Search Reference Criteria
         * @param {SearchReferenceCriteriaApiDeleteCriteriaByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCriteriaById(requestParameters: SearchReferenceCriteriaApiDeleteCriteriaByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCriteriaById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Search Reference Criteria
         * @param {SearchReferenceCriteriaApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: SearchReferenceCriteriaApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddSearchReferenceCriteria200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Search Reference Criteria objects
         * @param {SearchReferenceCriteriaApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: SearchReferenceCriteriaApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SearchReferenceCriteriaListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Search Reference Criteria by name
         * @param {SearchReferenceCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: SearchReferenceCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddSearchReferenceCriteria200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewReferenceCriteria operation in SearchReferenceCriteriaApi.
 * @export
 * @interface SearchReferenceCriteriaApiAddNewReferenceCriteriaRequest
 */
export type SearchReferenceCriteriaApiAddNewReferenceCriteriaRequest = {
    
} & AddSearchReferenceCriteriaRequest

/**
 * Request parameters for deleteCriteriaById operation in SearchReferenceCriteriaApi.
 * @export
 * @interface SearchReferenceCriteriaApiDeleteCriteriaByIdRequest
 */
export type SearchReferenceCriteriaApiDeleteCriteriaByIdRequest = {
    
    /**
    * Name of the Search Reference Criteria
    * @type {string}
    * @memberof SearchReferenceCriteriaApiDeleteCriteriaById
    */
    readonly searchReferenceCriteriaName: string
    
}

/**
 * Request parameters for getSingle operation in SearchReferenceCriteriaApi.
 * @export
 * @interface SearchReferenceCriteriaApiGetSingleRequest
 */
export type SearchReferenceCriteriaApiGetSingleRequest = {
    
    /**
    * Name of the Search Reference Criteria
    * @type {string}
    * @memberof SearchReferenceCriteriaApiGetSingle
    */
    readonly searchReferenceCriteriaName: string
    
}

/**
 * Request parameters for listAllObjects operation in SearchReferenceCriteriaApi.
 * @export
 * @interface SearchReferenceCriteriaApiListAllObjectsRequest
 */
export type SearchReferenceCriteriaApiListAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof SearchReferenceCriteriaApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in SearchReferenceCriteriaApi.
 * @export
 * @interface SearchReferenceCriteriaApiUpdateByNameRequest
 */
export type SearchReferenceCriteriaApiUpdateByNameRequest = {
    
    /**
    * Name of the Search Reference Criteria
    * @type {string}
    * @memberof SearchReferenceCriteriaApiUpdateByName
    */
    readonly searchReferenceCriteriaName: string
    
} & UpdateRequest

/**
 * SearchReferenceCriteriaApiGenerated - object-oriented interface
 * @export
 * @class SearchReferenceCriteriaApiGenerated
 * @extends {BaseAPI}
 */
export class SearchReferenceCriteriaApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Search Reference Criteria to the config
     * @param {SearchReferenceCriteriaApiAddNewReferenceCriteriaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchReferenceCriteriaApiGenerated
     */
    public addNewReferenceCriteria(requestParameters: SearchReferenceCriteriaApiAddNewReferenceCriteriaRequest, options?: AxiosRequestConfig) {
        return SearchReferenceCriteriaApiFp(this.configuration).addNewReferenceCriteria(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Search Reference Criteria
     * @param {SearchReferenceCriteriaApiDeleteCriteriaByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchReferenceCriteriaApiGenerated
     */
    public deleteCriteriaById(requestParameters: SearchReferenceCriteriaApiDeleteCriteriaByIdRequest, options?: AxiosRequestConfig) {
        return SearchReferenceCriteriaApiFp(this.configuration).deleteCriteriaById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Search Reference Criteria
     * @param {SearchReferenceCriteriaApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchReferenceCriteriaApiGenerated
     */
    public getSingle(requestParameters: SearchReferenceCriteriaApiGetSingleRequest, options?: AxiosRequestConfig) {
        return SearchReferenceCriteriaApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Search Reference Criteria objects
     * @param {SearchReferenceCriteriaApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchReferenceCriteriaApiGenerated
     */
    public listAllObjects(requestParameters: SearchReferenceCriteriaApiListAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return SearchReferenceCriteriaApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Search Reference Criteria by name
     * @param {SearchReferenceCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchReferenceCriteriaApiGenerated
     */
    public updateByName(requestParameters: SearchReferenceCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return SearchReferenceCriteriaApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
