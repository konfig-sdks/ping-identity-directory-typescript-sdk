/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddCipherStreamProvider200Response } from '../models';
// @ts-ignore
import { AddCipherStreamProviderRequest } from '../models';
// @ts-ignore
import { CipherStreamProviderListResponse } from '../models';
// @ts-ignore
import { EnumthirdPartyCipherStreamProviderSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CipherStreamProviderApi - axios parameter creator
 * @export
 */
export const CipherStreamProviderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Cipher Stream Provider to the config
         * @param {AddCipherStreamProviderRequest} addCipherStreamProviderRequest Create a new Cipher Stream Provider in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewProvider: async (addCipherStreamProviderRequest: AddCipherStreamProviderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addCipherStreamProviderRequest' is not null or undefined
            assertParamExists('addNewProvider', 'addCipherStreamProviderRequest', addCipherStreamProviderRequest)
            const localVarPath = `/cipher-stream-providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addCipherStreamProviderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cipher-stream-providers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addCipherStreamProviderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Cipher Stream Provider
         * @param {string} cipherStreamProviderName Name of the Cipher Stream Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvider: async (cipherStreamProviderName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cipherStreamProviderName' is not null or undefined
            assertParamExists('deleteProvider', 'cipherStreamProviderName', cipherStreamProviderName)
            const localVarPath = `/cipher-stream-providers/{cipher-stream-provider-name}`
                .replace(`{${"cipher-stream-provider-name"}}`, encodeURIComponent(String(cipherStreamProviderName !== undefined ? cipherStreamProviderName : `-cipher-stream-provider-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cipher-stream-providers/{cipher-stream-provider-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Cipher Stream Provider
         * @param {string} cipherStreamProviderName Name of the Cipher Stream Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (cipherStreamProviderName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cipherStreamProviderName' is not null or undefined
            assertParamExists('getSingle', 'cipherStreamProviderName', cipherStreamProviderName)
            const localVarPath = `/cipher-stream-providers/{cipher-stream-provider-name}`
                .replace(`{${"cipher-stream-provider-name"}}`, encodeURIComponent(String(cipherStreamProviderName !== undefined ? cipherStreamProviderName : `-cipher-stream-provider-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cipher-stream-providers/{cipher-stream-provider-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Cipher Stream Provider objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllProviders: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cipher-stream-providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cipher-stream-providers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Cipher Stream Provider by name
         * @param {string} cipherStreamProviderName Name of the Cipher Stream Provider
         * @param {UpdateRequest} updateRequest Update an existing Cipher Stream Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (cipherStreamProviderName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cipherStreamProviderName' is not null or undefined
            assertParamExists('updateByName', 'cipherStreamProviderName', cipherStreamProviderName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/cipher-stream-providers/{cipher-stream-provider-name}`
                .replace(`{${"cipher-stream-provider-name"}}`, encodeURIComponent(String(cipherStreamProviderName !== undefined ? cipherStreamProviderName : `-cipher-stream-provider-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cipher-stream-providers/{cipher-stream-provider-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CipherStreamProviderApi - functional programming interface
 * @export
 */
export const CipherStreamProviderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CipherStreamProviderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Cipher Stream Provider to the config
         * @param {CipherStreamProviderApiAddNewProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewProvider(requestParameters: CipherStreamProviderApiAddNewProviderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddCipherStreamProvider200Response>> {
            const addCipherStreamProviderRequest: AddCipherStreamProviderRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewProvider(addCipherStreamProviderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Cipher Stream Provider
         * @param {CipherStreamProviderApiDeleteProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProvider(requestParameters: CipherStreamProviderApiDeleteProviderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProvider(requestParameters.cipherStreamProviderName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Cipher Stream Provider
         * @param {CipherStreamProviderApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: CipherStreamProviderApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddCipherStreamProvider200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.cipherStreamProviderName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Cipher Stream Provider objects
         * @param {CipherStreamProviderApiListAllProvidersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllProviders(requestParameters: CipherStreamProviderApiListAllProvidersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CipherStreamProviderListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllProviders(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Cipher Stream Provider by name
         * @param {CipherStreamProviderApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: CipherStreamProviderApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddCipherStreamProvider200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.cipherStreamProviderName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CipherStreamProviderApi - factory interface
 * @export
 */
export const CipherStreamProviderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CipherStreamProviderApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Cipher Stream Provider to the config
         * @param {CipherStreamProviderApiAddNewProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewProvider(requestParameters: CipherStreamProviderApiAddNewProviderRequest, options?: AxiosRequestConfig): AxiosPromise<AddCipherStreamProvider200Response> {
            return localVarFp.addNewProvider(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Cipher Stream Provider
         * @param {CipherStreamProviderApiDeleteProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvider(requestParameters: CipherStreamProviderApiDeleteProviderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProvider(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Cipher Stream Provider
         * @param {CipherStreamProviderApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: CipherStreamProviderApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddCipherStreamProvider200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Cipher Stream Provider objects
         * @param {CipherStreamProviderApiListAllProvidersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllProviders(requestParameters: CipherStreamProviderApiListAllProvidersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CipherStreamProviderListResponse> {
            return localVarFp.listAllProviders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Cipher Stream Provider by name
         * @param {CipherStreamProviderApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: CipherStreamProviderApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddCipherStreamProvider200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewProvider operation in CipherStreamProviderApi.
 * @export
 * @interface CipherStreamProviderApiAddNewProviderRequest
 */
export type CipherStreamProviderApiAddNewProviderRequest = {
    
} & AddCipherStreamProviderRequest

/**
 * Request parameters for deleteProvider operation in CipherStreamProviderApi.
 * @export
 * @interface CipherStreamProviderApiDeleteProviderRequest
 */
export type CipherStreamProviderApiDeleteProviderRequest = {
    
    /**
    * Name of the Cipher Stream Provider
    * @type {string}
    * @memberof CipherStreamProviderApiDeleteProvider
    */
    readonly cipherStreamProviderName: string
    
}

/**
 * Request parameters for getSingle operation in CipherStreamProviderApi.
 * @export
 * @interface CipherStreamProviderApiGetSingleRequest
 */
export type CipherStreamProviderApiGetSingleRequest = {
    
    /**
    * Name of the Cipher Stream Provider
    * @type {string}
    * @memberof CipherStreamProviderApiGetSingle
    */
    readonly cipherStreamProviderName: string
    
}

/**
 * Request parameters for listAllProviders operation in CipherStreamProviderApi.
 * @export
 * @interface CipherStreamProviderApiListAllProvidersRequest
 */
export type CipherStreamProviderApiListAllProvidersRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof CipherStreamProviderApiListAllProviders
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in CipherStreamProviderApi.
 * @export
 * @interface CipherStreamProviderApiUpdateByNameRequest
 */
export type CipherStreamProviderApiUpdateByNameRequest = {
    
    /**
    * Name of the Cipher Stream Provider
    * @type {string}
    * @memberof CipherStreamProviderApiUpdateByName
    */
    readonly cipherStreamProviderName: string
    
} & UpdateRequest

/**
 * CipherStreamProviderApiGenerated - object-oriented interface
 * @export
 * @class CipherStreamProviderApiGenerated
 * @extends {BaseAPI}
 */
export class CipherStreamProviderApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Cipher Stream Provider to the config
     * @param {CipherStreamProviderApiAddNewProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CipherStreamProviderApiGenerated
     */
    public addNewProvider(requestParameters: CipherStreamProviderApiAddNewProviderRequest, options?: AxiosRequestConfig) {
        return CipherStreamProviderApiFp(this.configuration).addNewProvider(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Cipher Stream Provider
     * @param {CipherStreamProviderApiDeleteProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CipherStreamProviderApiGenerated
     */
    public deleteProvider(requestParameters: CipherStreamProviderApiDeleteProviderRequest, options?: AxiosRequestConfig) {
        return CipherStreamProviderApiFp(this.configuration).deleteProvider(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Cipher Stream Provider
     * @param {CipherStreamProviderApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CipherStreamProviderApiGenerated
     */
    public getSingle(requestParameters: CipherStreamProviderApiGetSingleRequest, options?: AxiosRequestConfig) {
        return CipherStreamProviderApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Cipher Stream Provider objects
     * @param {CipherStreamProviderApiListAllProvidersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CipherStreamProviderApiGenerated
     */
    public listAllProviders(requestParameters: CipherStreamProviderApiListAllProvidersRequest = {}, options?: AxiosRequestConfig) {
        return CipherStreamProviderApiFp(this.configuration).listAllProviders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Cipher Stream Provider by name
     * @param {CipherStreamProviderApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CipherStreamProviderApiGenerated
     */
    public updateByName(requestParameters: CipherStreamProviderApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return CipherStreamProviderApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
