/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddVaultAuthenticationMethod200Response } from '../models';
// @ts-ignore
import { AddVaultAuthenticationMethodRequest } from '../models';
// @ts-ignore
import { EnumuserPassVaultAuthenticationMethodSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
// @ts-ignore
import { VaultAuthenticationMethodListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VaultAuthenticationMethodApi - axios parameter creator
 * @export
 */
export const VaultAuthenticationMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Vault Authentication Method to the config
         * @param {AddVaultAuthenticationMethodRequest} addVaultAuthenticationMethodRequest Create a new Vault Authentication Method in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewMethod: async (addVaultAuthenticationMethodRequest: AddVaultAuthenticationMethodRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addVaultAuthenticationMethodRequest' is not null or undefined
            assertParamExists('addNewMethod', 'addVaultAuthenticationMethodRequest', addVaultAuthenticationMethodRequest)
            const localVarPath = `/vault-authentication-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addVaultAuthenticationMethodRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vault-authentication-methods',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addVaultAuthenticationMethodRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Vault Authentication Method
         * @param {string} vaultAuthenticationMethodName Name of the Vault Authentication Method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMethod: async (vaultAuthenticationMethodName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultAuthenticationMethodName' is not null or undefined
            assertParamExists('deleteMethod', 'vaultAuthenticationMethodName', vaultAuthenticationMethodName)
            const localVarPath = `/vault-authentication-methods/{vault-authentication-method-name}`
                .replace(`{${"vault-authentication-method-name"}}`, encodeURIComponent(String(vaultAuthenticationMethodName !== undefined ? vaultAuthenticationMethodName : `-vault-authentication-method-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vault-authentication-methods/{vault-authentication-method-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Vault Authentication Method objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vault-authentication-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vault-authentication-methods',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Vault Authentication Method
         * @param {string} vaultAuthenticationMethodName Name of the Vault Authentication Method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (vaultAuthenticationMethodName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultAuthenticationMethodName' is not null or undefined
            assertParamExists('getSingle', 'vaultAuthenticationMethodName', vaultAuthenticationMethodName)
            const localVarPath = `/vault-authentication-methods/{vault-authentication-method-name}`
                .replace(`{${"vault-authentication-method-name"}}`, encodeURIComponent(String(vaultAuthenticationMethodName !== undefined ? vaultAuthenticationMethodName : `-vault-authentication-method-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vault-authentication-methods/{vault-authentication-method-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Vault Authentication Method by name
         * @param {string} vaultAuthenticationMethodName Name of the Vault Authentication Method
         * @param {UpdateRequest} updateRequest Update an existing Vault Authentication Method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (vaultAuthenticationMethodName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultAuthenticationMethodName' is not null or undefined
            assertParamExists('updateByName', 'vaultAuthenticationMethodName', vaultAuthenticationMethodName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/vault-authentication-methods/{vault-authentication-method-name}`
                .replace(`{${"vault-authentication-method-name"}}`, encodeURIComponent(String(vaultAuthenticationMethodName !== undefined ? vaultAuthenticationMethodName : `-vault-authentication-method-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vault-authentication-methods/{vault-authentication-method-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VaultAuthenticationMethodApi - functional programming interface
 * @export
 */
export const VaultAuthenticationMethodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VaultAuthenticationMethodApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Vault Authentication Method to the config
         * @param {VaultAuthenticationMethodApiAddNewMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewMethod(requestParameters: VaultAuthenticationMethodApiAddNewMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddVaultAuthenticationMethod200Response>> {
            const addVaultAuthenticationMethodRequest: AddVaultAuthenticationMethodRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewMethod(addVaultAuthenticationMethodRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Vault Authentication Method
         * @param {VaultAuthenticationMethodApiDeleteMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMethod(requestParameters: VaultAuthenticationMethodApiDeleteMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMethod(requestParameters.vaultAuthenticationMethodName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Vault Authentication Method objects
         * @param {VaultAuthenticationMethodApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllObjects(requestParameters: VaultAuthenticationMethodApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAuthenticationMethodListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Vault Authentication Method
         * @param {VaultAuthenticationMethodApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: VaultAuthenticationMethodApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddVaultAuthenticationMethod200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.vaultAuthenticationMethodName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Vault Authentication Method by name
         * @param {VaultAuthenticationMethodApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: VaultAuthenticationMethodApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddVaultAuthenticationMethod200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.vaultAuthenticationMethodName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VaultAuthenticationMethodApi - factory interface
 * @export
 */
export const VaultAuthenticationMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VaultAuthenticationMethodApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Vault Authentication Method to the config
         * @param {VaultAuthenticationMethodApiAddNewMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewMethod(requestParameters: VaultAuthenticationMethodApiAddNewMethodRequest, options?: AxiosRequestConfig): AxiosPromise<AddVaultAuthenticationMethod200Response> {
            return localVarFp.addNewMethod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Vault Authentication Method
         * @param {VaultAuthenticationMethodApiDeleteMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMethod(requestParameters: VaultAuthenticationMethodApiDeleteMethodRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMethod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Vault Authentication Method objects
         * @param {VaultAuthenticationMethodApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects(requestParameters: VaultAuthenticationMethodApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VaultAuthenticationMethodListResponse> {
            return localVarFp.getAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Vault Authentication Method
         * @param {VaultAuthenticationMethodApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: VaultAuthenticationMethodApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddVaultAuthenticationMethod200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Vault Authentication Method by name
         * @param {VaultAuthenticationMethodApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: VaultAuthenticationMethodApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddVaultAuthenticationMethod200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewMethod operation in VaultAuthenticationMethodApi.
 * @export
 * @interface VaultAuthenticationMethodApiAddNewMethodRequest
 */
export type VaultAuthenticationMethodApiAddNewMethodRequest = {
    
} & AddVaultAuthenticationMethodRequest

/**
 * Request parameters for deleteMethod operation in VaultAuthenticationMethodApi.
 * @export
 * @interface VaultAuthenticationMethodApiDeleteMethodRequest
 */
export type VaultAuthenticationMethodApiDeleteMethodRequest = {
    
    /**
    * Name of the Vault Authentication Method
    * @type {string}
    * @memberof VaultAuthenticationMethodApiDeleteMethod
    */
    readonly vaultAuthenticationMethodName: string
    
}

/**
 * Request parameters for getAllObjects operation in VaultAuthenticationMethodApi.
 * @export
 * @interface VaultAuthenticationMethodApiGetAllObjectsRequest
 */
export type VaultAuthenticationMethodApiGetAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof VaultAuthenticationMethodApiGetAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingle operation in VaultAuthenticationMethodApi.
 * @export
 * @interface VaultAuthenticationMethodApiGetSingleRequest
 */
export type VaultAuthenticationMethodApiGetSingleRequest = {
    
    /**
    * Name of the Vault Authentication Method
    * @type {string}
    * @memberof VaultAuthenticationMethodApiGetSingle
    */
    readonly vaultAuthenticationMethodName: string
    
}

/**
 * Request parameters for updateByName operation in VaultAuthenticationMethodApi.
 * @export
 * @interface VaultAuthenticationMethodApiUpdateByNameRequest
 */
export type VaultAuthenticationMethodApiUpdateByNameRequest = {
    
    /**
    * Name of the Vault Authentication Method
    * @type {string}
    * @memberof VaultAuthenticationMethodApiUpdateByName
    */
    readonly vaultAuthenticationMethodName: string
    
} & UpdateRequest

/**
 * VaultAuthenticationMethodApiGenerated - object-oriented interface
 * @export
 * @class VaultAuthenticationMethodApiGenerated
 * @extends {BaseAPI}
 */
export class VaultAuthenticationMethodApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Vault Authentication Method to the config
     * @param {VaultAuthenticationMethodApiAddNewMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultAuthenticationMethodApiGenerated
     */
    public addNewMethod(requestParameters: VaultAuthenticationMethodApiAddNewMethodRequest, options?: AxiosRequestConfig) {
        return VaultAuthenticationMethodApiFp(this.configuration).addNewMethod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Vault Authentication Method
     * @param {VaultAuthenticationMethodApiDeleteMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultAuthenticationMethodApiGenerated
     */
    public deleteMethod(requestParameters: VaultAuthenticationMethodApiDeleteMethodRequest, options?: AxiosRequestConfig) {
        return VaultAuthenticationMethodApiFp(this.configuration).deleteMethod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Vault Authentication Method objects
     * @param {VaultAuthenticationMethodApiGetAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultAuthenticationMethodApiGenerated
     */
    public getAllObjects(requestParameters: VaultAuthenticationMethodApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return VaultAuthenticationMethodApiFp(this.configuration).getAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Vault Authentication Method
     * @param {VaultAuthenticationMethodApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultAuthenticationMethodApiGenerated
     */
    public getSingle(requestParameters: VaultAuthenticationMethodApiGetSingleRequest, options?: AxiosRequestConfig) {
        return VaultAuthenticationMethodApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Vault Authentication Method by name
     * @param {VaultAuthenticationMethodApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultAuthenticationMethodApiGenerated
     */
    public updateByName(requestParameters: VaultAuthenticationMethodApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return VaultAuthenticationMethodApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
