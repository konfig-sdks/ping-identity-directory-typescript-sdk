/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddLdapCorrelationAttributePairRequest } from '../models';
// @ts-ignore
import { EnumldapCorrelationAttributePairSchemaUrn } from '../models';
// @ts-ignore
import { LdapCorrelationAttributePairListResponse } from '../models';
// @ts-ignore
import { LdapCorrelationAttributePairResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LdapCorrelationAttributePairApi - axios parameter creator
 * @export
 */
export const LdapCorrelationAttributePairApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new LDAP Correlation Attribute Pair to the config
         * @param {string} correlatedLdapDataViewName Name of the Correlated LDAP Data View
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {AddLdapCorrelationAttributePairRequest} addLdapCorrelationAttributePairRequest Create a new LDAP Correlation Attribute Pair in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPairToConfig: async (correlatedLdapDataViewName: string, scimResourceTypeName: string, addLdapCorrelationAttributePairRequest: AddLdapCorrelationAttributePairRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'correlatedLdapDataViewName' is not null or undefined
            assertParamExists('addNewPairToConfig', 'correlatedLdapDataViewName', correlatedLdapDataViewName)
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('addNewPairToConfig', 'scimResourceTypeName', scimResourceTypeName)
            // verify required parameter 'addLdapCorrelationAttributePairRequest' is not null or undefined
            assertParamExists('addNewPairToConfig', 'addLdapCorrelationAttributePairRequest', addLdapCorrelationAttributePairRequest)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs`
                .replace(`{${"correlated-ldap-data-view-name"}}`, encodeURIComponent(String(correlatedLdapDataViewName !== undefined ? correlatedLdapDataViewName : `-correlated-ldap-data-view-name-`)))
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addLdapCorrelationAttributePairRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addLdapCorrelationAttributePairRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a LDAP Correlation Attribute Pair
         * @param {string} ldapCorrelationAttributePairName Name of the LDAP Correlation Attribute Pair
         * @param {string} correlatedLdapDataViewName Name of the Correlated LDAP Data View
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (ldapCorrelationAttributePairName: string, correlatedLdapDataViewName: string, scimResourceTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ldapCorrelationAttributePairName' is not null or undefined
            assertParamExists('delete', 'ldapCorrelationAttributePairName', ldapCorrelationAttributePairName)
            // verify required parameter 'correlatedLdapDataViewName' is not null or undefined
            assertParamExists('delete', 'correlatedLdapDataViewName', correlatedLdapDataViewName)
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('delete', 'scimResourceTypeName', scimResourceTypeName)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs/{ldap-correlation-attribute-pair-name}`
                .replace(`{${"ldap-correlation-attribute-pair-name"}}`, encodeURIComponent(String(ldapCorrelationAttributePairName !== undefined ? ldapCorrelationAttributePairName : `-ldap-correlation-attribute-pair-name-`)))
                .replace(`{${"correlated-ldap-data-view-name"}}`, encodeURIComponent(String(correlatedLdapDataViewName !== undefined ? correlatedLdapDataViewName : `-correlated-ldap-data-view-name-`)))
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs/{ldap-correlation-attribute-pair-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single LDAP Correlation Attribute Pair
         * @param {string} ldapCorrelationAttributePairName Name of the LDAP Correlation Attribute Pair
         * @param {string} correlatedLdapDataViewName Name of the Correlated LDAP Data View
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (ldapCorrelationAttributePairName: string, correlatedLdapDataViewName: string, scimResourceTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ldapCorrelationAttributePairName' is not null or undefined
            assertParamExists('getSingle', 'ldapCorrelationAttributePairName', ldapCorrelationAttributePairName)
            // verify required parameter 'correlatedLdapDataViewName' is not null or undefined
            assertParamExists('getSingle', 'correlatedLdapDataViewName', correlatedLdapDataViewName)
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('getSingle', 'scimResourceTypeName', scimResourceTypeName)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs/{ldap-correlation-attribute-pair-name}`
                .replace(`{${"ldap-correlation-attribute-pair-name"}}`, encodeURIComponent(String(ldapCorrelationAttributePairName !== undefined ? ldapCorrelationAttributePairName : `-ldap-correlation-attribute-pair-name-`)))
                .replace(`{${"correlated-ldap-data-view-name"}}`, encodeURIComponent(String(correlatedLdapDataViewName !== undefined ? correlatedLdapDataViewName : `-correlated-ldap-data-view-name-`)))
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs/{ldap-correlation-attribute-pair-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all LDAP Correlation Attribute Pair objects
         * @param {string} correlatedLdapDataViewName Name of the Correlated LDAP Data View
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCorrelationAttributePairs: async (correlatedLdapDataViewName: string, scimResourceTypeName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'correlatedLdapDataViewName' is not null or undefined
            assertParamExists('listCorrelationAttributePairs', 'correlatedLdapDataViewName', correlatedLdapDataViewName)
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('listCorrelationAttributePairs', 'scimResourceTypeName', scimResourceTypeName)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs`
                .replace(`{${"correlated-ldap-data-view-name"}}`, encodeURIComponent(String(correlatedLdapDataViewName !== undefined ? correlatedLdapDataViewName : `-correlated-ldap-data-view-name-`)))
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing LDAP Correlation Attribute Pair by name
         * @param {string} ldapCorrelationAttributePairName Name of the LDAP Correlation Attribute Pair
         * @param {string} correlatedLdapDataViewName Name of the Correlated LDAP Data View
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {UpdateRequest} updateRequest Update an existing LDAP Correlation Attribute Pair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (ldapCorrelationAttributePairName: string, correlatedLdapDataViewName: string, scimResourceTypeName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ldapCorrelationAttributePairName' is not null or undefined
            assertParamExists('updateByName', 'ldapCorrelationAttributePairName', ldapCorrelationAttributePairName)
            // verify required parameter 'correlatedLdapDataViewName' is not null or undefined
            assertParamExists('updateByName', 'correlatedLdapDataViewName', correlatedLdapDataViewName)
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('updateByName', 'scimResourceTypeName', scimResourceTypeName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs/{ldap-correlation-attribute-pair-name}`
                .replace(`{${"ldap-correlation-attribute-pair-name"}}`, encodeURIComponent(String(ldapCorrelationAttributePairName !== undefined ? ldapCorrelationAttributePairName : `-ldap-correlation-attribute-pair-name-`)))
                .replace(`{${"correlated-ldap-data-view-name"}}`, encodeURIComponent(String(correlatedLdapDataViewName !== undefined ? correlatedLdapDataViewName : `-correlated-ldap-data-view-name-`)))
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs/{ldap-correlation-attribute-pair-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LdapCorrelationAttributePairApi - functional programming interface
 * @export
 */
export const LdapCorrelationAttributePairApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LdapCorrelationAttributePairApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new LDAP Correlation Attribute Pair to the config
         * @param {LdapCorrelationAttributePairApiAddNewPairToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewPairToConfig(requestParameters: LdapCorrelationAttributePairApiAddNewPairToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LdapCorrelationAttributePairResponse>> {
            const addLdapCorrelationAttributePairRequest: AddLdapCorrelationAttributePairRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewPairToConfig(requestParameters.correlatedLdapDataViewName, requestParameters.scimResourceTypeName, addLdapCorrelationAttributePairRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a LDAP Correlation Attribute Pair
         * @param {LdapCorrelationAttributePairApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: LdapCorrelationAttributePairApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(requestParameters.ldapCorrelationAttributePairName, requestParameters.correlatedLdapDataViewName, requestParameters.scimResourceTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single LDAP Correlation Attribute Pair
         * @param {LdapCorrelationAttributePairApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: LdapCorrelationAttributePairApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LdapCorrelationAttributePairResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.ldapCorrelationAttributePairName, requestParameters.correlatedLdapDataViewName, requestParameters.scimResourceTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all LDAP Correlation Attribute Pair objects
         * @param {LdapCorrelationAttributePairApiListCorrelationAttributePairsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCorrelationAttributePairs(requestParameters: LdapCorrelationAttributePairApiListCorrelationAttributePairsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LdapCorrelationAttributePairListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCorrelationAttributePairs(requestParameters.correlatedLdapDataViewName, requestParameters.scimResourceTypeName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing LDAP Correlation Attribute Pair by name
         * @param {LdapCorrelationAttributePairApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: LdapCorrelationAttributePairApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LdapCorrelationAttributePairResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.ldapCorrelationAttributePairName, requestParameters.correlatedLdapDataViewName, requestParameters.scimResourceTypeName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LdapCorrelationAttributePairApi - factory interface
 * @export
 */
export const LdapCorrelationAttributePairApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LdapCorrelationAttributePairApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new LDAP Correlation Attribute Pair to the config
         * @param {LdapCorrelationAttributePairApiAddNewPairToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPairToConfig(requestParameters: LdapCorrelationAttributePairApiAddNewPairToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<LdapCorrelationAttributePairResponse> {
            return localVarFp.addNewPairToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a LDAP Correlation Attribute Pair
         * @param {LdapCorrelationAttributePairApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: LdapCorrelationAttributePairApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single LDAP Correlation Attribute Pair
         * @param {LdapCorrelationAttributePairApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: LdapCorrelationAttributePairApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<LdapCorrelationAttributePairResponse> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all LDAP Correlation Attribute Pair objects
         * @param {LdapCorrelationAttributePairApiListCorrelationAttributePairsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCorrelationAttributePairs(requestParameters: LdapCorrelationAttributePairApiListCorrelationAttributePairsRequest, options?: AxiosRequestConfig): AxiosPromise<LdapCorrelationAttributePairListResponse> {
            return localVarFp.listCorrelationAttributePairs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing LDAP Correlation Attribute Pair by name
         * @param {LdapCorrelationAttributePairApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: LdapCorrelationAttributePairApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<LdapCorrelationAttributePairResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewPairToConfig operation in LdapCorrelationAttributePairApi.
 * @export
 * @interface LdapCorrelationAttributePairApiAddNewPairToConfigRequest
 */
export type LdapCorrelationAttributePairApiAddNewPairToConfigRequest = {
    
    /**
    * Name of the Correlated LDAP Data View
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiAddNewPairToConfig
    */
    readonly correlatedLdapDataViewName: string
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiAddNewPairToConfig
    */
    readonly scimResourceTypeName: string
    
} & AddLdapCorrelationAttributePairRequest

/**
 * Request parameters for delete operation in LdapCorrelationAttributePairApi.
 * @export
 * @interface LdapCorrelationAttributePairApiDeleteRequest
 */
export type LdapCorrelationAttributePairApiDeleteRequest = {
    
    /**
    * Name of the LDAP Correlation Attribute Pair
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiDelete
    */
    readonly ldapCorrelationAttributePairName: string
    
    /**
    * Name of the Correlated LDAP Data View
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiDelete
    */
    readonly correlatedLdapDataViewName: string
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiDelete
    */
    readonly scimResourceTypeName: string
    
}

/**
 * Request parameters for getSingle operation in LdapCorrelationAttributePairApi.
 * @export
 * @interface LdapCorrelationAttributePairApiGetSingleRequest
 */
export type LdapCorrelationAttributePairApiGetSingleRequest = {
    
    /**
    * Name of the LDAP Correlation Attribute Pair
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiGetSingle
    */
    readonly ldapCorrelationAttributePairName: string
    
    /**
    * Name of the Correlated LDAP Data View
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiGetSingle
    */
    readonly correlatedLdapDataViewName: string
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiGetSingle
    */
    readonly scimResourceTypeName: string
    
}

/**
 * Request parameters for listCorrelationAttributePairs operation in LdapCorrelationAttributePairApi.
 * @export
 * @interface LdapCorrelationAttributePairApiListCorrelationAttributePairsRequest
 */
export type LdapCorrelationAttributePairApiListCorrelationAttributePairsRequest = {
    
    /**
    * Name of the Correlated LDAP Data View
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiListCorrelationAttributePairs
    */
    readonly correlatedLdapDataViewName: string
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiListCorrelationAttributePairs
    */
    readonly scimResourceTypeName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiListCorrelationAttributePairs
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in LdapCorrelationAttributePairApi.
 * @export
 * @interface LdapCorrelationAttributePairApiUpdateByNameRequest
 */
export type LdapCorrelationAttributePairApiUpdateByNameRequest = {
    
    /**
    * Name of the LDAP Correlation Attribute Pair
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiUpdateByName
    */
    readonly ldapCorrelationAttributePairName: string
    
    /**
    * Name of the Correlated LDAP Data View
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiUpdateByName
    */
    readonly correlatedLdapDataViewName: string
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof LdapCorrelationAttributePairApiUpdateByName
    */
    readonly scimResourceTypeName: string
    
} & UpdateRequest

/**
 * LdapCorrelationAttributePairApiGenerated - object-oriented interface
 * @export
 * @class LdapCorrelationAttributePairApiGenerated
 * @extends {BaseAPI}
 */
export class LdapCorrelationAttributePairApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new LDAP Correlation Attribute Pair to the config
     * @param {LdapCorrelationAttributePairApiAddNewPairToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LdapCorrelationAttributePairApiGenerated
     */
    public addNewPairToConfig(requestParameters: LdapCorrelationAttributePairApiAddNewPairToConfigRequest, options?: AxiosRequestConfig) {
        return LdapCorrelationAttributePairApiFp(this.configuration).addNewPairToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a LDAP Correlation Attribute Pair
     * @param {LdapCorrelationAttributePairApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LdapCorrelationAttributePairApiGenerated
     */
    public delete(requestParameters: LdapCorrelationAttributePairApiDeleteRequest, options?: AxiosRequestConfig) {
        return LdapCorrelationAttributePairApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single LDAP Correlation Attribute Pair
     * @param {LdapCorrelationAttributePairApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LdapCorrelationAttributePairApiGenerated
     */
    public getSingle(requestParameters: LdapCorrelationAttributePairApiGetSingleRequest, options?: AxiosRequestConfig) {
        return LdapCorrelationAttributePairApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all LDAP Correlation Attribute Pair objects
     * @param {LdapCorrelationAttributePairApiListCorrelationAttributePairsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LdapCorrelationAttributePairApiGenerated
     */
    public listCorrelationAttributePairs(requestParameters: LdapCorrelationAttributePairApiListCorrelationAttributePairsRequest, options?: AxiosRequestConfig) {
        return LdapCorrelationAttributePairApiFp(this.configuration).listCorrelationAttributePairs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing LDAP Correlation Attribute Pair by name
     * @param {LdapCorrelationAttributePairApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LdapCorrelationAttributePairApiGenerated
     */
    public updateByName(requestParameters: LdapCorrelationAttributePairApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return LdapCorrelationAttributePairApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
