/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddGaugeDataSource200Response } from '../models';
// @ts-ignore
import { AddGaugeDataSourceRequest } from '../models';
// @ts-ignore
import { EnumgaugeDataSourceDataOrientationProp } from '../models';
// @ts-ignore
import { EnumgaugeDataSourceStatisticTypeProp } from '../models';
// @ts-ignore
import { EnumnumericGaugeDataSourceSchemaUrn } from '../models';
// @ts-ignore
import { GaugeDataSourceListResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GaugeDataSourceApi - axios parameter creator
 * @export
 */
export const GaugeDataSourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Gauge Data Source to the config
         * @param {AddGaugeDataSourceRequest} addGaugeDataSourceRequest Create a new Gauge Data Source in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewDataSource: async (addGaugeDataSourceRequest: AddGaugeDataSourceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addGaugeDataSourceRequest' is not null or undefined
            assertParamExists('addNewDataSource', 'addGaugeDataSourceRequest', addGaugeDataSourceRequest)
            const localVarPath = `/gauge-data-sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addGaugeDataSourceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/gauge-data-sources',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addGaugeDataSourceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Gauge Data Source
         * @param {string} gaugeDataSourceName Name of the Gauge Data Source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataSource: async (gaugeDataSourceName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gaugeDataSourceName' is not null or undefined
            assertParamExists('deleteDataSource', 'gaugeDataSourceName', gaugeDataSourceName)
            const localVarPath = `/gauge-data-sources/{gauge-data-source-name}`
                .replace(`{${"gauge-data-source-name"}}`, encodeURIComponent(String(gaugeDataSourceName !== undefined ? gaugeDataSourceName : `-gauge-data-source-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/gauge-data-sources/{gauge-data-source-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Gauge Data Source
         * @param {string} gaugeDataSourceName Name of the Gauge Data Source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleGaugeDataSource: async (gaugeDataSourceName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gaugeDataSourceName' is not null or undefined
            assertParamExists('getSingleGaugeDataSource', 'gaugeDataSourceName', gaugeDataSourceName)
            const localVarPath = `/gauge-data-sources/{gauge-data-source-name}`
                .replace(`{${"gauge-data-source-name"}}`, encodeURIComponent(String(gaugeDataSourceName !== undefined ? gaugeDataSourceName : `-gauge-data-source-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/gauge-data-sources/{gauge-data-source-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Gauge Data Source objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllGaugeDataSources: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gauge-data-sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/gauge-data-sources',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Gauge Data Source by name
         * @param {string} gaugeDataSourceName Name of the Gauge Data Source
         * @param {UpdateRequest} updateRequest Update an existing Gauge Data Source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (gaugeDataSourceName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gaugeDataSourceName' is not null or undefined
            assertParamExists('updateByName', 'gaugeDataSourceName', gaugeDataSourceName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/gauge-data-sources/{gauge-data-source-name}`
                .replace(`{${"gauge-data-source-name"}}`, encodeURIComponent(String(gaugeDataSourceName !== undefined ? gaugeDataSourceName : `-gauge-data-source-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/gauge-data-sources/{gauge-data-source-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GaugeDataSourceApi - functional programming interface
 * @export
 */
export const GaugeDataSourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GaugeDataSourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Gauge Data Source to the config
         * @param {GaugeDataSourceApiAddNewDataSourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewDataSource(requestParameters: GaugeDataSourceApiAddNewDataSourceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddGaugeDataSource200Response>> {
            const addGaugeDataSourceRequest: AddGaugeDataSourceRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewDataSource(addGaugeDataSourceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Gauge Data Source
         * @param {GaugeDataSourceApiDeleteDataSourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDataSource(requestParameters: GaugeDataSourceApiDeleteDataSourceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDataSource(requestParameters.gaugeDataSourceName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Gauge Data Source
         * @param {GaugeDataSourceApiGetSingleGaugeDataSourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleGaugeDataSource(requestParameters: GaugeDataSourceApiGetSingleGaugeDataSourceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddGaugeDataSource200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleGaugeDataSource(requestParameters.gaugeDataSourceName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Gauge Data Source objects
         * @param {GaugeDataSourceApiListAllGaugeDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllGaugeDataSources(requestParameters: GaugeDataSourceApiListAllGaugeDataSourcesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GaugeDataSourceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllGaugeDataSources(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Gauge Data Source by name
         * @param {GaugeDataSourceApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: GaugeDataSourceApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddGaugeDataSource200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.gaugeDataSourceName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GaugeDataSourceApi - factory interface
 * @export
 */
export const GaugeDataSourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GaugeDataSourceApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Gauge Data Source to the config
         * @param {GaugeDataSourceApiAddNewDataSourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewDataSource(requestParameters: GaugeDataSourceApiAddNewDataSourceRequest, options?: AxiosRequestConfig): AxiosPromise<AddGaugeDataSource200Response> {
            return localVarFp.addNewDataSource(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Gauge Data Source
         * @param {GaugeDataSourceApiDeleteDataSourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataSource(requestParameters: GaugeDataSourceApiDeleteDataSourceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDataSource(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Gauge Data Source
         * @param {GaugeDataSourceApiGetSingleGaugeDataSourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleGaugeDataSource(requestParameters: GaugeDataSourceApiGetSingleGaugeDataSourceRequest, options?: AxiosRequestConfig): AxiosPromise<AddGaugeDataSource200Response> {
            return localVarFp.getSingleGaugeDataSource(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Gauge Data Source objects
         * @param {GaugeDataSourceApiListAllGaugeDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllGaugeDataSources(requestParameters: GaugeDataSourceApiListAllGaugeDataSourcesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GaugeDataSourceListResponse> {
            return localVarFp.listAllGaugeDataSources(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Gauge Data Source by name
         * @param {GaugeDataSourceApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: GaugeDataSourceApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddGaugeDataSource200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewDataSource operation in GaugeDataSourceApi.
 * @export
 * @interface GaugeDataSourceApiAddNewDataSourceRequest
 */
export type GaugeDataSourceApiAddNewDataSourceRequest = {
    
} & AddGaugeDataSourceRequest

/**
 * Request parameters for deleteDataSource operation in GaugeDataSourceApi.
 * @export
 * @interface GaugeDataSourceApiDeleteDataSourceRequest
 */
export type GaugeDataSourceApiDeleteDataSourceRequest = {
    
    /**
    * Name of the Gauge Data Source
    * @type {string}
    * @memberof GaugeDataSourceApiDeleteDataSource
    */
    readonly gaugeDataSourceName: string
    
}

/**
 * Request parameters for getSingleGaugeDataSource operation in GaugeDataSourceApi.
 * @export
 * @interface GaugeDataSourceApiGetSingleGaugeDataSourceRequest
 */
export type GaugeDataSourceApiGetSingleGaugeDataSourceRequest = {
    
    /**
    * Name of the Gauge Data Source
    * @type {string}
    * @memberof GaugeDataSourceApiGetSingleGaugeDataSource
    */
    readonly gaugeDataSourceName: string
    
}

/**
 * Request parameters for listAllGaugeDataSources operation in GaugeDataSourceApi.
 * @export
 * @interface GaugeDataSourceApiListAllGaugeDataSourcesRequest
 */
export type GaugeDataSourceApiListAllGaugeDataSourcesRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof GaugeDataSourceApiListAllGaugeDataSources
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in GaugeDataSourceApi.
 * @export
 * @interface GaugeDataSourceApiUpdateByNameRequest
 */
export type GaugeDataSourceApiUpdateByNameRequest = {
    
    /**
    * Name of the Gauge Data Source
    * @type {string}
    * @memberof GaugeDataSourceApiUpdateByName
    */
    readonly gaugeDataSourceName: string
    
} & UpdateRequest

/**
 * GaugeDataSourceApiGenerated - object-oriented interface
 * @export
 * @class GaugeDataSourceApiGenerated
 * @extends {BaseAPI}
 */
export class GaugeDataSourceApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Gauge Data Source to the config
     * @param {GaugeDataSourceApiAddNewDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GaugeDataSourceApiGenerated
     */
    public addNewDataSource(requestParameters: GaugeDataSourceApiAddNewDataSourceRequest, options?: AxiosRequestConfig) {
        return GaugeDataSourceApiFp(this.configuration).addNewDataSource(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Gauge Data Source
     * @param {GaugeDataSourceApiDeleteDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GaugeDataSourceApiGenerated
     */
    public deleteDataSource(requestParameters: GaugeDataSourceApiDeleteDataSourceRequest, options?: AxiosRequestConfig) {
        return GaugeDataSourceApiFp(this.configuration).deleteDataSource(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Gauge Data Source
     * @param {GaugeDataSourceApiGetSingleGaugeDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GaugeDataSourceApiGenerated
     */
    public getSingleGaugeDataSource(requestParameters: GaugeDataSourceApiGetSingleGaugeDataSourceRequest, options?: AxiosRequestConfig) {
        return GaugeDataSourceApiFp(this.configuration).getSingleGaugeDataSource(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Gauge Data Source objects
     * @param {GaugeDataSourceApiListAllGaugeDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GaugeDataSourceApiGenerated
     */
    public listAllGaugeDataSources(requestParameters: GaugeDataSourceApiListAllGaugeDataSourcesRequest = {}, options?: AxiosRequestConfig) {
        return GaugeDataSourceApiFp(this.configuration).listAllGaugeDataSources(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Gauge Data Source by name
     * @param {GaugeDataSourceApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GaugeDataSourceApiGenerated
     */
    public updateByName(requestParameters: GaugeDataSourceApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return GaugeDataSourceApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
