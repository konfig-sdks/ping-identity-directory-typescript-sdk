/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddTokenClaimValidation200Response } from '../models';
// @ts-ignore
import { AddTokenClaimValidationRequest } from '../models';
// @ts-ignore
import { EnumstringTokenClaimValidationSchemaUrn } from '../models';
// @ts-ignore
import { EnumtokenClaimValidationRequiredValueProp } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { TokenClaimValidationListResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TokenClaimValidationApi - axios parameter creator
 * @export
 */
export const TokenClaimValidationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Token Claim Validation to the config
         * @param {string} idTokenValidatorName Name of the ID Token Validator
         * @param {AddTokenClaimValidationRequest} addTokenClaimValidationRequest Create a new Token Claim Validation in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewClaimValidation: async (idTokenValidatorName: string, addTokenClaimValidationRequest: AddTokenClaimValidationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idTokenValidatorName' is not null or undefined
            assertParamExists('addNewClaimValidation', 'idTokenValidatorName', idTokenValidatorName)
            // verify required parameter 'addTokenClaimValidationRequest' is not null or undefined
            assertParamExists('addNewClaimValidation', 'addTokenClaimValidationRequest', addTokenClaimValidationRequest)
            const localVarPath = `/id-token-validators/{id-token-validator-name}/token-claim-validations`
                .replace(`{${"id-token-validator-name"}}`, encodeURIComponent(String(idTokenValidatorName !== undefined ? idTokenValidatorName : `-id-token-validator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addTokenClaimValidationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/id-token-validators/{id-token-validator-name}/token-claim-validations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addTokenClaimValidationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Token Claim Validation
         * @param {string} tokenClaimValidationName Name of the Token Claim Validation
         * @param {string} idTokenValidatorName Name of the ID Token Validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClaimValidation: async (tokenClaimValidationName: string, idTokenValidatorName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenClaimValidationName' is not null or undefined
            assertParamExists('deleteClaimValidation', 'tokenClaimValidationName', tokenClaimValidationName)
            // verify required parameter 'idTokenValidatorName' is not null or undefined
            assertParamExists('deleteClaimValidation', 'idTokenValidatorName', idTokenValidatorName)
            const localVarPath = `/id-token-validators/{id-token-validator-name}/token-claim-validations/{token-claim-validation-name}`
                .replace(`{${"token-claim-validation-name"}}`, encodeURIComponent(String(tokenClaimValidationName !== undefined ? tokenClaimValidationName : `-token-claim-validation-name-`)))
                .replace(`{${"id-token-validator-name"}}`, encodeURIComponent(String(idTokenValidatorName !== undefined ? idTokenValidatorName : `-id-token-validator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/id-token-validators/{id-token-validator-name}/token-claim-validations/{token-claim-validation-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Token Claim Validation
         * @param {string} tokenClaimValidationName Name of the Token Claim Validation
         * @param {string} idTokenValidatorName Name of the ID Token Validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleClaimValidation: async (tokenClaimValidationName: string, idTokenValidatorName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenClaimValidationName' is not null or undefined
            assertParamExists('getSingleClaimValidation', 'tokenClaimValidationName', tokenClaimValidationName)
            // verify required parameter 'idTokenValidatorName' is not null or undefined
            assertParamExists('getSingleClaimValidation', 'idTokenValidatorName', idTokenValidatorName)
            const localVarPath = `/id-token-validators/{id-token-validator-name}/token-claim-validations/{token-claim-validation-name}`
                .replace(`{${"token-claim-validation-name"}}`, encodeURIComponent(String(tokenClaimValidationName !== undefined ? tokenClaimValidationName : `-token-claim-validation-name-`)))
                .replace(`{${"id-token-validator-name"}}`, encodeURIComponent(String(idTokenValidatorName !== undefined ? idTokenValidatorName : `-id-token-validator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/id-token-validators/{id-token-validator-name}/token-claim-validations/{token-claim-validation-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Token Claim Validation objects
         * @param {string} idTokenValidatorName Name of the ID Token Validator
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTokenClaimValidations: async (idTokenValidatorName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idTokenValidatorName' is not null or undefined
            assertParamExists('listTokenClaimValidations', 'idTokenValidatorName', idTokenValidatorName)
            const localVarPath = `/id-token-validators/{id-token-validator-name}/token-claim-validations`
                .replace(`{${"id-token-validator-name"}}`, encodeURIComponent(String(idTokenValidatorName !== undefined ? idTokenValidatorName : `-id-token-validator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/id-token-validators/{id-token-validator-name}/token-claim-validations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Token Claim Validation by name
         * @param {string} tokenClaimValidationName Name of the Token Claim Validation
         * @param {string} idTokenValidatorName Name of the ID Token Validator
         * @param {UpdateRequest} updateRequest Update an existing Token Claim Validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClaimValidationByName: async (tokenClaimValidationName: string, idTokenValidatorName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenClaimValidationName' is not null or undefined
            assertParamExists('updateClaimValidationByName', 'tokenClaimValidationName', tokenClaimValidationName)
            // verify required parameter 'idTokenValidatorName' is not null or undefined
            assertParamExists('updateClaimValidationByName', 'idTokenValidatorName', idTokenValidatorName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateClaimValidationByName', 'updateRequest', updateRequest)
            const localVarPath = `/id-token-validators/{id-token-validator-name}/token-claim-validations/{token-claim-validation-name}`
                .replace(`{${"token-claim-validation-name"}}`, encodeURIComponent(String(tokenClaimValidationName !== undefined ? tokenClaimValidationName : `-token-claim-validation-name-`)))
                .replace(`{${"id-token-validator-name"}}`, encodeURIComponent(String(idTokenValidatorName !== undefined ? idTokenValidatorName : `-id-token-validator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/id-token-validators/{id-token-validator-name}/token-claim-validations/{token-claim-validation-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenClaimValidationApi - functional programming interface
 * @export
 */
export const TokenClaimValidationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenClaimValidationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Token Claim Validation to the config
         * @param {TokenClaimValidationApiAddNewClaimValidationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewClaimValidation(requestParameters: TokenClaimValidationApiAddNewClaimValidationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddTokenClaimValidation200Response>> {
            const addTokenClaimValidationRequest: AddTokenClaimValidationRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewClaimValidation(requestParameters.idTokenValidatorName, addTokenClaimValidationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Token Claim Validation
         * @param {TokenClaimValidationApiDeleteClaimValidationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClaimValidation(requestParameters: TokenClaimValidationApiDeleteClaimValidationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClaimValidation(requestParameters.tokenClaimValidationName, requestParameters.idTokenValidatorName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Token Claim Validation
         * @param {TokenClaimValidationApiGetSingleClaimValidationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleClaimValidation(requestParameters: TokenClaimValidationApiGetSingleClaimValidationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddTokenClaimValidation200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleClaimValidation(requestParameters.tokenClaimValidationName, requestParameters.idTokenValidatorName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Token Claim Validation objects
         * @param {TokenClaimValidationApiListTokenClaimValidationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTokenClaimValidations(requestParameters: TokenClaimValidationApiListTokenClaimValidationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenClaimValidationListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTokenClaimValidations(requestParameters.idTokenValidatorName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Token Claim Validation by name
         * @param {TokenClaimValidationApiUpdateClaimValidationByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClaimValidationByName(requestParameters: TokenClaimValidationApiUpdateClaimValidationByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddTokenClaimValidation200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClaimValidationByName(requestParameters.tokenClaimValidationName, requestParameters.idTokenValidatorName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TokenClaimValidationApi - factory interface
 * @export
 */
export const TokenClaimValidationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenClaimValidationApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Token Claim Validation to the config
         * @param {TokenClaimValidationApiAddNewClaimValidationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewClaimValidation(requestParameters: TokenClaimValidationApiAddNewClaimValidationRequest, options?: AxiosRequestConfig): AxiosPromise<AddTokenClaimValidation200Response> {
            return localVarFp.addNewClaimValidation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Token Claim Validation
         * @param {TokenClaimValidationApiDeleteClaimValidationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClaimValidation(requestParameters: TokenClaimValidationApiDeleteClaimValidationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteClaimValidation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Token Claim Validation
         * @param {TokenClaimValidationApiGetSingleClaimValidationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleClaimValidation(requestParameters: TokenClaimValidationApiGetSingleClaimValidationRequest, options?: AxiosRequestConfig): AxiosPromise<AddTokenClaimValidation200Response> {
            return localVarFp.getSingleClaimValidation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Token Claim Validation objects
         * @param {TokenClaimValidationApiListTokenClaimValidationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTokenClaimValidations(requestParameters: TokenClaimValidationApiListTokenClaimValidationsRequest, options?: AxiosRequestConfig): AxiosPromise<TokenClaimValidationListResponse> {
            return localVarFp.listTokenClaimValidations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Token Claim Validation by name
         * @param {TokenClaimValidationApiUpdateClaimValidationByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClaimValidationByName(requestParameters: TokenClaimValidationApiUpdateClaimValidationByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddTokenClaimValidation200Response> {
            return localVarFp.updateClaimValidationByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewClaimValidation operation in TokenClaimValidationApi.
 * @export
 * @interface TokenClaimValidationApiAddNewClaimValidationRequest
 */
export type TokenClaimValidationApiAddNewClaimValidationRequest = {
    
    /**
    * Name of the ID Token Validator
    * @type {string}
    * @memberof TokenClaimValidationApiAddNewClaimValidation
    */
    readonly idTokenValidatorName: string
    
} & AddTokenClaimValidationRequest

/**
 * Request parameters for deleteClaimValidation operation in TokenClaimValidationApi.
 * @export
 * @interface TokenClaimValidationApiDeleteClaimValidationRequest
 */
export type TokenClaimValidationApiDeleteClaimValidationRequest = {
    
    /**
    * Name of the Token Claim Validation
    * @type {string}
    * @memberof TokenClaimValidationApiDeleteClaimValidation
    */
    readonly tokenClaimValidationName: string
    
    /**
    * Name of the ID Token Validator
    * @type {string}
    * @memberof TokenClaimValidationApiDeleteClaimValidation
    */
    readonly idTokenValidatorName: string
    
}

/**
 * Request parameters for getSingleClaimValidation operation in TokenClaimValidationApi.
 * @export
 * @interface TokenClaimValidationApiGetSingleClaimValidationRequest
 */
export type TokenClaimValidationApiGetSingleClaimValidationRequest = {
    
    /**
    * Name of the Token Claim Validation
    * @type {string}
    * @memberof TokenClaimValidationApiGetSingleClaimValidation
    */
    readonly tokenClaimValidationName: string
    
    /**
    * Name of the ID Token Validator
    * @type {string}
    * @memberof TokenClaimValidationApiGetSingleClaimValidation
    */
    readonly idTokenValidatorName: string
    
}

/**
 * Request parameters for listTokenClaimValidations operation in TokenClaimValidationApi.
 * @export
 * @interface TokenClaimValidationApiListTokenClaimValidationsRequest
 */
export type TokenClaimValidationApiListTokenClaimValidationsRequest = {
    
    /**
    * Name of the ID Token Validator
    * @type {string}
    * @memberof TokenClaimValidationApiListTokenClaimValidations
    */
    readonly idTokenValidatorName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof TokenClaimValidationApiListTokenClaimValidations
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateClaimValidationByName operation in TokenClaimValidationApi.
 * @export
 * @interface TokenClaimValidationApiUpdateClaimValidationByNameRequest
 */
export type TokenClaimValidationApiUpdateClaimValidationByNameRequest = {
    
    /**
    * Name of the Token Claim Validation
    * @type {string}
    * @memberof TokenClaimValidationApiUpdateClaimValidationByName
    */
    readonly tokenClaimValidationName: string
    
    /**
    * Name of the ID Token Validator
    * @type {string}
    * @memberof TokenClaimValidationApiUpdateClaimValidationByName
    */
    readonly idTokenValidatorName: string
    
} & UpdateRequest

/**
 * TokenClaimValidationApiGenerated - object-oriented interface
 * @export
 * @class TokenClaimValidationApiGenerated
 * @extends {BaseAPI}
 */
export class TokenClaimValidationApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Token Claim Validation to the config
     * @param {TokenClaimValidationApiAddNewClaimValidationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenClaimValidationApiGenerated
     */
    public addNewClaimValidation(requestParameters: TokenClaimValidationApiAddNewClaimValidationRequest, options?: AxiosRequestConfig) {
        return TokenClaimValidationApiFp(this.configuration).addNewClaimValidation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Token Claim Validation
     * @param {TokenClaimValidationApiDeleteClaimValidationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenClaimValidationApiGenerated
     */
    public deleteClaimValidation(requestParameters: TokenClaimValidationApiDeleteClaimValidationRequest, options?: AxiosRequestConfig) {
        return TokenClaimValidationApiFp(this.configuration).deleteClaimValidation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Token Claim Validation
     * @param {TokenClaimValidationApiGetSingleClaimValidationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenClaimValidationApiGenerated
     */
    public getSingleClaimValidation(requestParameters: TokenClaimValidationApiGetSingleClaimValidationRequest, options?: AxiosRequestConfig) {
        return TokenClaimValidationApiFp(this.configuration).getSingleClaimValidation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Token Claim Validation objects
     * @param {TokenClaimValidationApiListTokenClaimValidationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenClaimValidationApiGenerated
     */
    public listTokenClaimValidations(requestParameters: TokenClaimValidationApiListTokenClaimValidationsRequest, options?: AxiosRequestConfig) {
        return TokenClaimValidationApiFp(this.configuration).listTokenClaimValidations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Token Claim Validation by name
     * @param {TokenClaimValidationApiUpdateClaimValidationByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenClaimValidationApiGenerated
     */
    public updateClaimValidationByName(requestParameters: TokenClaimValidationApiUpdateClaimValidationByNameRequest, options?: AxiosRequestConfig) {
        return TokenClaimValidationApiFp(this.configuration).updateClaimValidationByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
