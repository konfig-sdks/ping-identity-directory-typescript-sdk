/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddFifoEntryCacheRequest } from '../models';
// @ts-ignore
import { EntryCacheListResponse } from '../models';
// @ts-ignore
import { EnumfifoEntryCacheSchemaUrn } from '../models';
// @ts-ignore
import { FifoEntryCacheResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EntryCacheApi - axios parameter creator
 * @export
 */
export const EntryCacheApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Entry Cache to the config
         * @param {AddFifoEntryCacheRequest} addFifoEntryCacheRequest Create a new Entry Cache in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCache: async (addFifoEntryCacheRequest: AddFifoEntryCacheRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addFifoEntryCacheRequest' is not null or undefined
            assertParamExists('addNewCache', 'addFifoEntryCacheRequest', addFifoEntryCacheRequest)
            const localVarPath = `/entry-caches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addFifoEntryCacheRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/entry-caches',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addFifoEntryCacheRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Entry Cache
         * @param {string} entryCacheName Name of the Entry Cache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntryCache: async (entryCacheName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryCacheName' is not null or undefined
            assertParamExists('deleteEntryCache', 'entryCacheName', entryCacheName)
            const localVarPath = `/entry-caches/{entry-cache-name}`
                .replace(`{${"entry-cache-name"}}`, encodeURIComponent(String(entryCacheName !== undefined ? entryCacheName : `-entry-cache-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/entry-caches/{entry-cache-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Entry Cache objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/entry-caches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/entry-caches',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Entry Cache
         * @param {string} entryCacheName Name of the Entry Cache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCache: async (entryCacheName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryCacheName' is not null or undefined
            assertParamExists('getSingleCache', 'entryCacheName', entryCacheName)
            const localVarPath = `/entry-caches/{entry-cache-name}`
                .replace(`{${"entry-cache-name"}}`, encodeURIComponent(String(entryCacheName !== undefined ? entryCacheName : `-entry-cache-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/entry-caches/{entry-cache-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Entry Cache by name
         * @param {string} entryCacheName Name of the Entry Cache
         * @param {UpdateRequest} updateRequest Update an existing Entry Cache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (entryCacheName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryCacheName' is not null or undefined
            assertParamExists('updateByName', 'entryCacheName', entryCacheName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/entry-caches/{entry-cache-name}`
                .replace(`{${"entry-cache-name"}}`, encodeURIComponent(String(entryCacheName !== undefined ? entryCacheName : `-entry-cache-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/entry-caches/{entry-cache-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntryCacheApi - functional programming interface
 * @export
 */
export const EntryCacheApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntryCacheApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Entry Cache to the config
         * @param {EntryCacheApiAddNewCacheRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewCache(requestParameters: EntryCacheApiAddNewCacheRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FifoEntryCacheResponse>> {
            const addFifoEntryCacheRequest: AddFifoEntryCacheRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewCache(addFifoEntryCacheRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Entry Cache
         * @param {EntryCacheApiDeleteEntryCacheRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntryCache(requestParameters: EntryCacheApiDeleteEntryCacheRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntryCache(requestParameters.entryCacheName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Entry Cache objects
         * @param {EntryCacheApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllObjects(requestParameters: EntryCacheApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryCacheListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Entry Cache
         * @param {EntryCacheApiGetSingleCacheRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleCache(requestParameters: EntryCacheApiGetSingleCacheRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FifoEntryCacheResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleCache(requestParameters.entryCacheName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Entry Cache by name
         * @param {EntryCacheApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: EntryCacheApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FifoEntryCacheResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.entryCacheName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EntryCacheApi - factory interface
 * @export
 */
export const EntryCacheApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntryCacheApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Entry Cache to the config
         * @param {EntryCacheApiAddNewCacheRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCache(requestParameters: EntryCacheApiAddNewCacheRequest, options?: AxiosRequestConfig): AxiosPromise<FifoEntryCacheResponse> {
            return localVarFp.addNewCache(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Entry Cache
         * @param {EntryCacheApiDeleteEntryCacheRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntryCache(requestParameters: EntryCacheApiDeleteEntryCacheRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEntryCache(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Entry Cache objects
         * @param {EntryCacheApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects(requestParameters: EntryCacheApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<EntryCacheListResponse> {
            return localVarFp.getAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Entry Cache
         * @param {EntryCacheApiGetSingleCacheRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCache(requestParameters: EntryCacheApiGetSingleCacheRequest, options?: AxiosRequestConfig): AxiosPromise<FifoEntryCacheResponse> {
            return localVarFp.getSingleCache(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Entry Cache by name
         * @param {EntryCacheApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: EntryCacheApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<FifoEntryCacheResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewCache operation in EntryCacheApi.
 * @export
 * @interface EntryCacheApiAddNewCacheRequest
 */
export type EntryCacheApiAddNewCacheRequest = {
    
} & AddFifoEntryCacheRequest

/**
 * Request parameters for deleteEntryCache operation in EntryCacheApi.
 * @export
 * @interface EntryCacheApiDeleteEntryCacheRequest
 */
export type EntryCacheApiDeleteEntryCacheRequest = {
    
    /**
    * Name of the Entry Cache
    * @type {string}
    * @memberof EntryCacheApiDeleteEntryCache
    */
    readonly entryCacheName: string
    
}

/**
 * Request parameters for getAllObjects operation in EntryCacheApi.
 * @export
 * @interface EntryCacheApiGetAllObjectsRequest
 */
export type EntryCacheApiGetAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof EntryCacheApiGetAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingleCache operation in EntryCacheApi.
 * @export
 * @interface EntryCacheApiGetSingleCacheRequest
 */
export type EntryCacheApiGetSingleCacheRequest = {
    
    /**
    * Name of the Entry Cache
    * @type {string}
    * @memberof EntryCacheApiGetSingleCache
    */
    readonly entryCacheName: string
    
}

/**
 * Request parameters for updateByName operation in EntryCacheApi.
 * @export
 * @interface EntryCacheApiUpdateByNameRequest
 */
export type EntryCacheApiUpdateByNameRequest = {
    
    /**
    * Name of the Entry Cache
    * @type {string}
    * @memberof EntryCacheApiUpdateByName
    */
    readonly entryCacheName: string
    
} & UpdateRequest

/**
 * EntryCacheApiGenerated - object-oriented interface
 * @export
 * @class EntryCacheApiGenerated
 * @extends {BaseAPI}
 */
export class EntryCacheApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Entry Cache to the config
     * @param {EntryCacheApiAddNewCacheRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryCacheApiGenerated
     */
    public addNewCache(requestParameters: EntryCacheApiAddNewCacheRequest, options?: AxiosRequestConfig) {
        return EntryCacheApiFp(this.configuration).addNewCache(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Entry Cache
     * @param {EntryCacheApiDeleteEntryCacheRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryCacheApiGenerated
     */
    public deleteEntryCache(requestParameters: EntryCacheApiDeleteEntryCacheRequest, options?: AxiosRequestConfig) {
        return EntryCacheApiFp(this.configuration).deleteEntryCache(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Entry Cache objects
     * @param {EntryCacheApiGetAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryCacheApiGenerated
     */
    public getAllObjects(requestParameters: EntryCacheApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return EntryCacheApiFp(this.configuration).getAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Entry Cache
     * @param {EntryCacheApiGetSingleCacheRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryCacheApiGenerated
     */
    public getSingleCache(requestParameters: EntryCacheApiGetSingleCacheRequest, options?: AxiosRequestConfig) {
        return EntryCacheApiFp(this.configuration).getSingleCache(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Entry Cache by name
     * @param {EntryCacheApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryCacheApiGenerated
     */
    public updateByName(requestParameters: EntryCacheApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return EntryCacheApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
