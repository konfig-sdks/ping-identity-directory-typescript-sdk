/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddHttpServletExtension200Response } from '../models';
// @ts-ignore
import { AddHttpServletExtensionRequest } from '../models';
// @ts-ignore
import { EnumhttpServletExtensionAllowedAuthenticationTypeProp } from '../models';
// @ts-ignore
import { EnumhttpServletExtensionDebugLevelProp } from '../models';
// @ts-ignore
import { EnumhttpServletExtensionDebugTypeProp } from '../models';
// @ts-ignore
import { EnumthirdPartyHttpServletExtensionSchemaUrn } from '../models';
// @ts-ignore
import { GetHttpServletExtension200Response } from '../models';
// @ts-ignore
import { HttpServletExtensionListResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * HttpServletExtensionApi - axios parameter creator
 * @export
 */
export const HttpServletExtensionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new HTTP Servlet Extension to the config
         * @param {AddHttpServletExtensionRequest} addHttpServletExtensionRequest Create a new HTTP Servlet Extension in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewExtension: async (addHttpServletExtensionRequest: AddHttpServletExtensionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addHttpServletExtensionRequest' is not null or undefined
            assertParamExists('addNewExtension', 'addHttpServletExtensionRequest', addHttpServletExtensionRequest)
            const localVarPath = `/http-servlet-extensions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addHttpServletExtensionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addHttpServletExtensionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a HTTP Servlet Extension
         * @param {string} httpServletExtensionName Name of the HTTP Servlet Extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHttpServletExtension: async (httpServletExtensionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'httpServletExtensionName' is not null or undefined
            assertParamExists('deleteHttpServletExtension', 'httpServletExtensionName', httpServletExtensionName)
            const localVarPath = `/http-servlet-extensions/{http-servlet-extension-name}`
                .replace(`{${"http-servlet-extension-name"}}`, encodeURIComponent(String(httpServletExtensionName !== undefined ? httpServletExtensionName : `-http-servlet-extension-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions/{http-servlet-extension-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single HTTP Servlet Extension
         * @param {string} httpServletExtensionName Name of the HTTP Servlet Extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleExtension: async (httpServletExtensionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'httpServletExtensionName' is not null or undefined
            assertParamExists('getSingleExtension', 'httpServletExtensionName', httpServletExtensionName)
            const localVarPath = `/http-servlet-extensions/{http-servlet-extension-name}`
                .replace(`{${"http-servlet-extension-name"}}`, encodeURIComponent(String(httpServletExtensionName !== undefined ? httpServletExtensionName : `-http-servlet-extension-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions/{http-servlet-extension-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all HTTP Servlet Extension objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllExtensions: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/http-servlet-extensions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing HTTP Servlet Extension by name
         * @param {string} httpServletExtensionName Name of the HTTP Servlet Extension
         * @param {UpdateRequest} updateRequest Update an existing HTTP Servlet Extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (httpServletExtensionName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'httpServletExtensionName' is not null or undefined
            assertParamExists('updateByName', 'httpServletExtensionName', httpServletExtensionName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/http-servlet-extensions/{http-servlet-extension-name}`
                .replace(`{${"http-servlet-extension-name"}}`, encodeURIComponent(String(httpServletExtensionName !== undefined ? httpServletExtensionName : `-http-servlet-extension-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions/{http-servlet-extension-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HttpServletExtensionApi - functional programming interface
 * @export
 */
export const HttpServletExtensionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HttpServletExtensionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new HTTP Servlet Extension to the config
         * @param {HttpServletExtensionApiAddNewExtensionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewExtension(requestParameters: HttpServletExtensionApiAddNewExtensionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddHttpServletExtension200Response>> {
            const addHttpServletExtensionRequest: AddHttpServletExtensionRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewExtension(addHttpServletExtensionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a HTTP Servlet Extension
         * @param {HttpServletExtensionApiDeleteHttpServletExtensionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHttpServletExtension(requestParameters: HttpServletExtensionApiDeleteHttpServletExtensionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHttpServletExtension(requestParameters.httpServletExtensionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single HTTP Servlet Extension
         * @param {HttpServletExtensionApiGetSingleExtensionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleExtension(requestParameters: HttpServletExtensionApiGetSingleExtensionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHttpServletExtension200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleExtension(requestParameters.httpServletExtensionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all HTTP Servlet Extension objects
         * @param {HttpServletExtensionApiListAllExtensionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllExtensions(requestParameters: HttpServletExtensionApiListAllExtensionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HttpServletExtensionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllExtensions(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing HTTP Servlet Extension by name
         * @param {HttpServletExtensionApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: HttpServletExtensionApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHttpServletExtension200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.httpServletExtensionName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HttpServletExtensionApi - factory interface
 * @export
 */
export const HttpServletExtensionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HttpServletExtensionApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new HTTP Servlet Extension to the config
         * @param {HttpServletExtensionApiAddNewExtensionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewExtension(requestParameters: HttpServletExtensionApiAddNewExtensionRequest, options?: AxiosRequestConfig): AxiosPromise<AddHttpServletExtension200Response> {
            return localVarFp.addNewExtension(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a HTTP Servlet Extension
         * @param {HttpServletExtensionApiDeleteHttpServletExtensionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHttpServletExtension(requestParameters: HttpServletExtensionApiDeleteHttpServletExtensionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteHttpServletExtension(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single HTTP Servlet Extension
         * @param {HttpServletExtensionApiGetSingleExtensionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleExtension(requestParameters: HttpServletExtensionApiGetSingleExtensionRequest, options?: AxiosRequestConfig): AxiosPromise<GetHttpServletExtension200Response> {
            return localVarFp.getSingleExtension(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all HTTP Servlet Extension objects
         * @param {HttpServletExtensionApiListAllExtensionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllExtensions(requestParameters: HttpServletExtensionApiListAllExtensionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<HttpServletExtensionListResponse> {
            return localVarFp.listAllExtensions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing HTTP Servlet Extension by name
         * @param {HttpServletExtensionApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: HttpServletExtensionApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<GetHttpServletExtension200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewExtension operation in HttpServletExtensionApi.
 * @export
 * @interface HttpServletExtensionApiAddNewExtensionRequest
 */
export type HttpServletExtensionApiAddNewExtensionRequest = {
    
} & AddHttpServletExtensionRequest

/**
 * Request parameters for deleteHttpServletExtension operation in HttpServletExtensionApi.
 * @export
 * @interface HttpServletExtensionApiDeleteHttpServletExtensionRequest
 */
export type HttpServletExtensionApiDeleteHttpServletExtensionRequest = {
    
    /**
    * Name of the HTTP Servlet Extension
    * @type {string}
    * @memberof HttpServletExtensionApiDeleteHttpServletExtension
    */
    readonly httpServletExtensionName: string
    
}

/**
 * Request parameters for getSingleExtension operation in HttpServletExtensionApi.
 * @export
 * @interface HttpServletExtensionApiGetSingleExtensionRequest
 */
export type HttpServletExtensionApiGetSingleExtensionRequest = {
    
    /**
    * Name of the HTTP Servlet Extension
    * @type {string}
    * @memberof HttpServletExtensionApiGetSingleExtension
    */
    readonly httpServletExtensionName: string
    
}

/**
 * Request parameters for listAllExtensions operation in HttpServletExtensionApi.
 * @export
 * @interface HttpServletExtensionApiListAllExtensionsRequest
 */
export type HttpServletExtensionApiListAllExtensionsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof HttpServletExtensionApiListAllExtensions
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in HttpServletExtensionApi.
 * @export
 * @interface HttpServletExtensionApiUpdateByNameRequest
 */
export type HttpServletExtensionApiUpdateByNameRequest = {
    
    /**
    * Name of the HTTP Servlet Extension
    * @type {string}
    * @memberof HttpServletExtensionApiUpdateByName
    */
    readonly httpServletExtensionName: string
    
} & UpdateRequest

/**
 * HttpServletExtensionApiGenerated - object-oriented interface
 * @export
 * @class HttpServletExtensionApiGenerated
 * @extends {BaseAPI}
 */
export class HttpServletExtensionApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new HTTP Servlet Extension to the config
     * @param {HttpServletExtensionApiAddNewExtensionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpServletExtensionApiGenerated
     */
    public addNewExtension(requestParameters: HttpServletExtensionApiAddNewExtensionRequest, options?: AxiosRequestConfig) {
        return HttpServletExtensionApiFp(this.configuration).addNewExtension(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a HTTP Servlet Extension
     * @param {HttpServletExtensionApiDeleteHttpServletExtensionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpServletExtensionApiGenerated
     */
    public deleteHttpServletExtension(requestParameters: HttpServletExtensionApiDeleteHttpServletExtensionRequest, options?: AxiosRequestConfig) {
        return HttpServletExtensionApiFp(this.configuration).deleteHttpServletExtension(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single HTTP Servlet Extension
     * @param {HttpServletExtensionApiGetSingleExtensionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpServletExtensionApiGenerated
     */
    public getSingleExtension(requestParameters: HttpServletExtensionApiGetSingleExtensionRequest, options?: AxiosRequestConfig) {
        return HttpServletExtensionApiFp(this.configuration).getSingleExtension(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all HTTP Servlet Extension objects
     * @param {HttpServletExtensionApiListAllExtensionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpServletExtensionApiGenerated
     */
    public listAllExtensions(requestParameters: HttpServletExtensionApiListAllExtensionsRequest = {}, options?: AxiosRequestConfig) {
        return HttpServletExtensionApiFp(this.configuration).listAllExtensions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing HTTP Servlet Extension by name
     * @param {HttpServletExtensionApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpServletExtensionApiGenerated
     */
    public updateByName(requestParameters: HttpServletExtensionApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return HttpServletExtensionApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
