/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDelegatedAdminCorrelatedRestResourceRequest } from '../models';
// @ts-ignore
import { DelegatedAdminCorrelatedRestResourceListResponse } from '../models';
// @ts-ignore
import { DelegatedAdminCorrelatedRestResourceResponse } from '../models';
// @ts-ignore
import { EnumdelegatedAdminCorrelatedRestResourceSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DelegatedAdminCorrelatedRestResourceApi - axios parameter creator
 * @export
 */
export const DelegatedAdminCorrelatedRestResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Delegated Admin Correlated REST Resource to the config
         * @param {string} restResourceTypeName Name of the REST Resource Type
         * @param {AddDelegatedAdminCorrelatedRestResourceRequest} addDelegatedAdminCorrelatedRestResourceRequest Create a new Delegated Admin Correlated REST Resource in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig: async (restResourceTypeName: string, addDelegatedAdminCorrelatedRestResourceRequest: AddDelegatedAdminCorrelatedRestResourceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restResourceTypeName' is not null or undefined
            assertParamExists('addNewToConfig', 'restResourceTypeName', restResourceTypeName)
            // verify required parameter 'addDelegatedAdminCorrelatedRestResourceRequest' is not null or undefined
            assertParamExists('addNewToConfig', 'addDelegatedAdminCorrelatedRestResourceRequest', addDelegatedAdminCorrelatedRestResourceRequest)
            const localVarPath = `/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources`
                .replace(`{${"rest-resource-type-name"}}`, encodeURIComponent(String(restResourceTypeName !== undefined ? restResourceTypeName : `-rest-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addDelegatedAdminCorrelatedRestResourceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addDelegatedAdminCorrelatedRestResourceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Delegated Admin Correlated REST Resource
         * @param {string} delegatedAdminCorrelatedRestResourceName Name of the Delegated Admin Correlated REST Resource
         * @param {string} restResourceTypeName Name of the REST Resource Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource: async (delegatedAdminCorrelatedRestResourceName: string, restResourceTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminCorrelatedRestResourceName' is not null or undefined
            assertParamExists('deleteResource', 'delegatedAdminCorrelatedRestResourceName', delegatedAdminCorrelatedRestResourceName)
            // verify required parameter 'restResourceTypeName' is not null or undefined
            assertParamExists('deleteResource', 'restResourceTypeName', restResourceTypeName)
            const localVarPath = `/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources/{delegated-admin-correlated-rest-resource-name}`
                .replace(`{${"delegated-admin-correlated-rest-resource-name"}}`, encodeURIComponent(String(delegatedAdminCorrelatedRestResourceName !== undefined ? delegatedAdminCorrelatedRestResourceName : `-delegated-admin-correlated-rest-resource-name-`)))
                .replace(`{${"rest-resource-type-name"}}`, encodeURIComponent(String(restResourceTypeName !== undefined ? restResourceTypeName : `-rest-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources/{delegated-admin-correlated-rest-resource-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Delegated Admin Correlated REST Resource
         * @param {string} delegatedAdminCorrelatedRestResourceName Name of the Delegated Admin Correlated REST Resource
         * @param {string} restResourceTypeName Name of the REST Resource Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCorrelated: async (delegatedAdminCorrelatedRestResourceName: string, restResourceTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminCorrelatedRestResourceName' is not null or undefined
            assertParamExists('getSingleCorrelated', 'delegatedAdminCorrelatedRestResourceName', delegatedAdminCorrelatedRestResourceName)
            // verify required parameter 'restResourceTypeName' is not null or undefined
            assertParamExists('getSingleCorrelated', 'restResourceTypeName', restResourceTypeName)
            const localVarPath = `/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources/{delegated-admin-correlated-rest-resource-name}`
                .replace(`{${"delegated-admin-correlated-rest-resource-name"}}`, encodeURIComponent(String(delegatedAdminCorrelatedRestResourceName !== undefined ? delegatedAdminCorrelatedRestResourceName : `-delegated-admin-correlated-rest-resource-name-`)))
                .replace(`{${"rest-resource-type-name"}}`, encodeURIComponent(String(restResourceTypeName !== undefined ? restResourceTypeName : `-rest-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources/{delegated-admin-correlated-rest-resource-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Delegated Admin Correlated REST Resource objects
         * @param {string} restResourceTypeName Name of the REST Resource Type
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (restResourceTypeName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restResourceTypeName' is not null or undefined
            assertParamExists('listAllObjects', 'restResourceTypeName', restResourceTypeName)
            const localVarPath = `/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources`
                .replace(`{${"rest-resource-type-name"}}`, encodeURIComponent(String(restResourceTypeName !== undefined ? restResourceTypeName : `-rest-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Delegated Admin Correlated REST Resource by name
         * @param {string} delegatedAdminCorrelatedRestResourceName Name of the Delegated Admin Correlated REST Resource
         * @param {string} restResourceTypeName Name of the REST Resource Type
         * @param {UpdateRequest} updateRequest Update an existing Delegated Admin Correlated REST Resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (delegatedAdminCorrelatedRestResourceName: string, restResourceTypeName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminCorrelatedRestResourceName' is not null or undefined
            assertParamExists('updateByName', 'delegatedAdminCorrelatedRestResourceName', delegatedAdminCorrelatedRestResourceName)
            // verify required parameter 'restResourceTypeName' is not null or undefined
            assertParamExists('updateByName', 'restResourceTypeName', restResourceTypeName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources/{delegated-admin-correlated-rest-resource-name}`
                .replace(`{${"delegated-admin-correlated-rest-resource-name"}}`, encodeURIComponent(String(delegatedAdminCorrelatedRestResourceName !== undefined ? delegatedAdminCorrelatedRestResourceName : `-delegated-admin-correlated-rest-resource-name-`)))
                .replace(`{${"rest-resource-type-name"}}`, encodeURIComponent(String(restResourceTypeName !== undefined ? restResourceTypeName : `-rest-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources/{delegated-admin-correlated-rest-resource-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DelegatedAdminCorrelatedRestResourceApi - functional programming interface
 * @export
 */
export const DelegatedAdminCorrelatedRestResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DelegatedAdminCorrelatedRestResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Delegated Admin Correlated REST Resource to the config
         * @param {DelegatedAdminCorrelatedRestResourceApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewToConfig(requestParameters: DelegatedAdminCorrelatedRestResourceApiAddNewToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegatedAdminCorrelatedRestResourceResponse>> {
            const addDelegatedAdminCorrelatedRestResourceRequest: AddDelegatedAdminCorrelatedRestResourceRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewToConfig(requestParameters.restResourceTypeName, addDelegatedAdminCorrelatedRestResourceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Delegated Admin Correlated REST Resource
         * @param {DelegatedAdminCorrelatedRestResourceApiDeleteResourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResource(requestParameters: DelegatedAdminCorrelatedRestResourceApiDeleteResourceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResource(requestParameters.delegatedAdminCorrelatedRestResourceName, requestParameters.restResourceTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Delegated Admin Correlated REST Resource
         * @param {DelegatedAdminCorrelatedRestResourceApiGetSingleCorrelatedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleCorrelated(requestParameters: DelegatedAdminCorrelatedRestResourceApiGetSingleCorrelatedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegatedAdminCorrelatedRestResourceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleCorrelated(requestParameters.delegatedAdminCorrelatedRestResourceName, requestParameters.restResourceTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Delegated Admin Correlated REST Resource objects
         * @param {DelegatedAdminCorrelatedRestResourceApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: DelegatedAdminCorrelatedRestResourceApiListAllObjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegatedAdminCorrelatedRestResourceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.restResourceTypeName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Delegated Admin Correlated REST Resource by name
         * @param {DelegatedAdminCorrelatedRestResourceApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: DelegatedAdminCorrelatedRestResourceApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegatedAdminCorrelatedRestResourceResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.delegatedAdminCorrelatedRestResourceName, requestParameters.restResourceTypeName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DelegatedAdminCorrelatedRestResourceApi - factory interface
 * @export
 */
export const DelegatedAdminCorrelatedRestResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DelegatedAdminCorrelatedRestResourceApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Delegated Admin Correlated REST Resource to the config
         * @param {DelegatedAdminCorrelatedRestResourceApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig(requestParameters: DelegatedAdminCorrelatedRestResourceApiAddNewToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<DelegatedAdminCorrelatedRestResourceResponse> {
            return localVarFp.addNewToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Delegated Admin Correlated REST Resource
         * @param {DelegatedAdminCorrelatedRestResourceApiDeleteResourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource(requestParameters: DelegatedAdminCorrelatedRestResourceApiDeleteResourceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteResource(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Delegated Admin Correlated REST Resource
         * @param {DelegatedAdminCorrelatedRestResourceApiGetSingleCorrelatedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCorrelated(requestParameters: DelegatedAdminCorrelatedRestResourceApiGetSingleCorrelatedRequest, options?: AxiosRequestConfig): AxiosPromise<DelegatedAdminCorrelatedRestResourceResponse> {
            return localVarFp.getSingleCorrelated(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Delegated Admin Correlated REST Resource objects
         * @param {DelegatedAdminCorrelatedRestResourceApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: DelegatedAdminCorrelatedRestResourceApiListAllObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<DelegatedAdminCorrelatedRestResourceListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Delegated Admin Correlated REST Resource by name
         * @param {DelegatedAdminCorrelatedRestResourceApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: DelegatedAdminCorrelatedRestResourceApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<DelegatedAdminCorrelatedRestResourceResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewToConfig operation in DelegatedAdminCorrelatedRestResourceApi.
 * @export
 * @interface DelegatedAdminCorrelatedRestResourceApiAddNewToConfigRequest
 */
export type DelegatedAdminCorrelatedRestResourceApiAddNewToConfigRequest = {
    
    /**
    * Name of the REST Resource Type
    * @type {string}
    * @memberof DelegatedAdminCorrelatedRestResourceApiAddNewToConfig
    */
    readonly restResourceTypeName: string
    
} & AddDelegatedAdminCorrelatedRestResourceRequest

/**
 * Request parameters for deleteResource operation in DelegatedAdminCorrelatedRestResourceApi.
 * @export
 * @interface DelegatedAdminCorrelatedRestResourceApiDeleteResourceRequest
 */
export type DelegatedAdminCorrelatedRestResourceApiDeleteResourceRequest = {
    
    /**
    * Name of the Delegated Admin Correlated REST Resource
    * @type {string}
    * @memberof DelegatedAdminCorrelatedRestResourceApiDeleteResource
    */
    readonly delegatedAdminCorrelatedRestResourceName: string
    
    /**
    * Name of the REST Resource Type
    * @type {string}
    * @memberof DelegatedAdminCorrelatedRestResourceApiDeleteResource
    */
    readonly restResourceTypeName: string
    
}

/**
 * Request parameters for getSingleCorrelated operation in DelegatedAdminCorrelatedRestResourceApi.
 * @export
 * @interface DelegatedAdminCorrelatedRestResourceApiGetSingleCorrelatedRequest
 */
export type DelegatedAdminCorrelatedRestResourceApiGetSingleCorrelatedRequest = {
    
    /**
    * Name of the Delegated Admin Correlated REST Resource
    * @type {string}
    * @memberof DelegatedAdminCorrelatedRestResourceApiGetSingleCorrelated
    */
    readonly delegatedAdminCorrelatedRestResourceName: string
    
    /**
    * Name of the REST Resource Type
    * @type {string}
    * @memberof DelegatedAdminCorrelatedRestResourceApiGetSingleCorrelated
    */
    readonly restResourceTypeName: string
    
}

/**
 * Request parameters for listAllObjects operation in DelegatedAdminCorrelatedRestResourceApi.
 * @export
 * @interface DelegatedAdminCorrelatedRestResourceApiListAllObjectsRequest
 */
export type DelegatedAdminCorrelatedRestResourceApiListAllObjectsRequest = {
    
    /**
    * Name of the REST Resource Type
    * @type {string}
    * @memberof DelegatedAdminCorrelatedRestResourceApiListAllObjects
    */
    readonly restResourceTypeName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof DelegatedAdminCorrelatedRestResourceApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in DelegatedAdminCorrelatedRestResourceApi.
 * @export
 * @interface DelegatedAdminCorrelatedRestResourceApiUpdateByNameRequest
 */
export type DelegatedAdminCorrelatedRestResourceApiUpdateByNameRequest = {
    
    /**
    * Name of the Delegated Admin Correlated REST Resource
    * @type {string}
    * @memberof DelegatedAdminCorrelatedRestResourceApiUpdateByName
    */
    readonly delegatedAdminCorrelatedRestResourceName: string
    
    /**
    * Name of the REST Resource Type
    * @type {string}
    * @memberof DelegatedAdminCorrelatedRestResourceApiUpdateByName
    */
    readonly restResourceTypeName: string
    
} & UpdateRequest

/**
 * DelegatedAdminCorrelatedRestResourceApiGenerated - object-oriented interface
 * @export
 * @class DelegatedAdminCorrelatedRestResourceApiGenerated
 * @extends {BaseAPI}
 */
export class DelegatedAdminCorrelatedRestResourceApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Delegated Admin Correlated REST Resource to the config
     * @param {DelegatedAdminCorrelatedRestResourceApiAddNewToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminCorrelatedRestResourceApiGenerated
     */
    public addNewToConfig(requestParameters: DelegatedAdminCorrelatedRestResourceApiAddNewToConfigRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminCorrelatedRestResourceApiFp(this.configuration).addNewToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Delegated Admin Correlated REST Resource
     * @param {DelegatedAdminCorrelatedRestResourceApiDeleteResourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminCorrelatedRestResourceApiGenerated
     */
    public deleteResource(requestParameters: DelegatedAdminCorrelatedRestResourceApiDeleteResourceRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminCorrelatedRestResourceApiFp(this.configuration).deleteResource(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Delegated Admin Correlated REST Resource
     * @param {DelegatedAdminCorrelatedRestResourceApiGetSingleCorrelatedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminCorrelatedRestResourceApiGenerated
     */
    public getSingleCorrelated(requestParameters: DelegatedAdminCorrelatedRestResourceApiGetSingleCorrelatedRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminCorrelatedRestResourceApiFp(this.configuration).getSingleCorrelated(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Delegated Admin Correlated REST Resource objects
     * @param {DelegatedAdminCorrelatedRestResourceApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminCorrelatedRestResourceApiGenerated
     */
    public listAllObjects(requestParameters: DelegatedAdminCorrelatedRestResourceApiListAllObjectsRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminCorrelatedRestResourceApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Delegated Admin Correlated REST Resource by name
     * @param {DelegatedAdminCorrelatedRestResourceApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminCorrelatedRestResourceApiGenerated
     */
    public updateByName(requestParameters: DelegatedAdminCorrelatedRestResourceApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminCorrelatedRestResourceApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
