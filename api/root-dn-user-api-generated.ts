/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddRootDnUserRequest } from '../models';
// @ts-ignore
import { EnumrootDnUserIsProxyableProp } from '../models';
// @ts-ignore
import { EnumrootDnUserPrivilegeProp } from '../models';
// @ts-ignore
import { EnumrootDnUserSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { RootDnUserListResponse } from '../models';
// @ts-ignore
import { RootDnUserResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RootDnUserApi - axios parameter creator
 * @export
 */
export const RootDnUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Root DN User to the config
         * @param {AddRootDnUserRequest} addRootDnUserRequest Create a new Root DN User in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewUserToConfig: async (addRootDnUserRequest: AddRootDnUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addRootDnUserRequest' is not null or undefined
            assertParamExists('addNewUserToConfig', 'addRootDnUserRequest', addRootDnUserRequest)
            const localVarPath = `/root-dn/root-dn-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addRootDnUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/root-dn/root-dn-users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addRootDnUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Root DN User
         * @param {string} rootDnUserName Name of the Root DN User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (rootDnUserName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rootDnUserName' is not null or undefined
            assertParamExists('deleteUser', 'rootDnUserName', rootDnUserName)
            const localVarPath = `/root-dn/root-dn-users/{root-dn-user-name}`
                .replace(`{${"root-dn-user-name"}}`, encodeURIComponent(String(rootDnUserName !== undefined ? rootDnUserName : `-root-dn-user-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/root-dn/root-dn-users/{root-dn-user-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Root DN User
         * @param {string} rootDnUserName Name of the Root DN User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleUser: async (rootDnUserName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rootDnUserName' is not null or undefined
            assertParamExists('getSingleUser', 'rootDnUserName', rootDnUserName)
            const localVarPath = `/root-dn/root-dn-users/{root-dn-user-name}`
                .replace(`{${"root-dn-user-name"}}`, encodeURIComponent(String(rootDnUserName !== undefined ? rootDnUserName : `-root-dn-user-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/root-dn/root-dn-users/{root-dn-user-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Root DN User objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllUsers: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/root-dn/root-dn-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/root-dn/root-dn-users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Root DN User by name
         * @param {string} rootDnUserName Name of the Root DN User
         * @param {UpdateRequest} updateRequest Update an existing Root DN User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (rootDnUserName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rootDnUserName' is not null or undefined
            assertParamExists('updateByName', 'rootDnUserName', rootDnUserName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/root-dn/root-dn-users/{root-dn-user-name}`
                .replace(`{${"root-dn-user-name"}}`, encodeURIComponent(String(rootDnUserName !== undefined ? rootDnUserName : `-root-dn-user-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/root-dn/root-dn-users/{root-dn-user-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RootDnUserApi - functional programming interface
 * @export
 */
export const RootDnUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RootDnUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Root DN User to the config
         * @param {RootDnUserApiAddNewUserToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewUserToConfig(requestParameters: RootDnUserApiAddNewUserToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RootDnUserResponse>> {
            const addRootDnUserRequest: AddRootDnUserRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewUserToConfig(addRootDnUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Root DN User
         * @param {RootDnUserApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(requestParameters: RootDnUserApiDeleteUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(requestParameters.rootDnUserName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Root DN User
         * @param {RootDnUserApiGetSingleUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleUser(requestParameters: RootDnUserApiGetSingleUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RootDnUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleUser(requestParameters.rootDnUserName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Root DN User objects
         * @param {RootDnUserApiListAllUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllUsers(requestParameters: RootDnUserApiListAllUsersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RootDnUserListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllUsers(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Root DN User by name
         * @param {RootDnUserApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: RootDnUserApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RootDnUserResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.rootDnUserName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RootDnUserApi - factory interface
 * @export
 */
export const RootDnUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RootDnUserApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Root DN User to the config
         * @param {RootDnUserApiAddNewUserToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewUserToConfig(requestParameters: RootDnUserApiAddNewUserToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<RootDnUserResponse> {
            return localVarFp.addNewUserToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Root DN User
         * @param {RootDnUserApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters: RootDnUserApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Root DN User
         * @param {RootDnUserApiGetSingleUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleUser(requestParameters: RootDnUserApiGetSingleUserRequest, options?: AxiosRequestConfig): AxiosPromise<RootDnUserResponse> {
            return localVarFp.getSingleUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Root DN User objects
         * @param {RootDnUserApiListAllUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllUsers(requestParameters: RootDnUserApiListAllUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RootDnUserListResponse> {
            return localVarFp.listAllUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Root DN User by name
         * @param {RootDnUserApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: RootDnUserApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<RootDnUserResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewUserToConfig operation in RootDnUserApi.
 * @export
 * @interface RootDnUserApiAddNewUserToConfigRequest
 */
export type RootDnUserApiAddNewUserToConfigRequest = {
    
} & AddRootDnUserRequest

/**
 * Request parameters for deleteUser operation in RootDnUserApi.
 * @export
 * @interface RootDnUserApiDeleteUserRequest
 */
export type RootDnUserApiDeleteUserRequest = {
    
    /**
    * Name of the Root DN User
    * @type {string}
    * @memberof RootDnUserApiDeleteUser
    */
    readonly rootDnUserName: string
    
}

/**
 * Request parameters for getSingleUser operation in RootDnUserApi.
 * @export
 * @interface RootDnUserApiGetSingleUserRequest
 */
export type RootDnUserApiGetSingleUserRequest = {
    
    /**
    * Name of the Root DN User
    * @type {string}
    * @memberof RootDnUserApiGetSingleUser
    */
    readonly rootDnUserName: string
    
}

/**
 * Request parameters for listAllUsers operation in RootDnUserApi.
 * @export
 * @interface RootDnUserApiListAllUsersRequest
 */
export type RootDnUserApiListAllUsersRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof RootDnUserApiListAllUsers
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in RootDnUserApi.
 * @export
 * @interface RootDnUserApiUpdateByNameRequest
 */
export type RootDnUserApiUpdateByNameRequest = {
    
    /**
    * Name of the Root DN User
    * @type {string}
    * @memberof RootDnUserApiUpdateByName
    */
    readonly rootDnUserName: string
    
} & UpdateRequest

/**
 * RootDnUserApiGenerated - object-oriented interface
 * @export
 * @class RootDnUserApiGenerated
 * @extends {BaseAPI}
 */
export class RootDnUserApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Root DN User to the config
     * @param {RootDnUserApiAddNewUserToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootDnUserApiGenerated
     */
    public addNewUserToConfig(requestParameters: RootDnUserApiAddNewUserToConfigRequest, options?: AxiosRequestConfig) {
        return RootDnUserApiFp(this.configuration).addNewUserToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Root DN User
     * @param {RootDnUserApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootDnUserApiGenerated
     */
    public deleteUser(requestParameters: RootDnUserApiDeleteUserRequest, options?: AxiosRequestConfig) {
        return RootDnUserApiFp(this.configuration).deleteUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Root DN User
     * @param {RootDnUserApiGetSingleUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootDnUserApiGenerated
     */
    public getSingleUser(requestParameters: RootDnUserApiGetSingleUserRequest, options?: AxiosRequestConfig) {
        return RootDnUserApiFp(this.configuration).getSingleUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Root DN User objects
     * @param {RootDnUserApiListAllUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootDnUserApiGenerated
     */
    public listAllUsers(requestParameters: RootDnUserApiListAllUsersRequest = {}, options?: AxiosRequestConfig) {
        return RootDnUserApiFp(this.configuration).listAllUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Root DN User by name
     * @param {RootDnUserApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootDnUserApiGenerated
     */
    public updateByName(requestParameters: RootDnUserApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return RootDnUserApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
