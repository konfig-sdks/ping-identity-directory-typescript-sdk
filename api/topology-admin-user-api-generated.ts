/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddTopologyAdminUserRequest } from '../models';
// @ts-ignore
import { EnumtopologyAdminUserIsProxyableProp } from '../models';
// @ts-ignore
import { EnumtopologyAdminUserPrivilegeProp } from '../models';
// @ts-ignore
import { EnumtopologyAdminUserSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { TopologyAdminUserListResponse } from '../models';
// @ts-ignore
import { TopologyAdminUserResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TopologyAdminUserApi - axios parameter creator
 * @export
 */
export const TopologyAdminUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Topology Admin User to the config
         * @param {AddTopologyAdminUserRequest} addTopologyAdminUserRequest Create a new Topology Admin User in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewUser: async (addTopologyAdminUserRequest: AddTopologyAdminUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addTopologyAdminUserRequest' is not null or undefined
            assertParamExists('addNewUser', 'addTopologyAdminUserRequest', addTopologyAdminUserRequest)
            const localVarPath = `/topology-admin-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addTopologyAdminUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/topology-admin-users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addTopologyAdminUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Topology Admin User
         * @param {string} topologyAdminUserName Name of the Topology Admin User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (topologyAdminUserName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topologyAdminUserName' is not null or undefined
            assertParamExists('deleteUser', 'topologyAdminUserName', topologyAdminUserName)
            const localVarPath = `/topology-admin-users/{topology-admin-user-name}`
                .replace(`{${"topology-admin-user-name"}}`, encodeURIComponent(String(topologyAdminUserName !== undefined ? topologyAdminUserName : `-topology-admin-user-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/topology-admin-users/{topology-admin-user-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Topology Admin User
         * @param {string} topologyAdminUserName Name of the Topology Admin User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleTopologyAdminUser: async (topologyAdminUserName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topologyAdminUserName' is not null or undefined
            assertParamExists('getSingleTopologyAdminUser', 'topologyAdminUserName', topologyAdminUserName)
            const localVarPath = `/topology-admin-users/{topology-admin-user-name}`
                .replace(`{${"topology-admin-user-name"}}`, encodeURIComponent(String(topologyAdminUserName !== undefined ? topologyAdminUserName : `-topology-admin-user-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/topology-admin-users/{topology-admin-user-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Topology Admin User objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllUsers: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/topology-admin-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/topology-admin-users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Topology Admin User by name
         * @param {string} topologyAdminUserName Name of the Topology Admin User
         * @param {UpdateRequest} updateRequest Update an existing Topology Admin User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (topologyAdminUserName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topologyAdminUserName' is not null or undefined
            assertParamExists('updateByName', 'topologyAdminUserName', topologyAdminUserName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/topology-admin-users/{topology-admin-user-name}`
                .replace(`{${"topology-admin-user-name"}}`, encodeURIComponent(String(topologyAdminUserName !== undefined ? topologyAdminUserName : `-topology-admin-user-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/topology-admin-users/{topology-admin-user-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TopologyAdminUserApi - functional programming interface
 * @export
 */
export const TopologyAdminUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TopologyAdminUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Topology Admin User to the config
         * @param {TopologyAdminUserApiAddNewUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewUser(requestParameters: TopologyAdminUserApiAddNewUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopologyAdminUserResponse>> {
            const addTopologyAdminUserRequest: AddTopologyAdminUserRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewUser(addTopologyAdminUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Topology Admin User
         * @param {TopologyAdminUserApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(requestParameters: TopologyAdminUserApiDeleteUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(requestParameters.topologyAdminUserName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Topology Admin User
         * @param {TopologyAdminUserApiGetSingleTopologyAdminUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleTopologyAdminUser(requestParameters: TopologyAdminUserApiGetSingleTopologyAdminUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopologyAdminUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleTopologyAdminUser(requestParameters.topologyAdminUserName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Topology Admin User objects
         * @param {TopologyAdminUserApiListAllUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllUsers(requestParameters: TopologyAdminUserApiListAllUsersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopologyAdminUserListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllUsers(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Topology Admin User by name
         * @param {TopologyAdminUserApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: TopologyAdminUserApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopologyAdminUserResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.topologyAdminUserName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TopologyAdminUserApi - factory interface
 * @export
 */
export const TopologyAdminUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TopologyAdminUserApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Topology Admin User to the config
         * @param {TopologyAdminUserApiAddNewUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewUser(requestParameters: TopologyAdminUserApiAddNewUserRequest, options?: AxiosRequestConfig): AxiosPromise<TopologyAdminUserResponse> {
            return localVarFp.addNewUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Topology Admin User
         * @param {TopologyAdminUserApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters: TopologyAdminUserApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Topology Admin User
         * @param {TopologyAdminUserApiGetSingleTopologyAdminUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleTopologyAdminUser(requestParameters: TopologyAdminUserApiGetSingleTopologyAdminUserRequest, options?: AxiosRequestConfig): AxiosPromise<TopologyAdminUserResponse> {
            return localVarFp.getSingleTopologyAdminUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Topology Admin User objects
         * @param {TopologyAdminUserApiListAllUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllUsers(requestParameters: TopologyAdminUserApiListAllUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TopologyAdminUserListResponse> {
            return localVarFp.listAllUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Topology Admin User by name
         * @param {TopologyAdminUserApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: TopologyAdminUserApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<TopologyAdminUserResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewUser operation in TopologyAdminUserApi.
 * @export
 * @interface TopologyAdminUserApiAddNewUserRequest
 */
export type TopologyAdminUserApiAddNewUserRequest = {
    
} & AddTopologyAdminUserRequest

/**
 * Request parameters for deleteUser operation in TopologyAdminUserApi.
 * @export
 * @interface TopologyAdminUserApiDeleteUserRequest
 */
export type TopologyAdminUserApiDeleteUserRequest = {
    
    /**
    * Name of the Topology Admin User
    * @type {string}
    * @memberof TopologyAdminUserApiDeleteUser
    */
    readonly topologyAdminUserName: string
    
}

/**
 * Request parameters for getSingleTopologyAdminUser operation in TopologyAdminUserApi.
 * @export
 * @interface TopologyAdminUserApiGetSingleTopologyAdminUserRequest
 */
export type TopologyAdminUserApiGetSingleTopologyAdminUserRequest = {
    
    /**
    * Name of the Topology Admin User
    * @type {string}
    * @memberof TopologyAdminUserApiGetSingleTopologyAdminUser
    */
    readonly topologyAdminUserName: string
    
}

/**
 * Request parameters for listAllUsers operation in TopologyAdminUserApi.
 * @export
 * @interface TopologyAdminUserApiListAllUsersRequest
 */
export type TopologyAdminUserApiListAllUsersRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof TopologyAdminUserApiListAllUsers
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in TopologyAdminUserApi.
 * @export
 * @interface TopologyAdminUserApiUpdateByNameRequest
 */
export type TopologyAdminUserApiUpdateByNameRequest = {
    
    /**
    * Name of the Topology Admin User
    * @type {string}
    * @memberof TopologyAdminUserApiUpdateByName
    */
    readonly topologyAdminUserName: string
    
} & UpdateRequest

/**
 * TopologyAdminUserApiGenerated - object-oriented interface
 * @export
 * @class TopologyAdminUserApiGenerated
 * @extends {BaseAPI}
 */
export class TopologyAdminUserApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Topology Admin User to the config
     * @param {TopologyAdminUserApiAddNewUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopologyAdminUserApiGenerated
     */
    public addNewUser(requestParameters: TopologyAdminUserApiAddNewUserRequest, options?: AxiosRequestConfig) {
        return TopologyAdminUserApiFp(this.configuration).addNewUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Topology Admin User
     * @param {TopologyAdminUserApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopologyAdminUserApiGenerated
     */
    public deleteUser(requestParameters: TopologyAdminUserApiDeleteUserRequest, options?: AxiosRequestConfig) {
        return TopologyAdminUserApiFp(this.configuration).deleteUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Topology Admin User
     * @param {TopologyAdminUserApiGetSingleTopologyAdminUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopologyAdminUserApiGenerated
     */
    public getSingleTopologyAdminUser(requestParameters: TopologyAdminUserApiGetSingleTopologyAdminUserRequest, options?: AxiosRequestConfig) {
        return TopologyAdminUserApiFp(this.configuration).getSingleTopologyAdminUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Topology Admin User objects
     * @param {TopologyAdminUserApiListAllUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopologyAdminUserApiGenerated
     */
    public listAllUsers(requestParameters: TopologyAdminUserApiListAllUsersRequest = {}, options?: AxiosRequestConfig) {
        return TopologyAdminUserApiFp(this.configuration).listAllUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Topology Admin User by name
     * @param {TopologyAdminUserApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopologyAdminUserApiGenerated
     */
    public updateByName(requestParameters: TopologyAdminUserApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return TopologyAdminUserApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
