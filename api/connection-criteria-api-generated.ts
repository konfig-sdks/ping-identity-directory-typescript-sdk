/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddConnectionCriteria200Response } from '../models';
// @ts-ignore
import { AddConnectionCriteriaRequest } from '../models';
// @ts-ignore
import { ConnectionCriteriaListResponse } from '../models';
// @ts-ignore
import { EnumconnectionCriteriaAllIncludedUserPrivilegeProp } from '../models';
// @ts-ignore
import { EnumconnectionCriteriaAnyIncludedUserPrivilegeProp } from '../models';
// @ts-ignore
import { EnumconnectionCriteriaAuthenticationSecurityLevelProp } from '../models';
// @ts-ignore
import { EnumconnectionCriteriaCommunicationSecurityLevelProp } from '../models';
// @ts-ignore
import { EnumconnectionCriteriaNoneIncludedUserPrivilegeProp } from '../models';
// @ts-ignore
import { EnumconnectionCriteriaNotAllIncludedUserPrivilegeProp } from '../models';
// @ts-ignore
import { EnumconnectionCriteriaUserAuthTypeProp } from '../models';
// @ts-ignore
import { EnumthirdPartyConnectionCriteriaSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConnectionCriteriaApi - axios parameter creator
 * @export
 */
export const ConnectionCriteriaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Connection Criteria to the config
         * @param {AddConnectionCriteriaRequest} addConnectionCriteriaRequest Create a new Connection Criteria in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCriteriaToConfig: async (addConnectionCriteriaRequest: AddConnectionCriteriaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addConnectionCriteriaRequest' is not null or undefined
            assertParamExists('addNewCriteriaToConfig', 'addConnectionCriteriaRequest', addConnectionCriteriaRequest)
            const localVarPath = `/connection-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addConnectionCriteriaRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connection-criteria',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addConnectionCriteriaRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Connection Criteria
         * @param {string} connectionCriteriaName Name of the Connection Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCriteria: async (connectionCriteriaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionCriteriaName' is not null or undefined
            assertParamExists('deleteCriteria', 'connectionCriteriaName', connectionCriteriaName)
            const localVarPath = `/connection-criteria/{connection-criteria-name}`
                .replace(`{${"connection-criteria-name"}}`, encodeURIComponent(String(connectionCriteriaName !== undefined ? connectionCriteriaName : `-connection-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connection-criteria/{connection-criteria-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Connection Criteria
         * @param {string} connectionCriteriaName Name of the Connection Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCriteria: async (connectionCriteriaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionCriteriaName' is not null or undefined
            assertParamExists('getSingleCriteria', 'connectionCriteriaName', connectionCriteriaName)
            const localVarPath = `/connection-criteria/{connection-criteria-name}`
                .replace(`{${"connection-criteria-name"}}`, encodeURIComponent(String(connectionCriteriaName !== undefined ? connectionCriteriaName : `-connection-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connection-criteria/{connection-criteria-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Connection Criteria objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/connection-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connection-criteria',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Connection Criteria by name
         * @param {string} connectionCriteriaName Name of the Connection Criteria
         * @param {UpdateRequest} updateRequest Update an existing Connection Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (connectionCriteriaName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionCriteriaName' is not null or undefined
            assertParamExists('updateByName', 'connectionCriteriaName', connectionCriteriaName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/connection-criteria/{connection-criteria-name}`
                .replace(`{${"connection-criteria-name"}}`, encodeURIComponent(String(connectionCriteriaName !== undefined ? connectionCriteriaName : `-connection-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connection-criteria/{connection-criteria-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnectionCriteriaApi - functional programming interface
 * @export
 */
export const ConnectionCriteriaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConnectionCriteriaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Connection Criteria to the config
         * @param {ConnectionCriteriaApiAddNewCriteriaToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewCriteriaToConfig(requestParameters: ConnectionCriteriaApiAddNewCriteriaToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddConnectionCriteria200Response>> {
            const addConnectionCriteriaRequest: AddConnectionCriteriaRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewCriteriaToConfig(addConnectionCriteriaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Connection Criteria
         * @param {ConnectionCriteriaApiDeleteCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCriteria(requestParameters: ConnectionCriteriaApiDeleteCriteriaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCriteria(requestParameters.connectionCriteriaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Connection Criteria
         * @param {ConnectionCriteriaApiGetSingleCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleCriteria(requestParameters: ConnectionCriteriaApiGetSingleCriteriaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddConnectionCriteria200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleCriteria(requestParameters.connectionCriteriaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Connection Criteria objects
         * @param {ConnectionCriteriaApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listObjects(requestParameters: ConnectionCriteriaApiListObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectionCriteriaListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Connection Criteria by name
         * @param {ConnectionCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ConnectionCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddConnectionCriteria200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.connectionCriteriaName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConnectionCriteriaApi - factory interface
 * @export
 */
export const ConnectionCriteriaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConnectionCriteriaApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Connection Criteria to the config
         * @param {ConnectionCriteriaApiAddNewCriteriaToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCriteriaToConfig(requestParameters: ConnectionCriteriaApiAddNewCriteriaToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AddConnectionCriteria200Response> {
            return localVarFp.addNewCriteriaToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Connection Criteria
         * @param {ConnectionCriteriaApiDeleteCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCriteria(requestParameters: ConnectionCriteriaApiDeleteCriteriaRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCriteria(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Connection Criteria
         * @param {ConnectionCriteriaApiGetSingleCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCriteria(requestParameters: ConnectionCriteriaApiGetSingleCriteriaRequest, options?: AxiosRequestConfig): AxiosPromise<AddConnectionCriteria200Response> {
            return localVarFp.getSingleCriteria(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Connection Criteria objects
         * @param {ConnectionCriteriaApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects(requestParameters: ConnectionCriteriaApiListObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ConnectionCriteriaListResponse> {
            return localVarFp.listObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Connection Criteria by name
         * @param {ConnectionCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ConnectionCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddConnectionCriteria200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewCriteriaToConfig operation in ConnectionCriteriaApi.
 * @export
 * @interface ConnectionCriteriaApiAddNewCriteriaToConfigRequest
 */
export type ConnectionCriteriaApiAddNewCriteriaToConfigRequest = {
    
} & AddConnectionCriteriaRequest

/**
 * Request parameters for deleteCriteria operation in ConnectionCriteriaApi.
 * @export
 * @interface ConnectionCriteriaApiDeleteCriteriaRequest
 */
export type ConnectionCriteriaApiDeleteCriteriaRequest = {
    
    /**
    * Name of the Connection Criteria
    * @type {string}
    * @memberof ConnectionCriteriaApiDeleteCriteria
    */
    readonly connectionCriteriaName: string
    
}

/**
 * Request parameters for getSingleCriteria operation in ConnectionCriteriaApi.
 * @export
 * @interface ConnectionCriteriaApiGetSingleCriteriaRequest
 */
export type ConnectionCriteriaApiGetSingleCriteriaRequest = {
    
    /**
    * Name of the Connection Criteria
    * @type {string}
    * @memberof ConnectionCriteriaApiGetSingleCriteria
    */
    readonly connectionCriteriaName: string
    
}

/**
 * Request parameters for listObjects operation in ConnectionCriteriaApi.
 * @export
 * @interface ConnectionCriteriaApiListObjectsRequest
 */
export type ConnectionCriteriaApiListObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ConnectionCriteriaApiListObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in ConnectionCriteriaApi.
 * @export
 * @interface ConnectionCriteriaApiUpdateByNameRequest
 */
export type ConnectionCriteriaApiUpdateByNameRequest = {
    
    /**
    * Name of the Connection Criteria
    * @type {string}
    * @memberof ConnectionCriteriaApiUpdateByName
    */
    readonly connectionCriteriaName: string
    
} & UpdateRequest

/**
 * ConnectionCriteriaApiGenerated - object-oriented interface
 * @export
 * @class ConnectionCriteriaApiGenerated
 * @extends {BaseAPI}
 */
export class ConnectionCriteriaApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Connection Criteria to the config
     * @param {ConnectionCriteriaApiAddNewCriteriaToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionCriteriaApiGenerated
     */
    public addNewCriteriaToConfig(requestParameters: ConnectionCriteriaApiAddNewCriteriaToConfigRequest, options?: AxiosRequestConfig) {
        return ConnectionCriteriaApiFp(this.configuration).addNewCriteriaToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Connection Criteria
     * @param {ConnectionCriteriaApiDeleteCriteriaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionCriteriaApiGenerated
     */
    public deleteCriteria(requestParameters: ConnectionCriteriaApiDeleteCriteriaRequest, options?: AxiosRequestConfig) {
        return ConnectionCriteriaApiFp(this.configuration).deleteCriteria(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Connection Criteria
     * @param {ConnectionCriteriaApiGetSingleCriteriaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionCriteriaApiGenerated
     */
    public getSingleCriteria(requestParameters: ConnectionCriteriaApiGetSingleCriteriaRequest, options?: AxiosRequestConfig) {
        return ConnectionCriteriaApiFp(this.configuration).getSingleCriteria(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Connection Criteria objects
     * @param {ConnectionCriteriaApiListObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionCriteriaApiGenerated
     */
    public listObjects(requestParameters: ConnectionCriteriaApiListObjectsRequest = {}, options?: AxiosRequestConfig) {
        return ConnectionCriteriaApiFp(this.configuration).listObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Connection Criteria by name
     * @param {ConnectionCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionCriteriaApiGenerated
     */
    public updateByName(requestParameters: ConnectionCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ConnectionCriteriaApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
