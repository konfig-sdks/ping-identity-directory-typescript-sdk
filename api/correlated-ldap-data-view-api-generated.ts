/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddCorrelatedLdapDataViewRequest } from '../models';
// @ts-ignore
import { CorrelatedLdapDataViewListResponse } from '../models';
// @ts-ignore
import { CorrelatedLdapDataViewResponse } from '../models';
// @ts-ignore
import { EnumcorrelatedLdapDataViewSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CorrelatedLdapDataViewApi - axios parameter creator
 * @export
 */
export const CorrelatedLdapDataViewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Correlated LDAP Data View to the config
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {AddCorrelatedLdapDataViewRequest} addCorrelatedLdapDataViewRequest Create a new Correlated LDAP Data View in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig: async (scimResourceTypeName: string, addCorrelatedLdapDataViewRequest: AddCorrelatedLdapDataViewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('addNewConfig', 'scimResourceTypeName', scimResourceTypeName)
            // verify required parameter 'addCorrelatedLdapDataViewRequest' is not null or undefined
            assertParamExists('addNewConfig', 'addCorrelatedLdapDataViewRequest', addCorrelatedLdapDataViewRequest)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views`
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addCorrelatedLdapDataViewRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addCorrelatedLdapDataViewRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Correlated LDAP Data View
         * @param {string} correlatedLdapDataViewName Name of the Correlated LDAP Data View
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCorrelatedLdapDataView: async (correlatedLdapDataViewName: string, scimResourceTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'correlatedLdapDataViewName' is not null or undefined
            assertParamExists('deleteCorrelatedLdapDataView', 'correlatedLdapDataViewName', correlatedLdapDataViewName)
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('deleteCorrelatedLdapDataView', 'scimResourceTypeName', scimResourceTypeName)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}`
                .replace(`{${"correlated-ldap-data-view-name"}}`, encodeURIComponent(String(correlatedLdapDataViewName !== undefined ? correlatedLdapDataViewName : `-correlated-ldap-data-view-name-`)))
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Correlated LDAP Data View objects
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (scimResourceTypeName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('getList', 'scimResourceTypeName', scimResourceTypeName)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views`
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Correlated LDAP Data View
         * @param {string} correlatedLdapDataViewName Name of the Correlated LDAP Data View
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (correlatedLdapDataViewName: string, scimResourceTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'correlatedLdapDataViewName' is not null or undefined
            assertParamExists('getSingle', 'correlatedLdapDataViewName', correlatedLdapDataViewName)
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('getSingle', 'scimResourceTypeName', scimResourceTypeName)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}`
                .replace(`{${"correlated-ldap-data-view-name"}}`, encodeURIComponent(String(correlatedLdapDataViewName !== undefined ? correlatedLdapDataViewName : `-correlated-ldap-data-view-name-`)))
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Correlated LDAP Data View by name
         * @param {string} correlatedLdapDataViewName Name of the Correlated LDAP Data View
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {UpdateRequest} updateRequest Update an existing Correlated LDAP Data View
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (correlatedLdapDataViewName: string, scimResourceTypeName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'correlatedLdapDataViewName' is not null or undefined
            assertParamExists('updateByName', 'correlatedLdapDataViewName', correlatedLdapDataViewName)
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('updateByName', 'scimResourceTypeName', scimResourceTypeName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}`
                .replace(`{${"correlated-ldap-data-view-name"}}`, encodeURIComponent(String(correlatedLdapDataViewName !== undefined ? correlatedLdapDataViewName : `-correlated-ldap-data-view-name-`)))
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CorrelatedLdapDataViewApi - functional programming interface
 * @export
 */
export const CorrelatedLdapDataViewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CorrelatedLdapDataViewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Correlated LDAP Data View to the config
         * @param {CorrelatedLdapDataViewApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewConfig(requestParameters: CorrelatedLdapDataViewApiAddNewConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CorrelatedLdapDataViewResponse>> {
            const addCorrelatedLdapDataViewRequest: AddCorrelatedLdapDataViewRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewConfig(requestParameters.scimResourceTypeName, addCorrelatedLdapDataViewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Correlated LDAP Data View
         * @param {CorrelatedLdapDataViewApiDeleteCorrelatedLdapDataViewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCorrelatedLdapDataView(requestParameters: CorrelatedLdapDataViewApiDeleteCorrelatedLdapDataViewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCorrelatedLdapDataView(requestParameters.correlatedLdapDataViewName, requestParameters.scimResourceTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Correlated LDAP Data View objects
         * @param {CorrelatedLdapDataViewApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: CorrelatedLdapDataViewApiGetListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CorrelatedLdapDataViewListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.scimResourceTypeName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Correlated LDAP Data View
         * @param {CorrelatedLdapDataViewApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: CorrelatedLdapDataViewApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CorrelatedLdapDataViewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.correlatedLdapDataViewName, requestParameters.scimResourceTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Correlated LDAP Data View by name
         * @param {CorrelatedLdapDataViewApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: CorrelatedLdapDataViewApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CorrelatedLdapDataViewResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.correlatedLdapDataViewName, requestParameters.scimResourceTypeName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CorrelatedLdapDataViewApi - factory interface
 * @export
 */
export const CorrelatedLdapDataViewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CorrelatedLdapDataViewApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Correlated LDAP Data View to the config
         * @param {CorrelatedLdapDataViewApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig(requestParameters: CorrelatedLdapDataViewApiAddNewConfigRequest, options?: AxiosRequestConfig): AxiosPromise<CorrelatedLdapDataViewResponse> {
            return localVarFp.addNewConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Correlated LDAP Data View
         * @param {CorrelatedLdapDataViewApiDeleteCorrelatedLdapDataViewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCorrelatedLdapDataView(requestParameters: CorrelatedLdapDataViewApiDeleteCorrelatedLdapDataViewRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCorrelatedLdapDataView(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Correlated LDAP Data View objects
         * @param {CorrelatedLdapDataViewApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: CorrelatedLdapDataViewApiGetListRequest, options?: AxiosRequestConfig): AxiosPromise<CorrelatedLdapDataViewListResponse> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Correlated LDAP Data View
         * @param {CorrelatedLdapDataViewApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: CorrelatedLdapDataViewApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<CorrelatedLdapDataViewResponse> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Correlated LDAP Data View by name
         * @param {CorrelatedLdapDataViewApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: CorrelatedLdapDataViewApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<CorrelatedLdapDataViewResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewConfig operation in CorrelatedLdapDataViewApi.
 * @export
 * @interface CorrelatedLdapDataViewApiAddNewConfigRequest
 */
export type CorrelatedLdapDataViewApiAddNewConfigRequest = {
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof CorrelatedLdapDataViewApiAddNewConfig
    */
    readonly scimResourceTypeName: string
    
} & AddCorrelatedLdapDataViewRequest

/**
 * Request parameters for deleteCorrelatedLdapDataView operation in CorrelatedLdapDataViewApi.
 * @export
 * @interface CorrelatedLdapDataViewApiDeleteCorrelatedLdapDataViewRequest
 */
export type CorrelatedLdapDataViewApiDeleteCorrelatedLdapDataViewRequest = {
    
    /**
    * Name of the Correlated LDAP Data View
    * @type {string}
    * @memberof CorrelatedLdapDataViewApiDeleteCorrelatedLdapDataView
    */
    readonly correlatedLdapDataViewName: string
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof CorrelatedLdapDataViewApiDeleteCorrelatedLdapDataView
    */
    readonly scimResourceTypeName: string
    
}

/**
 * Request parameters for getList operation in CorrelatedLdapDataViewApi.
 * @export
 * @interface CorrelatedLdapDataViewApiGetListRequest
 */
export type CorrelatedLdapDataViewApiGetListRequest = {
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof CorrelatedLdapDataViewApiGetList
    */
    readonly scimResourceTypeName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof CorrelatedLdapDataViewApiGetList
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingle operation in CorrelatedLdapDataViewApi.
 * @export
 * @interface CorrelatedLdapDataViewApiGetSingleRequest
 */
export type CorrelatedLdapDataViewApiGetSingleRequest = {
    
    /**
    * Name of the Correlated LDAP Data View
    * @type {string}
    * @memberof CorrelatedLdapDataViewApiGetSingle
    */
    readonly correlatedLdapDataViewName: string
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof CorrelatedLdapDataViewApiGetSingle
    */
    readonly scimResourceTypeName: string
    
}

/**
 * Request parameters for updateByName operation in CorrelatedLdapDataViewApi.
 * @export
 * @interface CorrelatedLdapDataViewApiUpdateByNameRequest
 */
export type CorrelatedLdapDataViewApiUpdateByNameRequest = {
    
    /**
    * Name of the Correlated LDAP Data View
    * @type {string}
    * @memberof CorrelatedLdapDataViewApiUpdateByName
    */
    readonly correlatedLdapDataViewName: string
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof CorrelatedLdapDataViewApiUpdateByName
    */
    readonly scimResourceTypeName: string
    
} & UpdateRequest

/**
 * CorrelatedLdapDataViewApiGenerated - object-oriented interface
 * @export
 * @class CorrelatedLdapDataViewApiGenerated
 * @extends {BaseAPI}
 */
export class CorrelatedLdapDataViewApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Correlated LDAP Data View to the config
     * @param {CorrelatedLdapDataViewApiAddNewConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorrelatedLdapDataViewApiGenerated
     */
    public addNewConfig(requestParameters: CorrelatedLdapDataViewApiAddNewConfigRequest, options?: AxiosRequestConfig) {
        return CorrelatedLdapDataViewApiFp(this.configuration).addNewConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Correlated LDAP Data View
     * @param {CorrelatedLdapDataViewApiDeleteCorrelatedLdapDataViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorrelatedLdapDataViewApiGenerated
     */
    public deleteCorrelatedLdapDataView(requestParameters: CorrelatedLdapDataViewApiDeleteCorrelatedLdapDataViewRequest, options?: AxiosRequestConfig) {
        return CorrelatedLdapDataViewApiFp(this.configuration).deleteCorrelatedLdapDataView(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Correlated LDAP Data View objects
     * @param {CorrelatedLdapDataViewApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorrelatedLdapDataViewApiGenerated
     */
    public getList(requestParameters: CorrelatedLdapDataViewApiGetListRequest, options?: AxiosRequestConfig) {
        return CorrelatedLdapDataViewApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Correlated LDAP Data View
     * @param {CorrelatedLdapDataViewApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorrelatedLdapDataViewApiGenerated
     */
    public getSingle(requestParameters: CorrelatedLdapDataViewApiGetSingleRequest, options?: AxiosRequestConfig) {
        return CorrelatedLdapDataViewApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Correlated LDAP Data View by name
     * @param {CorrelatedLdapDataViewApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorrelatedLdapDataViewApiGenerated
     */
    public updateByName(requestParameters: CorrelatedLdapDataViewApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return CorrelatedLdapDataViewApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
