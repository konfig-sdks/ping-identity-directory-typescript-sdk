/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddPassphraseProvider200Response } from '../models';
// @ts-ignore
import { AddPassphraseProviderRequest } from '../models';
// @ts-ignore
import { EnumthirdPartyPassphraseProviderSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { PassphraseProviderListResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PassphraseProviderApi - axios parameter creator
 * @export
 */
export const PassphraseProviderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Passphrase Provider to the config
         * @param {AddPassphraseProviderRequest} addPassphraseProviderRequest Create a new Passphrase Provider in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewProvider: async (addPassphraseProviderRequest: AddPassphraseProviderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addPassphraseProviderRequest' is not null or undefined
            assertParamExists('addNewProvider', 'addPassphraseProviderRequest', addPassphraseProviderRequest)
            const localVarPath = `/passphrase-providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addPassphraseProviderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/passphrase-providers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addPassphraseProviderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Passphrase Provider
         * @param {string} passphraseProviderName Name of the Passphrase Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvider: async (passphraseProviderName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passphraseProviderName' is not null or undefined
            assertParamExists('deleteProvider', 'passphraseProviderName', passphraseProviderName)
            const localVarPath = `/passphrase-providers/{passphrase-provider-name}`
                .replace(`{${"passphrase-provider-name"}}`, encodeURIComponent(String(passphraseProviderName !== undefined ? passphraseProviderName : `-passphrase-provider-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/passphrase-providers/{passphrase-provider-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Passphrase Provider
         * @param {string} passphraseProviderName Name of the Passphrase Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (passphraseProviderName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passphraseProviderName' is not null or undefined
            assertParamExists('getSingle', 'passphraseProviderName', passphraseProviderName)
            const localVarPath = `/passphrase-providers/{passphrase-provider-name}`
                .replace(`{${"passphrase-provider-name"}}`, encodeURIComponent(String(passphraseProviderName !== undefined ? passphraseProviderName : `-passphrase-provider-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/passphrase-providers/{passphrase-provider-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Passphrase Provider objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllProviders: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/passphrase-providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/passphrase-providers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Passphrase Provider by name
         * @param {string} passphraseProviderName Name of the Passphrase Provider
         * @param {UpdateRequest} updateRequest Update an existing Passphrase Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (passphraseProviderName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passphraseProviderName' is not null or undefined
            assertParamExists('updateByName', 'passphraseProviderName', passphraseProviderName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/passphrase-providers/{passphrase-provider-name}`
                .replace(`{${"passphrase-provider-name"}}`, encodeURIComponent(String(passphraseProviderName !== undefined ? passphraseProviderName : `-passphrase-provider-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/passphrase-providers/{passphrase-provider-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PassphraseProviderApi - functional programming interface
 * @export
 */
export const PassphraseProviderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PassphraseProviderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Passphrase Provider to the config
         * @param {PassphraseProviderApiAddNewProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewProvider(requestParameters: PassphraseProviderApiAddNewProviderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddPassphraseProvider200Response>> {
            const addPassphraseProviderRequest: AddPassphraseProviderRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewProvider(addPassphraseProviderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Passphrase Provider
         * @param {PassphraseProviderApiDeleteProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProvider(requestParameters: PassphraseProviderApiDeleteProviderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProvider(requestParameters.passphraseProviderName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Passphrase Provider
         * @param {PassphraseProviderApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: PassphraseProviderApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddPassphraseProvider200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.passphraseProviderName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Passphrase Provider objects
         * @param {PassphraseProviderApiListAllProvidersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllProviders(requestParameters: PassphraseProviderApiListAllProvidersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassphraseProviderListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllProviders(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Passphrase Provider by name
         * @param {PassphraseProviderApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: PassphraseProviderApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddPassphraseProvider200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.passphraseProviderName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PassphraseProviderApi - factory interface
 * @export
 */
export const PassphraseProviderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PassphraseProviderApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Passphrase Provider to the config
         * @param {PassphraseProviderApiAddNewProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewProvider(requestParameters: PassphraseProviderApiAddNewProviderRequest, options?: AxiosRequestConfig): AxiosPromise<AddPassphraseProvider200Response> {
            return localVarFp.addNewProvider(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Passphrase Provider
         * @param {PassphraseProviderApiDeleteProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvider(requestParameters: PassphraseProviderApiDeleteProviderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProvider(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Passphrase Provider
         * @param {PassphraseProviderApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: PassphraseProviderApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddPassphraseProvider200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Passphrase Provider objects
         * @param {PassphraseProviderApiListAllProvidersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllProviders(requestParameters: PassphraseProviderApiListAllProvidersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PassphraseProviderListResponse> {
            return localVarFp.listAllProviders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Passphrase Provider by name
         * @param {PassphraseProviderApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: PassphraseProviderApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddPassphraseProvider200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewProvider operation in PassphraseProviderApi.
 * @export
 * @interface PassphraseProviderApiAddNewProviderRequest
 */
export type PassphraseProviderApiAddNewProviderRequest = {
    
} & AddPassphraseProviderRequest

/**
 * Request parameters for deleteProvider operation in PassphraseProviderApi.
 * @export
 * @interface PassphraseProviderApiDeleteProviderRequest
 */
export type PassphraseProviderApiDeleteProviderRequest = {
    
    /**
    * Name of the Passphrase Provider
    * @type {string}
    * @memberof PassphraseProviderApiDeleteProvider
    */
    readonly passphraseProviderName: string
    
}

/**
 * Request parameters for getSingle operation in PassphraseProviderApi.
 * @export
 * @interface PassphraseProviderApiGetSingleRequest
 */
export type PassphraseProviderApiGetSingleRequest = {
    
    /**
    * Name of the Passphrase Provider
    * @type {string}
    * @memberof PassphraseProviderApiGetSingle
    */
    readonly passphraseProviderName: string
    
}

/**
 * Request parameters for listAllProviders operation in PassphraseProviderApi.
 * @export
 * @interface PassphraseProviderApiListAllProvidersRequest
 */
export type PassphraseProviderApiListAllProvidersRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof PassphraseProviderApiListAllProviders
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in PassphraseProviderApi.
 * @export
 * @interface PassphraseProviderApiUpdateByNameRequest
 */
export type PassphraseProviderApiUpdateByNameRequest = {
    
    /**
    * Name of the Passphrase Provider
    * @type {string}
    * @memberof PassphraseProviderApiUpdateByName
    */
    readonly passphraseProviderName: string
    
} & UpdateRequest

/**
 * PassphraseProviderApiGenerated - object-oriented interface
 * @export
 * @class PassphraseProviderApiGenerated
 * @extends {BaseAPI}
 */
export class PassphraseProviderApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Passphrase Provider to the config
     * @param {PassphraseProviderApiAddNewProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassphraseProviderApiGenerated
     */
    public addNewProvider(requestParameters: PassphraseProviderApiAddNewProviderRequest, options?: AxiosRequestConfig) {
        return PassphraseProviderApiFp(this.configuration).addNewProvider(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Passphrase Provider
     * @param {PassphraseProviderApiDeleteProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassphraseProviderApiGenerated
     */
    public deleteProvider(requestParameters: PassphraseProviderApiDeleteProviderRequest, options?: AxiosRequestConfig) {
        return PassphraseProviderApiFp(this.configuration).deleteProvider(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Passphrase Provider
     * @param {PassphraseProviderApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassphraseProviderApiGenerated
     */
    public getSingle(requestParameters: PassphraseProviderApiGetSingleRequest, options?: AxiosRequestConfig) {
        return PassphraseProviderApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Passphrase Provider objects
     * @param {PassphraseProviderApiListAllProvidersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassphraseProviderApiGenerated
     */
    public listAllProviders(requestParameters: PassphraseProviderApiListAllProvidersRequest = {}, options?: AxiosRequestConfig) {
        return PassphraseProviderApiFp(this.configuration).listAllProviders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Passphrase Provider by name
     * @param {PassphraseProviderApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassphraseProviderApiGenerated
     */
    public updateByName(requestParameters: PassphraseProviderApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return PassphraseProviderApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
