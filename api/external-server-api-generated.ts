/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddExternalServer200Response } from '../models';
// @ts-ignore
import { AddExternalServerRequest } from '../models';
// @ts-ignore
import { EnumexternalServerAmazonAwsAuthenticationMethodProp } from '../models';
// @ts-ignore
import { EnumexternalServerDefunctConnectionResultCodeProp } from '../models';
// @ts-ignore
import { EnumexternalServerHttpHostnameVerificationMethodProp } from '../models';
// @ts-ignore
import { EnumexternalServerJdbcDriverTypeProp } from '../models';
// @ts-ignore
import { EnumexternalServerOracleUnifiedDirectoryConnectionSecurityProp } from '../models';
// @ts-ignore
import { EnumexternalServerSmtpSecurityProp } from '../models';
// @ts-ignore
import { EnumexternalServerTransactionIsolationLevelProp } from '../models';
// @ts-ignore
import { EnumexternalServerTransportMechanismProp } from '../models';
// @ts-ignore
import { EnumexternalServerVerifyCredentialsMethodProp } from '../models';
// @ts-ignore
import { EnumvaultExternalServerSchemaUrn } from '../models';
// @ts-ignore
import { ExternalServerListResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ExternalServerApi - axios parameter creator
 * @export
 */
export const ExternalServerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new External Server to the config
         * @param {AddExternalServerRequest} addExternalServerRequest Create a new External Server in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig: async (addExternalServerRequest: AddExternalServerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addExternalServerRequest' is not null or undefined
            assertParamExists('addNewConfig', 'addExternalServerRequest', addExternalServerRequest)
            const localVarPath = `/external-servers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addExternalServerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/external-servers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addExternalServerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a External Server
         * @param {string} externalServerName Name of the External Server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalServer: async (externalServerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalServerName' is not null or undefined
            assertParamExists('deleteExternalServer', 'externalServerName', externalServerName)
            const localVarPath = `/external-servers/{external-server-name}`
                .replace(`{${"external-server-name"}}`, encodeURIComponent(String(externalServerName !== undefined ? externalServerName : `-external-server-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/external-servers/{external-server-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single External Server
         * @param {string} externalServerName Name of the External Server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleServer: async (externalServerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalServerName' is not null or undefined
            assertParamExists('getSingleServer', 'externalServerName', externalServerName)
            const localVarPath = `/external-servers/{external-server-name}`
                .replace(`{${"external-server-name"}}`, encodeURIComponent(String(externalServerName !== undefined ? externalServerName : `-external-server-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/external-servers/{external-server-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all External Server objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/external-servers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/external-servers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing External Server by name
         * @param {string} externalServerName Name of the External Server
         * @param {UpdateRequest} updateRequest Update an existing External Server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (externalServerName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalServerName' is not null or undefined
            assertParamExists('updateByName', 'externalServerName', externalServerName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/external-servers/{external-server-name}`
                .replace(`{${"external-server-name"}}`, encodeURIComponent(String(externalServerName !== undefined ? externalServerName : `-external-server-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/external-servers/{external-server-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalServerApi - functional programming interface
 * @export
 */
export const ExternalServerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalServerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new External Server to the config
         * @param {ExternalServerApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewConfig(requestParameters: ExternalServerApiAddNewConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddExternalServer200Response>> {
            const addExternalServerRequest: AddExternalServerRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewConfig(addExternalServerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a External Server
         * @param {ExternalServerApiDeleteExternalServerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExternalServer(requestParameters: ExternalServerApiDeleteExternalServerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExternalServer(requestParameters.externalServerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single External Server
         * @param {ExternalServerApiGetSingleServerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleServer(requestParameters: ExternalServerApiGetSingleServerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddExternalServer200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleServer(requestParameters.externalServerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all External Server objects
         * @param {ExternalServerApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listObjects(requestParameters: ExternalServerApiListObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalServerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing External Server by name
         * @param {ExternalServerApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ExternalServerApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddExternalServer200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.externalServerName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExternalServerApi - factory interface
 * @export
 */
export const ExternalServerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalServerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new External Server to the config
         * @param {ExternalServerApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig(requestParameters: ExternalServerApiAddNewConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AddExternalServer200Response> {
            return localVarFp.addNewConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a External Server
         * @param {ExternalServerApiDeleteExternalServerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalServer(requestParameters: ExternalServerApiDeleteExternalServerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExternalServer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single External Server
         * @param {ExternalServerApiGetSingleServerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleServer(requestParameters: ExternalServerApiGetSingleServerRequest, options?: AxiosRequestConfig): AxiosPromise<AddExternalServer200Response> {
            return localVarFp.getSingleServer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all External Server objects
         * @param {ExternalServerApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects(requestParameters: ExternalServerApiListObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ExternalServerListResponse> {
            return localVarFp.listObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing External Server by name
         * @param {ExternalServerApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ExternalServerApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddExternalServer200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewConfig operation in ExternalServerApi.
 * @export
 * @interface ExternalServerApiAddNewConfigRequest
 */
export type ExternalServerApiAddNewConfigRequest = {
    
} & AddExternalServerRequest

/**
 * Request parameters for deleteExternalServer operation in ExternalServerApi.
 * @export
 * @interface ExternalServerApiDeleteExternalServerRequest
 */
export type ExternalServerApiDeleteExternalServerRequest = {
    
    /**
    * Name of the External Server
    * @type {string}
    * @memberof ExternalServerApiDeleteExternalServer
    */
    readonly externalServerName: string
    
}

/**
 * Request parameters for getSingleServer operation in ExternalServerApi.
 * @export
 * @interface ExternalServerApiGetSingleServerRequest
 */
export type ExternalServerApiGetSingleServerRequest = {
    
    /**
    * Name of the External Server
    * @type {string}
    * @memberof ExternalServerApiGetSingleServer
    */
    readonly externalServerName: string
    
}

/**
 * Request parameters for listObjects operation in ExternalServerApi.
 * @export
 * @interface ExternalServerApiListObjectsRequest
 */
export type ExternalServerApiListObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ExternalServerApiListObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in ExternalServerApi.
 * @export
 * @interface ExternalServerApiUpdateByNameRequest
 */
export type ExternalServerApiUpdateByNameRequest = {
    
    /**
    * Name of the External Server
    * @type {string}
    * @memberof ExternalServerApiUpdateByName
    */
    readonly externalServerName: string
    
} & UpdateRequest

/**
 * ExternalServerApiGenerated - object-oriented interface
 * @export
 * @class ExternalServerApiGenerated
 * @extends {BaseAPI}
 */
export class ExternalServerApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new External Server to the config
     * @param {ExternalServerApiAddNewConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalServerApiGenerated
     */
    public addNewConfig(requestParameters: ExternalServerApiAddNewConfigRequest, options?: AxiosRequestConfig) {
        return ExternalServerApiFp(this.configuration).addNewConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a External Server
     * @param {ExternalServerApiDeleteExternalServerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalServerApiGenerated
     */
    public deleteExternalServer(requestParameters: ExternalServerApiDeleteExternalServerRequest, options?: AxiosRequestConfig) {
        return ExternalServerApiFp(this.configuration).deleteExternalServer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single External Server
     * @param {ExternalServerApiGetSingleServerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalServerApiGenerated
     */
    public getSingleServer(requestParameters: ExternalServerApiGetSingleServerRequest, options?: AxiosRequestConfig) {
        return ExternalServerApiFp(this.configuration).getSingleServer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all External Server objects
     * @param {ExternalServerApiListObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalServerApiGenerated
     */
    public listObjects(requestParameters: ExternalServerApiListObjectsRequest = {}, options?: AxiosRequestConfig) {
        return ExternalServerApiFp(this.configuration).listObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing External Server by name
     * @param {ExternalServerApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalServerApiGenerated
     */
    public updateByName(requestParameters: ExternalServerApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ExternalServerApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
