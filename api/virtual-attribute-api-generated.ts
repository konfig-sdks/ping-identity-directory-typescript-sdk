/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddVirtualAttribute200Response } from '../models';
// @ts-ignore
import { AddVirtualAttributeRequest } from '../models';
// @ts-ignore
import { EnumthirdPartyVirtualAttributeSchemaUrn } from '../models';
// @ts-ignore
import { EnumvirtualAttributeConflictBehaviorProp } from '../models';
// @ts-ignore
import { EnumvirtualAttributeJoinBaseDNTypeProp } from '../models';
// @ts-ignore
import { EnumvirtualAttributeJoinScopeProp } from '../models';
// @ts-ignore
import { EnumvirtualAttributeMultipleVirtualAttributeMergeBehaviorProp } from '../models';
// @ts-ignore
import { EnumvirtualAttributeRewriteSearchFiltersProp } from '../models';
// @ts-ignore
import { GetVirtualAttribute200Response } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
// @ts-ignore
import { VirtualAttributeListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VirtualAttributeApi - axios parameter creator
 * @export
 */
export const VirtualAttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Virtual Attribute to the config
         * @param {AddVirtualAttributeRequest} addVirtualAttributeRequest Create a new Virtual Attribute in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig: async (addVirtualAttributeRequest: AddVirtualAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addVirtualAttributeRequest' is not null or undefined
            assertParamExists('addNewToConfig', 'addVirtualAttributeRequest', addVirtualAttributeRequest)
            const localVarPath = `/virtual-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addVirtualAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/virtual-attributes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addVirtualAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Virtual Attribute
         * @param {string} virtualAttributeName Name of the Virtual Attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualAttribute: async (virtualAttributeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'virtualAttributeName' is not null or undefined
            assertParamExists('deleteVirtualAttribute', 'virtualAttributeName', virtualAttributeName)
            const localVarPath = `/virtual-attributes/{virtual-attribute-name}`
                .replace(`{${"virtual-attribute-name"}}`, encodeURIComponent(String(virtualAttributeName !== undefined ? virtualAttributeName : `-virtual-attribute-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/virtual-attributes/{virtual-attribute-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Virtual Attribute objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/virtual-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/virtual-attributes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Virtual Attribute
         * @param {string} virtualAttributeName Name of the Virtual Attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (virtualAttributeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'virtualAttributeName' is not null or undefined
            assertParamExists('getSingle', 'virtualAttributeName', virtualAttributeName)
            const localVarPath = `/virtual-attributes/{virtual-attribute-name}`
                .replace(`{${"virtual-attribute-name"}}`, encodeURIComponent(String(virtualAttributeName !== undefined ? virtualAttributeName : `-virtual-attribute-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/virtual-attributes/{virtual-attribute-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Virtual Attribute by name
         * @param {string} virtualAttributeName Name of the Virtual Attribute
         * @param {UpdateRequest} updateRequest Update an existing Virtual Attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (virtualAttributeName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'virtualAttributeName' is not null or undefined
            assertParamExists('updateByName', 'virtualAttributeName', virtualAttributeName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/virtual-attributes/{virtual-attribute-name}`
                .replace(`{${"virtual-attribute-name"}}`, encodeURIComponent(String(virtualAttributeName !== undefined ? virtualAttributeName : `-virtual-attribute-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/virtual-attributes/{virtual-attribute-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VirtualAttributeApi - functional programming interface
 * @export
 */
export const VirtualAttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VirtualAttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Virtual Attribute to the config
         * @param {VirtualAttributeApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewToConfig(requestParameters: VirtualAttributeApiAddNewToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddVirtualAttribute200Response>> {
            const addVirtualAttributeRequest: AddVirtualAttributeRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewToConfig(addVirtualAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Virtual Attribute
         * @param {VirtualAttributeApiDeleteVirtualAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVirtualAttribute(requestParameters: VirtualAttributeApiDeleteVirtualAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVirtualAttribute(requestParameters.virtualAttributeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Virtual Attribute objects
         * @param {VirtualAttributeApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllObjects(requestParameters: VirtualAttributeApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VirtualAttributeListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Virtual Attribute
         * @param {VirtualAttributeApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: VirtualAttributeApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVirtualAttribute200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.virtualAttributeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Virtual Attribute by name
         * @param {VirtualAttributeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: VirtualAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVirtualAttribute200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.virtualAttributeName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VirtualAttributeApi - factory interface
 * @export
 */
export const VirtualAttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VirtualAttributeApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Virtual Attribute to the config
         * @param {VirtualAttributeApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig(requestParameters: VirtualAttributeApiAddNewToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AddVirtualAttribute200Response> {
            return localVarFp.addNewToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Virtual Attribute
         * @param {VirtualAttributeApiDeleteVirtualAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualAttribute(requestParameters: VirtualAttributeApiDeleteVirtualAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteVirtualAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Virtual Attribute objects
         * @param {VirtualAttributeApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects(requestParameters: VirtualAttributeApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VirtualAttributeListResponse> {
            return localVarFp.getAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Virtual Attribute
         * @param {VirtualAttributeApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: VirtualAttributeApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<GetVirtualAttribute200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Virtual Attribute by name
         * @param {VirtualAttributeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: VirtualAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<GetVirtualAttribute200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewToConfig operation in VirtualAttributeApi.
 * @export
 * @interface VirtualAttributeApiAddNewToConfigRequest
 */
export type VirtualAttributeApiAddNewToConfigRequest = {
    
} & AddVirtualAttributeRequest

/**
 * Request parameters for deleteVirtualAttribute operation in VirtualAttributeApi.
 * @export
 * @interface VirtualAttributeApiDeleteVirtualAttributeRequest
 */
export type VirtualAttributeApiDeleteVirtualAttributeRequest = {
    
    /**
    * Name of the Virtual Attribute
    * @type {string}
    * @memberof VirtualAttributeApiDeleteVirtualAttribute
    */
    readonly virtualAttributeName: string
    
}

/**
 * Request parameters for getAllObjects operation in VirtualAttributeApi.
 * @export
 * @interface VirtualAttributeApiGetAllObjectsRequest
 */
export type VirtualAttributeApiGetAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof VirtualAttributeApiGetAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingle operation in VirtualAttributeApi.
 * @export
 * @interface VirtualAttributeApiGetSingleRequest
 */
export type VirtualAttributeApiGetSingleRequest = {
    
    /**
    * Name of the Virtual Attribute
    * @type {string}
    * @memberof VirtualAttributeApiGetSingle
    */
    readonly virtualAttributeName: string
    
}

/**
 * Request parameters for updateByName operation in VirtualAttributeApi.
 * @export
 * @interface VirtualAttributeApiUpdateByNameRequest
 */
export type VirtualAttributeApiUpdateByNameRequest = {
    
    /**
    * Name of the Virtual Attribute
    * @type {string}
    * @memberof VirtualAttributeApiUpdateByName
    */
    readonly virtualAttributeName: string
    
} & UpdateRequest

/**
 * VirtualAttributeApiGenerated - object-oriented interface
 * @export
 * @class VirtualAttributeApiGenerated
 * @extends {BaseAPI}
 */
export class VirtualAttributeApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Virtual Attribute to the config
     * @param {VirtualAttributeApiAddNewToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualAttributeApiGenerated
     */
    public addNewToConfig(requestParameters: VirtualAttributeApiAddNewToConfigRequest, options?: AxiosRequestConfig) {
        return VirtualAttributeApiFp(this.configuration).addNewToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Virtual Attribute
     * @param {VirtualAttributeApiDeleteVirtualAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualAttributeApiGenerated
     */
    public deleteVirtualAttribute(requestParameters: VirtualAttributeApiDeleteVirtualAttributeRequest, options?: AxiosRequestConfig) {
        return VirtualAttributeApiFp(this.configuration).deleteVirtualAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Virtual Attribute objects
     * @param {VirtualAttributeApiGetAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualAttributeApiGenerated
     */
    public getAllObjects(requestParameters: VirtualAttributeApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return VirtualAttributeApiFp(this.configuration).getAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Virtual Attribute
     * @param {VirtualAttributeApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualAttributeApiGenerated
     */
    public getSingle(requestParameters: VirtualAttributeApiGetSingleRequest, options?: AxiosRequestConfig) {
        return VirtualAttributeApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Virtual Attribute by name
     * @param {VirtualAttributeApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualAttributeApiGenerated
     */
    public updateByName(requestParameters: VirtualAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return VirtualAttributeApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
