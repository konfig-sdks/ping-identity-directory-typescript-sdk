/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddPasswordGenerator200Response } from '../models';
// @ts-ignore
import { AddPasswordGeneratorRequest } from '../models';
// @ts-ignore
import { EnumthirdPartyPasswordGeneratorSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { PasswordGeneratorListResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PasswordGeneratorApi - axios parameter creator
 * @export
 */
export const PasswordGeneratorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Password Generator to the config
         * @param {AddPasswordGeneratorRequest} addPasswordGeneratorRequest Create a new Password Generator in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig: async (addPasswordGeneratorRequest: AddPasswordGeneratorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addPasswordGeneratorRequest' is not null or undefined
            assertParamExists('addNewToConfig', 'addPasswordGeneratorRequest', addPasswordGeneratorRequest)
            const localVarPath = `/password-generators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addPasswordGeneratorRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/password-generators',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addPasswordGeneratorRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Password Generator
         * @param {string} passwordGeneratorName Name of the Password Generator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGenerator: async (passwordGeneratorName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordGeneratorName' is not null or undefined
            assertParamExists('deleteGenerator', 'passwordGeneratorName', passwordGeneratorName)
            const localVarPath = `/password-generators/{password-generator-name}`
                .replace(`{${"password-generator-name"}}`, encodeURIComponent(String(passwordGeneratorName !== undefined ? passwordGeneratorName : `-password-generator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/password-generators/{password-generator-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Password Generator
         * @param {string} passwordGeneratorName Name of the Password Generator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleGenerator: async (passwordGeneratorName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordGeneratorName' is not null or undefined
            assertParamExists('getSingleGenerator', 'passwordGeneratorName', passwordGeneratorName)
            const localVarPath = `/password-generators/{password-generator-name}`
                .replace(`{${"password-generator-name"}}`, encodeURIComponent(String(passwordGeneratorName !== undefined ? passwordGeneratorName : `-password-generator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/password-generators/{password-generator-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Password Generator objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllGenerators: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/password-generators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/password-generators',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Password Generator by name
         * @param {string} passwordGeneratorName Name of the Password Generator
         * @param {UpdateRequest} updateRequest Update an existing Password Generator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (passwordGeneratorName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordGeneratorName' is not null or undefined
            assertParamExists('updateByName', 'passwordGeneratorName', passwordGeneratorName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/password-generators/{password-generator-name}`
                .replace(`{${"password-generator-name"}}`, encodeURIComponent(String(passwordGeneratorName !== undefined ? passwordGeneratorName : `-password-generator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/password-generators/{password-generator-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PasswordGeneratorApi - functional programming interface
 * @export
 */
export const PasswordGeneratorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PasswordGeneratorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Password Generator to the config
         * @param {PasswordGeneratorApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewToConfig(requestParameters: PasswordGeneratorApiAddNewToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddPasswordGenerator200Response>> {
            const addPasswordGeneratorRequest: AddPasswordGeneratorRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewToConfig(addPasswordGeneratorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Password Generator
         * @param {PasswordGeneratorApiDeleteGeneratorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGenerator(requestParameters: PasswordGeneratorApiDeleteGeneratorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGenerator(requestParameters.passwordGeneratorName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Password Generator
         * @param {PasswordGeneratorApiGetSingleGeneratorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleGenerator(requestParameters: PasswordGeneratorApiGetSingleGeneratorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddPasswordGenerator200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleGenerator(requestParameters.passwordGeneratorName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Password Generator objects
         * @param {PasswordGeneratorApiListAllGeneratorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllGenerators(requestParameters: PasswordGeneratorApiListAllGeneratorsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordGeneratorListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllGenerators(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Password Generator by name
         * @param {PasswordGeneratorApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: PasswordGeneratorApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddPasswordGenerator200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.passwordGeneratorName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PasswordGeneratorApi - factory interface
 * @export
 */
export const PasswordGeneratorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PasswordGeneratorApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Password Generator to the config
         * @param {PasswordGeneratorApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig(requestParameters: PasswordGeneratorApiAddNewToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AddPasswordGenerator200Response> {
            return localVarFp.addNewToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Password Generator
         * @param {PasswordGeneratorApiDeleteGeneratorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGenerator(requestParameters: PasswordGeneratorApiDeleteGeneratorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteGenerator(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Password Generator
         * @param {PasswordGeneratorApiGetSingleGeneratorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleGenerator(requestParameters: PasswordGeneratorApiGetSingleGeneratorRequest, options?: AxiosRequestConfig): AxiosPromise<AddPasswordGenerator200Response> {
            return localVarFp.getSingleGenerator(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Password Generator objects
         * @param {PasswordGeneratorApiListAllGeneratorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllGenerators(requestParameters: PasswordGeneratorApiListAllGeneratorsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PasswordGeneratorListResponse> {
            return localVarFp.listAllGenerators(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Password Generator by name
         * @param {PasswordGeneratorApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: PasswordGeneratorApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddPasswordGenerator200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewToConfig operation in PasswordGeneratorApi.
 * @export
 * @interface PasswordGeneratorApiAddNewToConfigRequest
 */
export type PasswordGeneratorApiAddNewToConfigRequest = {
    
} & AddPasswordGeneratorRequest

/**
 * Request parameters for deleteGenerator operation in PasswordGeneratorApi.
 * @export
 * @interface PasswordGeneratorApiDeleteGeneratorRequest
 */
export type PasswordGeneratorApiDeleteGeneratorRequest = {
    
    /**
    * Name of the Password Generator
    * @type {string}
    * @memberof PasswordGeneratorApiDeleteGenerator
    */
    readonly passwordGeneratorName: string
    
}

/**
 * Request parameters for getSingleGenerator operation in PasswordGeneratorApi.
 * @export
 * @interface PasswordGeneratorApiGetSingleGeneratorRequest
 */
export type PasswordGeneratorApiGetSingleGeneratorRequest = {
    
    /**
    * Name of the Password Generator
    * @type {string}
    * @memberof PasswordGeneratorApiGetSingleGenerator
    */
    readonly passwordGeneratorName: string
    
}

/**
 * Request parameters for listAllGenerators operation in PasswordGeneratorApi.
 * @export
 * @interface PasswordGeneratorApiListAllGeneratorsRequest
 */
export type PasswordGeneratorApiListAllGeneratorsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof PasswordGeneratorApiListAllGenerators
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in PasswordGeneratorApi.
 * @export
 * @interface PasswordGeneratorApiUpdateByNameRequest
 */
export type PasswordGeneratorApiUpdateByNameRequest = {
    
    /**
    * Name of the Password Generator
    * @type {string}
    * @memberof PasswordGeneratorApiUpdateByName
    */
    readonly passwordGeneratorName: string
    
} & UpdateRequest

/**
 * PasswordGeneratorApiGenerated - object-oriented interface
 * @export
 * @class PasswordGeneratorApiGenerated
 * @extends {BaseAPI}
 */
export class PasswordGeneratorApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Password Generator to the config
     * @param {PasswordGeneratorApiAddNewToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordGeneratorApiGenerated
     */
    public addNewToConfig(requestParameters: PasswordGeneratorApiAddNewToConfigRequest, options?: AxiosRequestConfig) {
        return PasswordGeneratorApiFp(this.configuration).addNewToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Password Generator
     * @param {PasswordGeneratorApiDeleteGeneratorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordGeneratorApiGenerated
     */
    public deleteGenerator(requestParameters: PasswordGeneratorApiDeleteGeneratorRequest, options?: AxiosRequestConfig) {
        return PasswordGeneratorApiFp(this.configuration).deleteGenerator(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Password Generator
     * @param {PasswordGeneratorApiGetSingleGeneratorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordGeneratorApiGenerated
     */
    public getSingleGenerator(requestParameters: PasswordGeneratorApiGetSingleGeneratorRequest, options?: AxiosRequestConfig) {
        return PasswordGeneratorApiFp(this.configuration).getSingleGenerator(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Password Generator objects
     * @param {PasswordGeneratorApiListAllGeneratorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordGeneratorApiGenerated
     */
    public listAllGenerators(requestParameters: PasswordGeneratorApiListAllGeneratorsRequest = {}, options?: AxiosRequestConfig) {
        return PasswordGeneratorApiFp(this.configuration).listAllGenerators(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Password Generator by name
     * @param {PasswordGeneratorApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordGeneratorApiGenerated
     */
    public updateByName(requestParameters: PasswordGeneratorApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return PasswordGeneratorApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
