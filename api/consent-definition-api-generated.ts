/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddConsentDefinitionRequest } from '../models';
// @ts-ignore
import { ConsentDefinitionListResponse } from '../models';
// @ts-ignore
import { ConsentDefinitionResponse } from '../models';
// @ts-ignore
import { EnumconsentDefinitionSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConsentDefinitionApi - axios parameter creator
 * @export
 */
export const ConsentDefinitionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Consent Definition to the config
         * @param {AddConsentDefinitionRequest} addConsentDefinitionRequest Create a new Consent Definition in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig: async (addConsentDefinitionRequest: AddConsentDefinitionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addConsentDefinitionRequest' is not null or undefined
            assertParamExists('addNewToConfig', 'addConsentDefinitionRequest', addConsentDefinitionRequest)
            const localVarPath = `/consent-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addConsentDefinitionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/consent-definitions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addConsentDefinitionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Consent Definition
         * @param {string} consentDefinitionName Name of the Consent Definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConsentDefinition: async (consentDefinitionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentDefinitionName' is not null or undefined
            assertParamExists('deleteConsentDefinition', 'consentDefinitionName', consentDefinitionName)
            const localVarPath = `/consent-definitions/{consent-definition-name}`
                .replace(`{${"consent-definition-name"}}`, encodeURIComponent(String(consentDefinitionName !== undefined ? consentDefinitionName : `-consent-definition-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/consent-definitions/{consent-definition-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Consent Definition
         * @param {string} consentDefinitionName Name of the Consent Definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleConsentDefinition: async (consentDefinitionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentDefinitionName' is not null or undefined
            assertParamExists('getSingleConsentDefinition', 'consentDefinitionName', consentDefinitionName)
            const localVarPath = `/consent-definitions/{consent-definition-name}`
                .replace(`{${"consent-definition-name"}}`, encodeURIComponent(String(consentDefinitionName !== undefined ? consentDefinitionName : `-consent-definition-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/consent-definitions/{consent-definition-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Consent Definition objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/consent-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/consent-definitions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Consent Definition by name
         * @param {string} consentDefinitionName Name of the Consent Definition
         * @param {UpdateRequest} updateRequest Update an existing Consent Definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (consentDefinitionName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentDefinitionName' is not null or undefined
            assertParamExists('updateByName', 'consentDefinitionName', consentDefinitionName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/consent-definitions/{consent-definition-name}`
                .replace(`{${"consent-definition-name"}}`, encodeURIComponent(String(consentDefinitionName !== undefined ? consentDefinitionName : `-consent-definition-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/consent-definitions/{consent-definition-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsentDefinitionApi - functional programming interface
 * @export
 */
export const ConsentDefinitionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsentDefinitionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Consent Definition to the config
         * @param {ConsentDefinitionApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewToConfig(requestParameters: ConsentDefinitionApiAddNewToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentDefinitionResponse>> {
            const addConsentDefinitionRequest: AddConsentDefinitionRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewToConfig(addConsentDefinitionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Consent Definition
         * @param {ConsentDefinitionApiDeleteConsentDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConsentDefinition(requestParameters: ConsentDefinitionApiDeleteConsentDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConsentDefinition(requestParameters.consentDefinitionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Consent Definition
         * @param {ConsentDefinitionApiGetSingleConsentDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleConsentDefinition(requestParameters: ConsentDefinitionApiGetSingleConsentDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentDefinitionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleConsentDefinition(requestParameters.consentDefinitionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Consent Definition objects
         * @param {ConsentDefinitionApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: ConsentDefinitionApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentDefinitionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Consent Definition by name
         * @param {ConsentDefinitionApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ConsentDefinitionApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentDefinitionResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.consentDefinitionName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConsentDefinitionApi - factory interface
 * @export
 */
export const ConsentDefinitionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsentDefinitionApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Consent Definition to the config
         * @param {ConsentDefinitionApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig(requestParameters: ConsentDefinitionApiAddNewToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<ConsentDefinitionResponse> {
            return localVarFp.addNewToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Consent Definition
         * @param {ConsentDefinitionApiDeleteConsentDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConsentDefinition(requestParameters: ConsentDefinitionApiDeleteConsentDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteConsentDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Consent Definition
         * @param {ConsentDefinitionApiGetSingleConsentDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleConsentDefinition(requestParameters: ConsentDefinitionApiGetSingleConsentDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<ConsentDefinitionResponse> {
            return localVarFp.getSingleConsentDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Consent Definition objects
         * @param {ConsentDefinitionApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: ConsentDefinitionApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ConsentDefinitionListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Consent Definition by name
         * @param {ConsentDefinitionApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ConsentDefinitionApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<ConsentDefinitionResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewToConfig operation in ConsentDefinitionApi.
 * @export
 * @interface ConsentDefinitionApiAddNewToConfigRequest
 */
export type ConsentDefinitionApiAddNewToConfigRequest = {
    
} & AddConsentDefinitionRequest

/**
 * Request parameters for deleteConsentDefinition operation in ConsentDefinitionApi.
 * @export
 * @interface ConsentDefinitionApiDeleteConsentDefinitionRequest
 */
export type ConsentDefinitionApiDeleteConsentDefinitionRequest = {
    
    /**
    * Name of the Consent Definition
    * @type {string}
    * @memberof ConsentDefinitionApiDeleteConsentDefinition
    */
    readonly consentDefinitionName: string
    
}

/**
 * Request parameters for getSingleConsentDefinition operation in ConsentDefinitionApi.
 * @export
 * @interface ConsentDefinitionApiGetSingleConsentDefinitionRequest
 */
export type ConsentDefinitionApiGetSingleConsentDefinitionRequest = {
    
    /**
    * Name of the Consent Definition
    * @type {string}
    * @memberof ConsentDefinitionApiGetSingleConsentDefinition
    */
    readonly consentDefinitionName: string
    
}

/**
 * Request parameters for listAllObjects operation in ConsentDefinitionApi.
 * @export
 * @interface ConsentDefinitionApiListAllObjectsRequest
 */
export type ConsentDefinitionApiListAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ConsentDefinitionApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in ConsentDefinitionApi.
 * @export
 * @interface ConsentDefinitionApiUpdateByNameRequest
 */
export type ConsentDefinitionApiUpdateByNameRequest = {
    
    /**
    * Name of the Consent Definition
    * @type {string}
    * @memberof ConsentDefinitionApiUpdateByName
    */
    readonly consentDefinitionName: string
    
} & UpdateRequest

/**
 * ConsentDefinitionApiGenerated - object-oriented interface
 * @export
 * @class ConsentDefinitionApiGenerated
 * @extends {BaseAPI}
 */
export class ConsentDefinitionApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Consent Definition to the config
     * @param {ConsentDefinitionApiAddNewToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentDefinitionApiGenerated
     */
    public addNewToConfig(requestParameters: ConsentDefinitionApiAddNewToConfigRequest, options?: AxiosRequestConfig) {
        return ConsentDefinitionApiFp(this.configuration).addNewToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Consent Definition
     * @param {ConsentDefinitionApiDeleteConsentDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentDefinitionApiGenerated
     */
    public deleteConsentDefinition(requestParameters: ConsentDefinitionApiDeleteConsentDefinitionRequest, options?: AxiosRequestConfig) {
        return ConsentDefinitionApiFp(this.configuration).deleteConsentDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Consent Definition
     * @param {ConsentDefinitionApiGetSingleConsentDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentDefinitionApiGenerated
     */
    public getSingleConsentDefinition(requestParameters: ConsentDefinitionApiGetSingleConsentDefinitionRequest, options?: AxiosRequestConfig) {
        return ConsentDefinitionApiFp(this.configuration).getSingleConsentDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Consent Definition objects
     * @param {ConsentDefinitionApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentDefinitionApiGenerated
     */
    public listAllObjects(requestParameters: ConsentDefinitionApiListAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return ConsentDefinitionApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Consent Definition by name
     * @param {ConsentDefinitionApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentDefinitionApiGenerated
     */
    public updateByName(requestParameters: ConsentDefinitionApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ConsentDefinitionApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
