/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddLogFileRotationListener200Response } from '../models';
// @ts-ignore
import { AddLogFileRotationListenerRequest } from '../models';
// @ts-ignore
import { EnumthirdPartyLogFileRotationListenerSchemaUrn } from '../models';
// @ts-ignore
import { LogFileRotationListenerListResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LogFileRotationListenerApi - axios parameter creator
 * @export
 */
export const LogFileRotationListenerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Log File Rotation Listener to the config
         * @param {AddLogFileRotationListenerRequest} addLogFileRotationListenerRequest Create a new Log File Rotation Listener in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewListener: async (addLogFileRotationListenerRequest: AddLogFileRotationListenerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addLogFileRotationListenerRequest' is not null or undefined
            assertParamExists('addNewListener', 'addLogFileRotationListenerRequest', addLogFileRotationListenerRequest)
            const localVarPath = `/log-file-rotation-listeners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addLogFileRotationListenerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-file-rotation-listeners',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addLogFileRotationListenerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Log File Rotation Listener
         * @param {string} logFileRotationListenerName Name of the Log File Rotation Listener
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLogRotationListener: async (logFileRotationListenerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logFileRotationListenerName' is not null or undefined
            assertParamExists('deleteLogRotationListener', 'logFileRotationListenerName', logFileRotationListenerName)
            const localVarPath = `/log-file-rotation-listeners/{log-file-rotation-listener-name}`
                .replace(`{${"log-file-rotation-listener-name"}}`, encodeURIComponent(String(logFileRotationListenerName !== undefined ? logFileRotationListenerName : `-log-file-rotation-listener-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-file-rotation-listeners/{log-file-rotation-listener-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Log File Rotation Listener
         * @param {string} logFileRotationListenerName Name of the Log File Rotation Listener
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (logFileRotationListenerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logFileRotationListenerName' is not null or undefined
            assertParamExists('getSingle', 'logFileRotationListenerName', logFileRotationListenerName)
            const localVarPath = `/log-file-rotation-listeners/{log-file-rotation-listener-name}`
                .replace(`{${"log-file-rotation-listener-name"}}`, encodeURIComponent(String(logFileRotationListenerName !== undefined ? logFileRotationListenerName : `-log-file-rotation-listener-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-file-rotation-listeners/{log-file-rotation-listener-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Log File Rotation Listener objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogRotationListeners: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-file-rotation-listeners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-file-rotation-listeners',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Log File Rotation Listener by name
         * @param {string} logFileRotationListenerName Name of the Log File Rotation Listener
         * @param {UpdateRequest} updateRequest Update an existing Log File Rotation Listener
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (logFileRotationListenerName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logFileRotationListenerName' is not null or undefined
            assertParamExists('updateByName', 'logFileRotationListenerName', logFileRotationListenerName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/log-file-rotation-listeners/{log-file-rotation-listener-name}`
                .replace(`{${"log-file-rotation-listener-name"}}`, encodeURIComponent(String(logFileRotationListenerName !== undefined ? logFileRotationListenerName : `-log-file-rotation-listener-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-file-rotation-listeners/{log-file-rotation-listener-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogFileRotationListenerApi - functional programming interface
 * @export
 */
export const LogFileRotationListenerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogFileRotationListenerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Log File Rotation Listener to the config
         * @param {LogFileRotationListenerApiAddNewListenerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewListener(requestParameters: LogFileRotationListenerApiAddNewListenerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddLogFileRotationListener200Response>> {
            const addLogFileRotationListenerRequest: AddLogFileRotationListenerRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewListener(addLogFileRotationListenerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Log File Rotation Listener
         * @param {LogFileRotationListenerApiDeleteLogRotationListenerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLogRotationListener(requestParameters: LogFileRotationListenerApiDeleteLogRotationListenerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLogRotationListener(requestParameters.logFileRotationListenerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Log File Rotation Listener
         * @param {LogFileRotationListenerApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: LogFileRotationListenerApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddLogFileRotationListener200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.logFileRotationListenerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Log File Rotation Listener objects
         * @param {LogFileRotationListenerApiListLogRotationListenersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLogRotationListeners(requestParameters: LogFileRotationListenerApiListLogRotationListenersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogFileRotationListenerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLogRotationListeners(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Log File Rotation Listener by name
         * @param {LogFileRotationListenerApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: LogFileRotationListenerApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddLogFileRotationListener200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.logFileRotationListenerName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogFileRotationListenerApi - factory interface
 * @export
 */
export const LogFileRotationListenerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogFileRotationListenerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Log File Rotation Listener to the config
         * @param {LogFileRotationListenerApiAddNewListenerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewListener(requestParameters: LogFileRotationListenerApiAddNewListenerRequest, options?: AxiosRequestConfig): AxiosPromise<AddLogFileRotationListener200Response> {
            return localVarFp.addNewListener(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Log File Rotation Listener
         * @param {LogFileRotationListenerApiDeleteLogRotationListenerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLogRotationListener(requestParameters: LogFileRotationListenerApiDeleteLogRotationListenerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteLogRotationListener(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Log File Rotation Listener
         * @param {LogFileRotationListenerApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: LogFileRotationListenerApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddLogFileRotationListener200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Log File Rotation Listener objects
         * @param {LogFileRotationListenerApiListLogRotationListenersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogRotationListeners(requestParameters: LogFileRotationListenerApiListLogRotationListenersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LogFileRotationListenerListResponse> {
            return localVarFp.listLogRotationListeners(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Log File Rotation Listener by name
         * @param {LogFileRotationListenerApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: LogFileRotationListenerApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddLogFileRotationListener200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewListener operation in LogFileRotationListenerApi.
 * @export
 * @interface LogFileRotationListenerApiAddNewListenerRequest
 */
export type LogFileRotationListenerApiAddNewListenerRequest = {
    
} & AddLogFileRotationListenerRequest

/**
 * Request parameters for deleteLogRotationListener operation in LogFileRotationListenerApi.
 * @export
 * @interface LogFileRotationListenerApiDeleteLogRotationListenerRequest
 */
export type LogFileRotationListenerApiDeleteLogRotationListenerRequest = {
    
    /**
    * Name of the Log File Rotation Listener
    * @type {string}
    * @memberof LogFileRotationListenerApiDeleteLogRotationListener
    */
    readonly logFileRotationListenerName: string
    
}

/**
 * Request parameters for getSingle operation in LogFileRotationListenerApi.
 * @export
 * @interface LogFileRotationListenerApiGetSingleRequest
 */
export type LogFileRotationListenerApiGetSingleRequest = {
    
    /**
    * Name of the Log File Rotation Listener
    * @type {string}
    * @memberof LogFileRotationListenerApiGetSingle
    */
    readonly logFileRotationListenerName: string
    
}

/**
 * Request parameters for listLogRotationListeners operation in LogFileRotationListenerApi.
 * @export
 * @interface LogFileRotationListenerApiListLogRotationListenersRequest
 */
export type LogFileRotationListenerApiListLogRotationListenersRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof LogFileRotationListenerApiListLogRotationListeners
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in LogFileRotationListenerApi.
 * @export
 * @interface LogFileRotationListenerApiUpdateByNameRequest
 */
export type LogFileRotationListenerApiUpdateByNameRequest = {
    
    /**
    * Name of the Log File Rotation Listener
    * @type {string}
    * @memberof LogFileRotationListenerApiUpdateByName
    */
    readonly logFileRotationListenerName: string
    
} & UpdateRequest

/**
 * LogFileRotationListenerApiGenerated - object-oriented interface
 * @export
 * @class LogFileRotationListenerApiGenerated
 * @extends {BaseAPI}
 */
export class LogFileRotationListenerApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Log File Rotation Listener to the config
     * @param {LogFileRotationListenerApiAddNewListenerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFileRotationListenerApiGenerated
     */
    public addNewListener(requestParameters: LogFileRotationListenerApiAddNewListenerRequest, options?: AxiosRequestConfig) {
        return LogFileRotationListenerApiFp(this.configuration).addNewListener(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Log File Rotation Listener
     * @param {LogFileRotationListenerApiDeleteLogRotationListenerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFileRotationListenerApiGenerated
     */
    public deleteLogRotationListener(requestParameters: LogFileRotationListenerApiDeleteLogRotationListenerRequest, options?: AxiosRequestConfig) {
        return LogFileRotationListenerApiFp(this.configuration).deleteLogRotationListener(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Log File Rotation Listener
     * @param {LogFileRotationListenerApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFileRotationListenerApiGenerated
     */
    public getSingle(requestParameters: LogFileRotationListenerApiGetSingleRequest, options?: AxiosRequestConfig) {
        return LogFileRotationListenerApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Log File Rotation Listener objects
     * @param {LogFileRotationListenerApiListLogRotationListenersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFileRotationListenerApiGenerated
     */
    public listLogRotationListeners(requestParameters: LogFileRotationListenerApiListLogRotationListenersRequest = {}, options?: AxiosRequestConfig) {
        return LogFileRotationListenerApiFp(this.configuration).listLogRotationListeners(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Log File Rotation Listener by name
     * @param {LogFileRotationListenerApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFileRotationListenerApiGenerated
     */
    public updateByName(requestParameters: LogFileRotationListenerApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return LogFileRotationListenerApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
