/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddPrometheusMonitorAttributeMetricRequest } from '../models';
// @ts-ignore
import { EnumprometheusMonitorAttributeMetricMetricTypeProp } from '../models';
// @ts-ignore
import { EnumprometheusMonitorAttributeMetricSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { PrometheusMonitorAttributeMetricListResponse } from '../models';
// @ts-ignore
import { PrometheusMonitorAttributeMetricResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PrometheusMonitorAttributeMetricApi - axios parameter creator
 * @export
 */
export const PrometheusMonitorAttributeMetricApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Prometheus Monitor Attribute Metric to the config
         * @param {string} httpServletExtensionName Name of the HTTP Servlet Extension
         * @param {AddPrometheusMonitorAttributeMetricRequest} addPrometheusMonitorAttributeMetricRequest Create a new Prometheus Monitor Attribute Metric in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewMetricToConfig: async (httpServletExtensionName: string, addPrometheusMonitorAttributeMetricRequest: AddPrometheusMonitorAttributeMetricRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'httpServletExtensionName' is not null or undefined
            assertParamExists('addNewMetricToConfig', 'httpServletExtensionName', httpServletExtensionName)
            // verify required parameter 'addPrometheusMonitorAttributeMetricRequest' is not null or undefined
            assertParamExists('addNewMetricToConfig', 'addPrometheusMonitorAttributeMetricRequest', addPrometheusMonitorAttributeMetricRequest)
            const localVarPath = `/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics`
                .replace(`{${"http-servlet-extension-name"}}`, encodeURIComponent(String(httpServletExtensionName !== undefined ? httpServletExtensionName : `-http-servlet-extension-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addPrometheusMonitorAttributeMetricRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addPrometheusMonitorAttributeMetricRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Prometheus Monitor Attribute Metric
         * @param {string} prometheusMonitorAttributeMetricName Name of the Prometheus Monitor Attribute Metric
         * @param {string} httpServletExtensionName Name of the HTTP Servlet Extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMetric: async (prometheusMonitorAttributeMetricName: string, httpServletExtensionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prometheusMonitorAttributeMetricName' is not null or undefined
            assertParamExists('deleteMetric', 'prometheusMonitorAttributeMetricName', prometheusMonitorAttributeMetricName)
            // verify required parameter 'httpServletExtensionName' is not null or undefined
            assertParamExists('deleteMetric', 'httpServletExtensionName', httpServletExtensionName)
            const localVarPath = `/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics/{prometheus-monitor-attribute-metric-name}`
                .replace(`{${"prometheus-monitor-attribute-metric-name"}}`, encodeURIComponent(String(prometheusMonitorAttributeMetricName !== undefined ? prometheusMonitorAttributeMetricName : `-prometheus-monitor-attribute-metric-name-`)))
                .replace(`{${"http-servlet-extension-name"}}`, encodeURIComponent(String(httpServletExtensionName !== undefined ? httpServletExtensionName : `-http-servlet-extension-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics/{prometheus-monitor-attribute-metric-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Prometheus Monitor Attribute Metric
         * @param {string} prometheusMonitorAttributeMetricName Name of the Prometheus Monitor Attribute Metric
         * @param {string} httpServletExtensionName Name of the HTTP Servlet Extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleMetric: async (prometheusMonitorAttributeMetricName: string, httpServletExtensionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prometheusMonitorAttributeMetricName' is not null or undefined
            assertParamExists('getSingleMetric', 'prometheusMonitorAttributeMetricName', prometheusMonitorAttributeMetricName)
            // verify required parameter 'httpServletExtensionName' is not null or undefined
            assertParamExists('getSingleMetric', 'httpServletExtensionName', httpServletExtensionName)
            const localVarPath = `/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics/{prometheus-monitor-attribute-metric-name}`
                .replace(`{${"prometheus-monitor-attribute-metric-name"}}`, encodeURIComponent(String(prometheusMonitorAttributeMetricName !== undefined ? prometheusMonitorAttributeMetricName : `-prometheus-monitor-attribute-metric-name-`)))
                .replace(`{${"http-servlet-extension-name"}}`, encodeURIComponent(String(httpServletExtensionName !== undefined ? httpServletExtensionName : `-http-servlet-extension-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics/{prometheus-monitor-attribute-metric-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Prometheus Monitor Attribute Metric objects
         * @param {string} httpServletExtensionName Name of the HTTP Servlet Extension
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (httpServletExtensionName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'httpServletExtensionName' is not null or undefined
            assertParamExists('listAllObjects', 'httpServletExtensionName', httpServletExtensionName)
            const localVarPath = `/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics`
                .replace(`{${"http-servlet-extension-name"}}`, encodeURIComponent(String(httpServletExtensionName !== undefined ? httpServletExtensionName : `-http-servlet-extension-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Prometheus Monitor Attribute Metric by name
         * @param {string} prometheusMonitorAttributeMetricName Name of the Prometheus Monitor Attribute Metric
         * @param {string} httpServletExtensionName Name of the HTTP Servlet Extension
         * @param {UpdateRequest} updateRequest Update an existing Prometheus Monitor Attribute Metric
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByname: async (prometheusMonitorAttributeMetricName: string, httpServletExtensionName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prometheusMonitorAttributeMetricName' is not null or undefined
            assertParamExists('updateByname', 'prometheusMonitorAttributeMetricName', prometheusMonitorAttributeMetricName)
            // verify required parameter 'httpServletExtensionName' is not null or undefined
            assertParamExists('updateByname', 'httpServletExtensionName', httpServletExtensionName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByname', 'updateRequest', updateRequest)
            const localVarPath = `/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics/{prometheus-monitor-attribute-metric-name}`
                .replace(`{${"prometheus-monitor-attribute-metric-name"}}`, encodeURIComponent(String(prometheusMonitorAttributeMetricName !== undefined ? prometheusMonitorAttributeMetricName : `-prometheus-monitor-attribute-metric-name-`)))
                .replace(`{${"http-servlet-extension-name"}}`, encodeURIComponent(String(httpServletExtensionName !== undefined ? httpServletExtensionName : `-http-servlet-extension-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics/{prometheus-monitor-attribute-metric-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrometheusMonitorAttributeMetricApi - functional programming interface
 * @export
 */
export const PrometheusMonitorAttributeMetricApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrometheusMonitorAttributeMetricApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Prometheus Monitor Attribute Metric to the config
         * @param {PrometheusMonitorAttributeMetricApiAddNewMetricToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewMetricToConfig(requestParameters: PrometheusMonitorAttributeMetricApiAddNewMetricToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrometheusMonitorAttributeMetricResponse>> {
            const addPrometheusMonitorAttributeMetricRequest: AddPrometheusMonitorAttributeMetricRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewMetricToConfig(requestParameters.httpServletExtensionName, addPrometheusMonitorAttributeMetricRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Prometheus Monitor Attribute Metric
         * @param {PrometheusMonitorAttributeMetricApiDeleteMetricRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMetric(requestParameters: PrometheusMonitorAttributeMetricApiDeleteMetricRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMetric(requestParameters.prometheusMonitorAttributeMetricName, requestParameters.httpServletExtensionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Prometheus Monitor Attribute Metric
         * @param {PrometheusMonitorAttributeMetricApiGetSingleMetricRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleMetric(requestParameters: PrometheusMonitorAttributeMetricApiGetSingleMetricRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrometheusMonitorAttributeMetricResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleMetric(requestParameters.prometheusMonitorAttributeMetricName, requestParameters.httpServletExtensionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Prometheus Monitor Attribute Metric objects
         * @param {PrometheusMonitorAttributeMetricApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: PrometheusMonitorAttributeMetricApiListAllObjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrometheusMonitorAttributeMetricListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.httpServletExtensionName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Prometheus Monitor Attribute Metric by name
         * @param {PrometheusMonitorAttributeMetricApiUpdateBynameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByname(requestParameters: PrometheusMonitorAttributeMetricApiUpdateBynameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrometheusMonitorAttributeMetricResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByname(requestParameters.prometheusMonitorAttributeMetricName, requestParameters.httpServletExtensionName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PrometheusMonitorAttributeMetricApi - factory interface
 * @export
 */
export const PrometheusMonitorAttributeMetricApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrometheusMonitorAttributeMetricApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Prometheus Monitor Attribute Metric to the config
         * @param {PrometheusMonitorAttributeMetricApiAddNewMetricToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewMetricToConfig(requestParameters: PrometheusMonitorAttributeMetricApiAddNewMetricToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<PrometheusMonitorAttributeMetricResponse> {
            return localVarFp.addNewMetricToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Prometheus Monitor Attribute Metric
         * @param {PrometheusMonitorAttributeMetricApiDeleteMetricRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMetric(requestParameters: PrometheusMonitorAttributeMetricApiDeleteMetricRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMetric(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Prometheus Monitor Attribute Metric
         * @param {PrometheusMonitorAttributeMetricApiGetSingleMetricRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleMetric(requestParameters: PrometheusMonitorAttributeMetricApiGetSingleMetricRequest, options?: AxiosRequestConfig): AxiosPromise<PrometheusMonitorAttributeMetricResponse> {
            return localVarFp.getSingleMetric(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Prometheus Monitor Attribute Metric objects
         * @param {PrometheusMonitorAttributeMetricApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: PrometheusMonitorAttributeMetricApiListAllObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<PrometheusMonitorAttributeMetricListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Prometheus Monitor Attribute Metric by name
         * @param {PrometheusMonitorAttributeMetricApiUpdateBynameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByname(requestParameters: PrometheusMonitorAttributeMetricApiUpdateBynameRequest, options?: AxiosRequestConfig): AxiosPromise<PrometheusMonitorAttributeMetricResponse> {
            return localVarFp.updateByname(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewMetricToConfig operation in PrometheusMonitorAttributeMetricApi.
 * @export
 * @interface PrometheusMonitorAttributeMetricApiAddNewMetricToConfigRequest
 */
export type PrometheusMonitorAttributeMetricApiAddNewMetricToConfigRequest = {
    
    /**
    * Name of the HTTP Servlet Extension
    * @type {string}
    * @memberof PrometheusMonitorAttributeMetricApiAddNewMetricToConfig
    */
    readonly httpServletExtensionName: string
    
} & AddPrometheusMonitorAttributeMetricRequest

/**
 * Request parameters for deleteMetric operation in PrometheusMonitorAttributeMetricApi.
 * @export
 * @interface PrometheusMonitorAttributeMetricApiDeleteMetricRequest
 */
export type PrometheusMonitorAttributeMetricApiDeleteMetricRequest = {
    
    /**
    * Name of the Prometheus Monitor Attribute Metric
    * @type {string}
    * @memberof PrometheusMonitorAttributeMetricApiDeleteMetric
    */
    readonly prometheusMonitorAttributeMetricName: string
    
    /**
    * Name of the HTTP Servlet Extension
    * @type {string}
    * @memberof PrometheusMonitorAttributeMetricApiDeleteMetric
    */
    readonly httpServletExtensionName: string
    
}

/**
 * Request parameters for getSingleMetric operation in PrometheusMonitorAttributeMetricApi.
 * @export
 * @interface PrometheusMonitorAttributeMetricApiGetSingleMetricRequest
 */
export type PrometheusMonitorAttributeMetricApiGetSingleMetricRequest = {
    
    /**
    * Name of the Prometheus Monitor Attribute Metric
    * @type {string}
    * @memberof PrometheusMonitorAttributeMetricApiGetSingleMetric
    */
    readonly prometheusMonitorAttributeMetricName: string
    
    /**
    * Name of the HTTP Servlet Extension
    * @type {string}
    * @memberof PrometheusMonitorAttributeMetricApiGetSingleMetric
    */
    readonly httpServletExtensionName: string
    
}

/**
 * Request parameters for listAllObjects operation in PrometheusMonitorAttributeMetricApi.
 * @export
 * @interface PrometheusMonitorAttributeMetricApiListAllObjectsRequest
 */
export type PrometheusMonitorAttributeMetricApiListAllObjectsRequest = {
    
    /**
    * Name of the HTTP Servlet Extension
    * @type {string}
    * @memberof PrometheusMonitorAttributeMetricApiListAllObjects
    */
    readonly httpServletExtensionName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof PrometheusMonitorAttributeMetricApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByname operation in PrometheusMonitorAttributeMetricApi.
 * @export
 * @interface PrometheusMonitorAttributeMetricApiUpdateBynameRequest
 */
export type PrometheusMonitorAttributeMetricApiUpdateBynameRequest = {
    
    /**
    * Name of the Prometheus Monitor Attribute Metric
    * @type {string}
    * @memberof PrometheusMonitorAttributeMetricApiUpdateByname
    */
    readonly prometheusMonitorAttributeMetricName: string
    
    /**
    * Name of the HTTP Servlet Extension
    * @type {string}
    * @memberof PrometheusMonitorAttributeMetricApiUpdateByname
    */
    readonly httpServletExtensionName: string
    
} & UpdateRequest

/**
 * PrometheusMonitorAttributeMetricApiGenerated - object-oriented interface
 * @export
 * @class PrometheusMonitorAttributeMetricApiGenerated
 * @extends {BaseAPI}
 */
export class PrometheusMonitorAttributeMetricApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Prometheus Monitor Attribute Metric to the config
     * @param {PrometheusMonitorAttributeMetricApiAddNewMetricToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrometheusMonitorAttributeMetricApiGenerated
     */
    public addNewMetricToConfig(requestParameters: PrometheusMonitorAttributeMetricApiAddNewMetricToConfigRequest, options?: AxiosRequestConfig) {
        return PrometheusMonitorAttributeMetricApiFp(this.configuration).addNewMetricToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Prometheus Monitor Attribute Metric
     * @param {PrometheusMonitorAttributeMetricApiDeleteMetricRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrometheusMonitorAttributeMetricApiGenerated
     */
    public deleteMetric(requestParameters: PrometheusMonitorAttributeMetricApiDeleteMetricRequest, options?: AxiosRequestConfig) {
        return PrometheusMonitorAttributeMetricApiFp(this.configuration).deleteMetric(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Prometheus Monitor Attribute Metric
     * @param {PrometheusMonitorAttributeMetricApiGetSingleMetricRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrometheusMonitorAttributeMetricApiGenerated
     */
    public getSingleMetric(requestParameters: PrometheusMonitorAttributeMetricApiGetSingleMetricRequest, options?: AxiosRequestConfig) {
        return PrometheusMonitorAttributeMetricApiFp(this.configuration).getSingleMetric(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Prometheus Monitor Attribute Metric objects
     * @param {PrometheusMonitorAttributeMetricApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrometheusMonitorAttributeMetricApiGenerated
     */
    public listAllObjects(requestParameters: PrometheusMonitorAttributeMetricApiListAllObjectsRequest, options?: AxiosRequestConfig) {
        return PrometheusMonitorAttributeMetricApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Prometheus Monitor Attribute Metric by name
     * @param {PrometheusMonitorAttributeMetricApiUpdateBynameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrometheusMonitorAttributeMetricApiGenerated
     */
    public updateByname(requestParameters: PrometheusMonitorAttributeMetricApiUpdateBynameRequest, options?: AxiosRequestConfig) {
        return PrometheusMonitorAttributeMetricApiFp(this.configuration).updateByname(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
