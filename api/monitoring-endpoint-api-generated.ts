/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddStatsdMonitoringEndpointRequest } from '../models';
// @ts-ignore
import { EnummonitoringEndpointConnectionTypeProp } from '../models';
// @ts-ignore
import { EnumstatsdMonitoringEndpointSchemaUrn } from '../models';
// @ts-ignore
import { MonitoringEndpointListResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { StatsdMonitoringEndpointResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MonitoringEndpointApi - axios parameter creator
 * @export
 */
export const MonitoringEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Monitoring Endpoint to the config
         * @param {AddStatsdMonitoringEndpointRequest} addStatsdMonitoringEndpointRequest Create a new Monitoring Endpoint in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig: async (addStatsdMonitoringEndpointRequest: AddStatsdMonitoringEndpointRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addStatsdMonitoringEndpointRequest' is not null or undefined
            assertParamExists('addNewConfig', 'addStatsdMonitoringEndpointRequest', addStatsdMonitoringEndpointRequest)
            const localVarPath = `/monitoring-endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addStatsdMonitoringEndpointRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/monitoring-endpoints',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addStatsdMonitoringEndpointRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Monitoring Endpoint
         * @param {string} monitoringEndpointName Name of the Monitoring Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMonitoringEndpoint: async (monitoringEndpointName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'monitoringEndpointName' is not null or undefined
            assertParamExists('deleteMonitoringEndpoint', 'monitoringEndpointName', monitoringEndpointName)
            const localVarPath = `/monitoring-endpoints/{monitoring-endpoint-name}`
                .replace(`{${"monitoring-endpoint-name"}}`, encodeURIComponent(String(monitoringEndpointName !== undefined ? monitoringEndpointName : `-monitoring-endpoint-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/monitoring-endpoints/{monitoring-endpoint-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Monitoring Endpoint
         * @param {string} monitoringEndpointName Name of the Monitoring Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleEndpoint: async (monitoringEndpointName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'monitoringEndpointName' is not null or undefined
            assertParamExists('getSingleEndpoint', 'monitoringEndpointName', monitoringEndpointName)
            const localVarPath = `/monitoring-endpoints/{monitoring-endpoint-name}`
                .replace(`{${"monitoring-endpoint-name"}}`, encodeURIComponent(String(monitoringEndpointName !== undefined ? monitoringEndpointName : `-monitoring-endpoint-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/monitoring-endpoints/{monitoring-endpoint-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Monitoring Endpoint objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/monitoring-endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/monitoring-endpoints',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Monitoring Endpoint by name
         * @param {string} monitoringEndpointName Name of the Monitoring Endpoint
         * @param {UpdateRequest} updateRequest Update an existing Monitoring Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (monitoringEndpointName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'monitoringEndpointName' is not null or undefined
            assertParamExists('updateByName', 'monitoringEndpointName', monitoringEndpointName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/monitoring-endpoints/{monitoring-endpoint-name}`
                .replace(`{${"monitoring-endpoint-name"}}`, encodeURIComponent(String(monitoringEndpointName !== undefined ? monitoringEndpointName : `-monitoring-endpoint-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/monitoring-endpoints/{monitoring-endpoint-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MonitoringEndpointApi - functional programming interface
 * @export
 */
export const MonitoringEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MonitoringEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Monitoring Endpoint to the config
         * @param {MonitoringEndpointApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewConfig(requestParameters: MonitoringEndpointApiAddNewConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsdMonitoringEndpointResponse>> {
            const addStatsdMonitoringEndpointRequest: AddStatsdMonitoringEndpointRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewConfig(addStatsdMonitoringEndpointRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Monitoring Endpoint
         * @param {MonitoringEndpointApiDeleteMonitoringEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMonitoringEndpoint(requestParameters: MonitoringEndpointApiDeleteMonitoringEndpointRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMonitoringEndpoint(requestParameters.monitoringEndpointName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Monitoring Endpoint
         * @param {MonitoringEndpointApiGetSingleEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleEndpoint(requestParameters: MonitoringEndpointApiGetSingleEndpointRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsdMonitoringEndpointResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleEndpoint(requestParameters.monitoringEndpointName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Monitoring Endpoint objects
         * @param {MonitoringEndpointApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: MonitoringEndpointApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringEndpointListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Monitoring Endpoint by name
         * @param {MonitoringEndpointApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: MonitoringEndpointApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsdMonitoringEndpointResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.monitoringEndpointName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MonitoringEndpointApi - factory interface
 * @export
 */
export const MonitoringEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MonitoringEndpointApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Monitoring Endpoint to the config
         * @param {MonitoringEndpointApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig(requestParameters: MonitoringEndpointApiAddNewConfigRequest, options?: AxiosRequestConfig): AxiosPromise<StatsdMonitoringEndpointResponse> {
            return localVarFp.addNewConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Monitoring Endpoint
         * @param {MonitoringEndpointApiDeleteMonitoringEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMonitoringEndpoint(requestParameters: MonitoringEndpointApiDeleteMonitoringEndpointRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMonitoringEndpoint(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Monitoring Endpoint
         * @param {MonitoringEndpointApiGetSingleEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleEndpoint(requestParameters: MonitoringEndpointApiGetSingleEndpointRequest, options?: AxiosRequestConfig): AxiosPromise<StatsdMonitoringEndpointResponse> {
            return localVarFp.getSingleEndpoint(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Monitoring Endpoint objects
         * @param {MonitoringEndpointApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: MonitoringEndpointApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MonitoringEndpointListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Monitoring Endpoint by name
         * @param {MonitoringEndpointApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: MonitoringEndpointApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<StatsdMonitoringEndpointResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewConfig operation in MonitoringEndpointApi.
 * @export
 * @interface MonitoringEndpointApiAddNewConfigRequest
 */
export type MonitoringEndpointApiAddNewConfigRequest = {
    
} & AddStatsdMonitoringEndpointRequest

/**
 * Request parameters for deleteMonitoringEndpoint operation in MonitoringEndpointApi.
 * @export
 * @interface MonitoringEndpointApiDeleteMonitoringEndpointRequest
 */
export type MonitoringEndpointApiDeleteMonitoringEndpointRequest = {
    
    /**
    * Name of the Monitoring Endpoint
    * @type {string}
    * @memberof MonitoringEndpointApiDeleteMonitoringEndpoint
    */
    readonly monitoringEndpointName: string
    
}

/**
 * Request parameters for getSingleEndpoint operation in MonitoringEndpointApi.
 * @export
 * @interface MonitoringEndpointApiGetSingleEndpointRequest
 */
export type MonitoringEndpointApiGetSingleEndpointRequest = {
    
    /**
    * Name of the Monitoring Endpoint
    * @type {string}
    * @memberof MonitoringEndpointApiGetSingleEndpoint
    */
    readonly monitoringEndpointName: string
    
}

/**
 * Request parameters for listAllObjects operation in MonitoringEndpointApi.
 * @export
 * @interface MonitoringEndpointApiListAllObjectsRequest
 */
export type MonitoringEndpointApiListAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof MonitoringEndpointApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in MonitoringEndpointApi.
 * @export
 * @interface MonitoringEndpointApiUpdateByNameRequest
 */
export type MonitoringEndpointApiUpdateByNameRequest = {
    
    /**
    * Name of the Monitoring Endpoint
    * @type {string}
    * @memberof MonitoringEndpointApiUpdateByName
    */
    readonly monitoringEndpointName: string
    
} & UpdateRequest

/**
 * MonitoringEndpointApiGenerated - object-oriented interface
 * @export
 * @class MonitoringEndpointApiGenerated
 * @extends {BaseAPI}
 */
export class MonitoringEndpointApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Monitoring Endpoint to the config
     * @param {MonitoringEndpointApiAddNewConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitoringEndpointApiGenerated
     */
    public addNewConfig(requestParameters: MonitoringEndpointApiAddNewConfigRequest, options?: AxiosRequestConfig) {
        return MonitoringEndpointApiFp(this.configuration).addNewConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Monitoring Endpoint
     * @param {MonitoringEndpointApiDeleteMonitoringEndpointRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitoringEndpointApiGenerated
     */
    public deleteMonitoringEndpoint(requestParameters: MonitoringEndpointApiDeleteMonitoringEndpointRequest, options?: AxiosRequestConfig) {
        return MonitoringEndpointApiFp(this.configuration).deleteMonitoringEndpoint(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Monitoring Endpoint
     * @param {MonitoringEndpointApiGetSingleEndpointRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitoringEndpointApiGenerated
     */
    public getSingleEndpoint(requestParameters: MonitoringEndpointApiGetSingleEndpointRequest, options?: AxiosRequestConfig) {
        return MonitoringEndpointApiFp(this.configuration).getSingleEndpoint(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Monitoring Endpoint objects
     * @param {MonitoringEndpointApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitoringEndpointApiGenerated
     */
    public listAllObjects(requestParameters: MonitoringEndpointApiListAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return MonitoringEndpointApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Monitoring Endpoint by name
     * @param {MonitoringEndpointApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitoringEndpointApiGenerated
     */
    public updateByName(requestParameters: MonitoringEndpointApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return MonitoringEndpointApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
