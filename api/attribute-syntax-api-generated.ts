/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AttributeSyntaxListResponse } from '../models';
// @ts-ignore
import { GetAttributeSyntax200Response } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AttributeSyntaxApi - axios parameter creator
 * @export
 */
export const AttributeSyntaxApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a list of all Attribute Syntax objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/attribute-syntaxes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/attribute-syntaxes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Attribute Syntax
         * @param {string} attributeSyntaxName Name of the Attribute Syntax
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleAttributeSyntax: async (attributeSyntaxName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeSyntaxName' is not null or undefined
            assertParamExists('getSingleAttributeSyntax', 'attributeSyntaxName', attributeSyntaxName)
            const localVarPath = `/attribute-syntaxes/{attribute-syntax-name}`
                .replace(`{${"attribute-syntax-name"}}`, encodeURIComponent(String(attributeSyntaxName !== undefined ? attributeSyntaxName : `-attribute-syntax-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/attribute-syntaxes/{attribute-syntax-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Attribute Syntax by name
         * @param {string} attributeSyntaxName Name of the Attribute Syntax
         * @param {UpdateRequest} updateRequest Update an existing Attribute Syntax
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (attributeSyntaxName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeSyntaxName' is not null or undefined
            assertParamExists('updateByName', 'attributeSyntaxName', attributeSyntaxName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/attribute-syntaxes/{attribute-syntax-name}`
                .replace(`{${"attribute-syntax-name"}}`, encodeURIComponent(String(attributeSyntaxName !== undefined ? attributeSyntaxName : `-attribute-syntax-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/attribute-syntaxes/{attribute-syntax-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributeSyntaxApi - functional programming interface
 * @export
 */
export const AttributeSyntaxApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributeSyntaxApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns a list of all Attribute Syntax objects
         * @param {AttributeSyntaxApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllObjects(requestParameters: AttributeSyntaxApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeSyntaxListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Attribute Syntax
         * @param {AttributeSyntaxApiGetSingleAttributeSyntaxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleAttributeSyntax(requestParameters: AttributeSyntaxApiGetSingleAttributeSyntaxRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAttributeSyntax200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleAttributeSyntax(requestParameters.attributeSyntaxName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Attribute Syntax by name
         * @param {AttributeSyntaxApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: AttributeSyntaxApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAttributeSyntax200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.attributeSyntaxName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributeSyntaxApi - factory interface
 * @export
 */
export const AttributeSyntaxApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributeSyntaxApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns a list of all Attribute Syntax objects
         * @param {AttributeSyntaxApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects(requestParameters: AttributeSyntaxApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AttributeSyntaxListResponse> {
            return localVarFp.getAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Attribute Syntax
         * @param {AttributeSyntaxApiGetSingleAttributeSyntaxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleAttributeSyntax(requestParameters: AttributeSyntaxApiGetSingleAttributeSyntaxRequest, options?: AxiosRequestConfig): AxiosPromise<GetAttributeSyntax200Response> {
            return localVarFp.getSingleAttributeSyntax(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Attribute Syntax by name
         * @param {AttributeSyntaxApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: AttributeSyntaxApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<GetAttributeSyntax200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllObjects operation in AttributeSyntaxApi.
 * @export
 * @interface AttributeSyntaxApiGetAllObjectsRequest
 */
export type AttributeSyntaxApiGetAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof AttributeSyntaxApiGetAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingleAttributeSyntax operation in AttributeSyntaxApi.
 * @export
 * @interface AttributeSyntaxApiGetSingleAttributeSyntaxRequest
 */
export type AttributeSyntaxApiGetSingleAttributeSyntaxRequest = {
    
    /**
    * Name of the Attribute Syntax
    * @type {string}
    * @memberof AttributeSyntaxApiGetSingleAttributeSyntax
    */
    readonly attributeSyntaxName: string
    
}

/**
 * Request parameters for updateByName operation in AttributeSyntaxApi.
 * @export
 * @interface AttributeSyntaxApiUpdateByNameRequest
 */
export type AttributeSyntaxApiUpdateByNameRequest = {
    
    /**
    * Name of the Attribute Syntax
    * @type {string}
    * @memberof AttributeSyntaxApiUpdateByName
    */
    readonly attributeSyntaxName: string
    
} & UpdateRequest

/**
 * AttributeSyntaxApiGenerated - object-oriented interface
 * @export
 * @class AttributeSyntaxApiGenerated
 * @extends {BaseAPI}
 */
export class AttributeSyntaxApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Returns a list of all Attribute Syntax objects
     * @param {AttributeSyntaxApiGetAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeSyntaxApiGenerated
     */
    public getAllObjects(requestParameters: AttributeSyntaxApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return AttributeSyntaxApiFp(this.configuration).getAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Attribute Syntax
     * @param {AttributeSyntaxApiGetSingleAttributeSyntaxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeSyntaxApiGenerated
     */
    public getSingleAttributeSyntax(requestParameters: AttributeSyntaxApiGetSingleAttributeSyntaxRequest, options?: AxiosRequestConfig) {
        return AttributeSyntaxApiFp(this.configuration).getSingleAttributeSyntax(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Attribute Syntax by name
     * @param {AttributeSyntaxApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeSyntaxApiGenerated
     */
    public updateByName(requestParameters: AttributeSyntaxApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return AttributeSyntaxApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
