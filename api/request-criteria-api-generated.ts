/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddRequestCriteria200Response } from '../models';
// @ts-ignore
import { AddRequestCriteriaRequest } from '../models';
// @ts-ignore
import { EnumrequestCriteriaIncludedSearchScopeProp } from '../models';
// @ts-ignore
import { EnumrequestCriteriaOperationOriginProp } from '../models';
// @ts-ignore
import { EnumrequestCriteriaSimpleOperationTypeProp } from '../models';
// @ts-ignore
import { EnumrequestCriteriaTargetBindTypeProp } from '../models';
// @ts-ignore
import { EnumrequestCriteriaUsingAdministrativeSessionWorkerThreadProp } from '../models';
// @ts-ignore
import { EnumthirdPartyRequestCriteriaSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { RequestCriteriaListResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RequestCriteriaApi - axios parameter creator
 * @export
 */
export const RequestCriteriaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Request Criteria to the config
         * @param {AddRequestCriteriaRequest} addRequestCriteriaRequest Create a new Request Criteria in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCriteriaToConfig: async (addRequestCriteriaRequest: AddRequestCriteriaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addRequestCriteriaRequest' is not null or undefined
            assertParamExists('addNewCriteriaToConfig', 'addRequestCriteriaRequest', addRequestCriteriaRequest)
            const localVarPath = `/request-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addRequestCriteriaRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/request-criteria',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addRequestCriteriaRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Request Criteria
         * @param {string} requestCriteriaName Name of the Request Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCriteria: async (requestCriteriaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCriteriaName' is not null or undefined
            assertParamExists('deleteCriteria', 'requestCriteriaName', requestCriteriaName)
            const localVarPath = `/request-criteria/{request-criteria-name}`
                .replace(`{${"request-criteria-name"}}`, encodeURIComponent(String(requestCriteriaName !== undefined ? requestCriteriaName : `-request-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/request-criteria/{request-criteria-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Request Criteria
         * @param {string} requestCriteriaName Name of the Request Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (requestCriteriaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCriteriaName' is not null or undefined
            assertParamExists('getSingle', 'requestCriteriaName', requestCriteriaName)
            const localVarPath = `/request-criteria/{request-criteria-name}`
                .replace(`{${"request-criteria-name"}}`, encodeURIComponent(String(requestCriteriaName !== undefined ? requestCriteriaName : `-request-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/request-criteria/{request-criteria-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Request Criteria objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/request-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/request-criteria',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Request Criteria by name
         * @param {string} requestCriteriaName Name of the Request Criteria
         * @param {UpdateRequest} updateRequest Update an existing Request Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (requestCriteriaName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCriteriaName' is not null or undefined
            assertParamExists('updateByName', 'requestCriteriaName', requestCriteriaName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/request-criteria/{request-criteria-name}`
                .replace(`{${"request-criteria-name"}}`, encodeURIComponent(String(requestCriteriaName !== undefined ? requestCriteriaName : `-request-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/request-criteria/{request-criteria-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestCriteriaApi - functional programming interface
 * @export
 */
export const RequestCriteriaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequestCriteriaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Request Criteria to the config
         * @param {RequestCriteriaApiAddNewCriteriaToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewCriteriaToConfig(requestParameters: RequestCriteriaApiAddNewCriteriaToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddRequestCriteria200Response>> {
            const addRequestCriteriaRequest: AddRequestCriteriaRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewCriteriaToConfig(addRequestCriteriaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Request Criteria
         * @param {RequestCriteriaApiDeleteCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCriteria(requestParameters: RequestCriteriaApiDeleteCriteriaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCriteria(requestParameters.requestCriteriaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Request Criteria
         * @param {RequestCriteriaApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: RequestCriteriaApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddRequestCriteria200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.requestCriteriaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Request Criteria objects
         * @param {RequestCriteriaApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: RequestCriteriaApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestCriteriaListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Request Criteria by name
         * @param {RequestCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: RequestCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddRequestCriteria200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.requestCriteriaName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RequestCriteriaApi - factory interface
 * @export
 */
export const RequestCriteriaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequestCriteriaApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Request Criteria to the config
         * @param {RequestCriteriaApiAddNewCriteriaToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCriteriaToConfig(requestParameters: RequestCriteriaApiAddNewCriteriaToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AddRequestCriteria200Response> {
            return localVarFp.addNewCriteriaToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Request Criteria
         * @param {RequestCriteriaApiDeleteCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCriteria(requestParameters: RequestCriteriaApiDeleteCriteriaRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCriteria(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Request Criteria
         * @param {RequestCriteriaApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: RequestCriteriaApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddRequestCriteria200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Request Criteria objects
         * @param {RequestCriteriaApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: RequestCriteriaApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RequestCriteriaListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Request Criteria by name
         * @param {RequestCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: RequestCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddRequestCriteria200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewCriteriaToConfig operation in RequestCriteriaApi.
 * @export
 * @interface RequestCriteriaApiAddNewCriteriaToConfigRequest
 */
export type RequestCriteriaApiAddNewCriteriaToConfigRequest = {
    
} & AddRequestCriteriaRequest

/**
 * Request parameters for deleteCriteria operation in RequestCriteriaApi.
 * @export
 * @interface RequestCriteriaApiDeleteCriteriaRequest
 */
export type RequestCriteriaApiDeleteCriteriaRequest = {
    
    /**
    * Name of the Request Criteria
    * @type {string}
    * @memberof RequestCriteriaApiDeleteCriteria
    */
    readonly requestCriteriaName: string
    
}

/**
 * Request parameters for getSingle operation in RequestCriteriaApi.
 * @export
 * @interface RequestCriteriaApiGetSingleRequest
 */
export type RequestCriteriaApiGetSingleRequest = {
    
    /**
    * Name of the Request Criteria
    * @type {string}
    * @memberof RequestCriteriaApiGetSingle
    */
    readonly requestCriteriaName: string
    
}

/**
 * Request parameters for listAllObjects operation in RequestCriteriaApi.
 * @export
 * @interface RequestCriteriaApiListAllObjectsRequest
 */
export type RequestCriteriaApiListAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof RequestCriteriaApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in RequestCriteriaApi.
 * @export
 * @interface RequestCriteriaApiUpdateByNameRequest
 */
export type RequestCriteriaApiUpdateByNameRequest = {
    
    /**
    * Name of the Request Criteria
    * @type {string}
    * @memberof RequestCriteriaApiUpdateByName
    */
    readonly requestCriteriaName: string
    
} & UpdateRequest

/**
 * RequestCriteriaApiGenerated - object-oriented interface
 * @export
 * @class RequestCriteriaApiGenerated
 * @extends {BaseAPI}
 */
export class RequestCriteriaApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Request Criteria to the config
     * @param {RequestCriteriaApiAddNewCriteriaToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestCriteriaApiGenerated
     */
    public addNewCriteriaToConfig(requestParameters: RequestCriteriaApiAddNewCriteriaToConfigRequest, options?: AxiosRequestConfig) {
        return RequestCriteriaApiFp(this.configuration).addNewCriteriaToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Request Criteria
     * @param {RequestCriteriaApiDeleteCriteriaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestCriteriaApiGenerated
     */
    public deleteCriteria(requestParameters: RequestCriteriaApiDeleteCriteriaRequest, options?: AxiosRequestConfig) {
        return RequestCriteriaApiFp(this.configuration).deleteCriteria(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Request Criteria
     * @param {RequestCriteriaApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestCriteriaApiGenerated
     */
    public getSingle(requestParameters: RequestCriteriaApiGetSingleRequest, options?: AxiosRequestConfig) {
        return RequestCriteriaApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Request Criteria objects
     * @param {RequestCriteriaApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestCriteriaApiGenerated
     */
    public listAllObjects(requestParameters: RequestCriteriaApiListAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return RequestCriteriaApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Request Criteria by name
     * @param {RequestCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestCriteriaApiGenerated
     */
    public updateByName(requestParameters: RequestCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return RequestCriteriaApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
