/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddSaslMechanismHandler200Response } from '../models';
// @ts-ignore
import { AddSaslMechanismHandlerRequest } from '../models';
// @ts-ignore
import { EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp } from '../models';
// @ts-ignore
import { EnumthirdPartySaslMechanismHandlerSchemaUrn } from '../models';
// @ts-ignore
import { GetSaslMechanismHandler200Response } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { SaslMechanismHandlerListResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SaslMechanismHandlerApi - axios parameter creator
 * @export
 */
export const SaslMechanismHandlerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new SASL Mechanism Handler to the config
         * @param {AddSaslMechanismHandlerRequest} addSaslMechanismHandlerRequest Create a new SASL Mechanism Handler in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewHandler: async (addSaslMechanismHandlerRequest: AddSaslMechanismHandlerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addSaslMechanismHandlerRequest' is not null or undefined
            assertParamExists('addNewHandler', 'addSaslMechanismHandlerRequest', addSaslMechanismHandlerRequest)
            const localVarPath = `/sasl-mechanism-handlers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addSaslMechanismHandlerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sasl-mechanism-handlers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addSaslMechanismHandlerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a SASL Mechanism Handler
         * @param {string} saslMechanismHandlerName Name of the SASL Mechanism Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHandler: async (saslMechanismHandlerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saslMechanismHandlerName' is not null or undefined
            assertParamExists('deleteHandler', 'saslMechanismHandlerName', saslMechanismHandlerName)
            const localVarPath = `/sasl-mechanism-handlers/{sasl-mechanism-handler-name}`
                .replace(`{${"sasl-mechanism-handler-name"}}`, encodeURIComponent(String(saslMechanismHandlerName !== undefined ? saslMechanismHandlerName : `-sasl-mechanism-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sasl-mechanism-handlers/{sasl-mechanism-handler-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single SASL Mechanism Handler
         * @param {string} saslMechanismHandlerName Name of the SASL Mechanism Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (saslMechanismHandlerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saslMechanismHandlerName' is not null or undefined
            assertParamExists('getSingle', 'saslMechanismHandlerName', saslMechanismHandlerName)
            const localVarPath = `/sasl-mechanism-handlers/{sasl-mechanism-handler-name}`
                .replace(`{${"sasl-mechanism-handler-name"}}`, encodeURIComponent(String(saslMechanismHandlerName !== undefined ? saslMechanismHandlerName : `-sasl-mechanism-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sasl-mechanism-handlers/{sasl-mechanism-handler-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all SASL Mechanism Handler objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllHandlers: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sasl-mechanism-handlers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sasl-mechanism-handlers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing SASL Mechanism Handler by name
         * @param {string} saslMechanismHandlerName Name of the SASL Mechanism Handler
         * @param {UpdateRequest} updateRequest Update an existing SASL Mechanism Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (saslMechanismHandlerName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saslMechanismHandlerName' is not null or undefined
            assertParamExists('updateByName', 'saslMechanismHandlerName', saslMechanismHandlerName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/sasl-mechanism-handlers/{sasl-mechanism-handler-name}`
                .replace(`{${"sasl-mechanism-handler-name"}}`, encodeURIComponent(String(saslMechanismHandlerName !== undefined ? saslMechanismHandlerName : `-sasl-mechanism-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sasl-mechanism-handlers/{sasl-mechanism-handler-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SaslMechanismHandlerApi - functional programming interface
 * @export
 */
export const SaslMechanismHandlerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SaslMechanismHandlerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new SASL Mechanism Handler to the config
         * @param {SaslMechanismHandlerApiAddNewHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewHandler(requestParameters: SaslMechanismHandlerApiAddNewHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddSaslMechanismHandler200Response>> {
            const addSaslMechanismHandlerRequest: AddSaslMechanismHandlerRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewHandler(addSaslMechanismHandlerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a SASL Mechanism Handler
         * @param {SaslMechanismHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHandler(requestParameters: SaslMechanismHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHandler(requestParameters.saslMechanismHandlerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single SASL Mechanism Handler
         * @param {SaslMechanismHandlerApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: SaslMechanismHandlerApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSaslMechanismHandler200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.saslMechanismHandlerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all SASL Mechanism Handler objects
         * @param {SaslMechanismHandlerApiListAllHandlersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllHandlers(requestParameters: SaslMechanismHandlerApiListAllHandlersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaslMechanismHandlerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllHandlers(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing SASL Mechanism Handler by name
         * @param {SaslMechanismHandlerApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: SaslMechanismHandlerApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSaslMechanismHandler200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.saslMechanismHandlerName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SaslMechanismHandlerApi - factory interface
 * @export
 */
export const SaslMechanismHandlerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SaslMechanismHandlerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new SASL Mechanism Handler to the config
         * @param {SaslMechanismHandlerApiAddNewHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewHandler(requestParameters: SaslMechanismHandlerApiAddNewHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<AddSaslMechanismHandler200Response> {
            return localVarFp.addNewHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a SASL Mechanism Handler
         * @param {SaslMechanismHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHandler(requestParameters: SaslMechanismHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single SASL Mechanism Handler
         * @param {SaslMechanismHandlerApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: SaslMechanismHandlerApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<GetSaslMechanismHandler200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all SASL Mechanism Handler objects
         * @param {SaslMechanismHandlerApiListAllHandlersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllHandlers(requestParameters: SaslMechanismHandlerApiListAllHandlersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SaslMechanismHandlerListResponse> {
            return localVarFp.listAllHandlers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing SASL Mechanism Handler by name
         * @param {SaslMechanismHandlerApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: SaslMechanismHandlerApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<GetSaslMechanismHandler200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewHandler operation in SaslMechanismHandlerApi.
 * @export
 * @interface SaslMechanismHandlerApiAddNewHandlerRequest
 */
export type SaslMechanismHandlerApiAddNewHandlerRequest = {
    
} & AddSaslMechanismHandlerRequest

/**
 * Request parameters for deleteHandler operation in SaslMechanismHandlerApi.
 * @export
 * @interface SaslMechanismHandlerApiDeleteHandlerRequest
 */
export type SaslMechanismHandlerApiDeleteHandlerRequest = {
    
    /**
    * Name of the SASL Mechanism Handler
    * @type {string}
    * @memberof SaslMechanismHandlerApiDeleteHandler
    */
    readonly saslMechanismHandlerName: string
    
}

/**
 * Request parameters for getSingle operation in SaslMechanismHandlerApi.
 * @export
 * @interface SaslMechanismHandlerApiGetSingleRequest
 */
export type SaslMechanismHandlerApiGetSingleRequest = {
    
    /**
    * Name of the SASL Mechanism Handler
    * @type {string}
    * @memberof SaslMechanismHandlerApiGetSingle
    */
    readonly saslMechanismHandlerName: string
    
}

/**
 * Request parameters for listAllHandlers operation in SaslMechanismHandlerApi.
 * @export
 * @interface SaslMechanismHandlerApiListAllHandlersRequest
 */
export type SaslMechanismHandlerApiListAllHandlersRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof SaslMechanismHandlerApiListAllHandlers
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in SaslMechanismHandlerApi.
 * @export
 * @interface SaslMechanismHandlerApiUpdateByNameRequest
 */
export type SaslMechanismHandlerApiUpdateByNameRequest = {
    
    /**
    * Name of the SASL Mechanism Handler
    * @type {string}
    * @memberof SaslMechanismHandlerApiUpdateByName
    */
    readonly saslMechanismHandlerName: string
    
} & UpdateRequest

/**
 * SaslMechanismHandlerApiGenerated - object-oriented interface
 * @export
 * @class SaslMechanismHandlerApiGenerated
 * @extends {BaseAPI}
 */
export class SaslMechanismHandlerApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new SASL Mechanism Handler to the config
     * @param {SaslMechanismHandlerApiAddNewHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaslMechanismHandlerApiGenerated
     */
    public addNewHandler(requestParameters: SaslMechanismHandlerApiAddNewHandlerRequest, options?: AxiosRequestConfig) {
        return SaslMechanismHandlerApiFp(this.configuration).addNewHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a SASL Mechanism Handler
     * @param {SaslMechanismHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaslMechanismHandlerApiGenerated
     */
    public deleteHandler(requestParameters: SaslMechanismHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig) {
        return SaslMechanismHandlerApiFp(this.configuration).deleteHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single SASL Mechanism Handler
     * @param {SaslMechanismHandlerApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaslMechanismHandlerApiGenerated
     */
    public getSingle(requestParameters: SaslMechanismHandlerApiGetSingleRequest, options?: AxiosRequestConfig) {
        return SaslMechanismHandlerApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all SASL Mechanism Handler objects
     * @param {SaslMechanismHandlerApiListAllHandlersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaslMechanismHandlerApiGenerated
     */
    public listAllHandlers(requestParameters: SaslMechanismHandlerApiListAllHandlersRequest = {}, options?: AxiosRequestConfig) {
        return SaslMechanismHandlerApiFp(this.configuration).listAllHandlers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing SASL Mechanism Handler by name
     * @param {SaslMechanismHandlerApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaslMechanismHandlerApiGenerated
     */
    public updateByName(requestParameters: SaslMechanismHandlerApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return SaslMechanismHandlerApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
