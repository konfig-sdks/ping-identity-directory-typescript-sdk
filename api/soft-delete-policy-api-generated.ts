/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddSoftDeletePolicyRequest } from '../models';
// @ts-ignore
import { EnumsoftDeletePolicySchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { SoftDeletePolicyListResponse } from '../models';
// @ts-ignore
import { SoftDeletePolicyResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SoftDeletePolicyApi - axios parameter creator
 * @export
 */
export const SoftDeletePolicyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Soft Delete Policy to the config
         * @param {AddSoftDeletePolicyRequest} addSoftDeletePolicyRequest Create a new Soft Delete Policy in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPolicy: async (addSoftDeletePolicyRequest: AddSoftDeletePolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addSoftDeletePolicyRequest' is not null or undefined
            assertParamExists('addNewPolicy', 'addSoftDeletePolicyRequest', addSoftDeletePolicyRequest)
            const localVarPath = `/soft-delete-policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addSoftDeletePolicyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/soft-delete-policies',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addSoftDeletePolicyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Soft Delete Policy
         * @param {string} softDeletePolicyName Name of the Soft Delete Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy: async (softDeletePolicyName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'softDeletePolicyName' is not null or undefined
            assertParamExists('deletePolicy', 'softDeletePolicyName', softDeletePolicyName)
            const localVarPath = `/soft-delete-policies/{soft-delete-policy-name}`
                .replace(`{${"soft-delete-policy-name"}}`, encodeURIComponent(String(softDeletePolicyName !== undefined ? softDeletePolicyName : `-soft-delete-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/soft-delete-policies/{soft-delete-policy-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Soft Delete Policy
         * @param {string} softDeletePolicyName Name of the Soft Delete Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleSoftDeletePolicy: async (softDeletePolicyName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'softDeletePolicyName' is not null or undefined
            assertParamExists('getSingleSoftDeletePolicy', 'softDeletePolicyName', softDeletePolicyName)
            const localVarPath = `/soft-delete-policies/{soft-delete-policy-name}`
                .replace(`{${"soft-delete-policy-name"}}`, encodeURIComponent(String(softDeletePolicyName !== undefined ? softDeletePolicyName : `-soft-delete-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/soft-delete-policies/{soft-delete-policy-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Soft Delete Policy objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/soft-delete-policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/soft-delete-policies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Soft Delete Policy by name
         * @param {string} softDeletePolicyName Name of the Soft Delete Policy
         * @param {UpdateRequest} updateRequest Update an existing Soft Delete Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (softDeletePolicyName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'softDeletePolicyName' is not null or undefined
            assertParamExists('updateByName', 'softDeletePolicyName', softDeletePolicyName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/soft-delete-policies/{soft-delete-policy-name}`
                .replace(`{${"soft-delete-policy-name"}}`, encodeURIComponent(String(softDeletePolicyName !== undefined ? softDeletePolicyName : `-soft-delete-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/soft-delete-policies/{soft-delete-policy-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SoftDeletePolicyApi - functional programming interface
 * @export
 */
export const SoftDeletePolicyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SoftDeletePolicyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Soft Delete Policy to the config
         * @param {SoftDeletePolicyApiAddNewPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewPolicy(requestParameters: SoftDeletePolicyApiAddNewPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SoftDeletePolicyResponse>> {
            const addSoftDeletePolicyRequest: AddSoftDeletePolicyRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewPolicy(addSoftDeletePolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Soft Delete Policy
         * @param {SoftDeletePolicyApiDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePolicy(requestParameters: SoftDeletePolicyApiDeletePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePolicy(requestParameters.softDeletePolicyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Soft Delete Policy
         * @param {SoftDeletePolicyApiGetSingleSoftDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleSoftDeletePolicy(requestParameters: SoftDeletePolicyApiGetSingleSoftDeletePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SoftDeletePolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleSoftDeletePolicy(requestParameters.softDeletePolicyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Soft Delete Policy objects
         * @param {SoftDeletePolicyApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: SoftDeletePolicyApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SoftDeletePolicyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Soft Delete Policy by name
         * @param {SoftDeletePolicyApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: SoftDeletePolicyApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SoftDeletePolicyResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.softDeletePolicyName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SoftDeletePolicyApi - factory interface
 * @export
 */
export const SoftDeletePolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SoftDeletePolicyApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Soft Delete Policy to the config
         * @param {SoftDeletePolicyApiAddNewPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPolicy(requestParameters: SoftDeletePolicyApiAddNewPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<SoftDeletePolicyResponse> {
            return localVarFp.addNewPolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Soft Delete Policy
         * @param {SoftDeletePolicyApiDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy(requestParameters: SoftDeletePolicyApiDeletePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Soft Delete Policy
         * @param {SoftDeletePolicyApiGetSingleSoftDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleSoftDeletePolicy(requestParameters: SoftDeletePolicyApiGetSingleSoftDeletePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<SoftDeletePolicyResponse> {
            return localVarFp.getSingleSoftDeletePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Soft Delete Policy objects
         * @param {SoftDeletePolicyApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: SoftDeletePolicyApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SoftDeletePolicyListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Soft Delete Policy by name
         * @param {SoftDeletePolicyApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: SoftDeletePolicyApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<SoftDeletePolicyResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewPolicy operation in SoftDeletePolicyApi.
 * @export
 * @interface SoftDeletePolicyApiAddNewPolicyRequest
 */
export type SoftDeletePolicyApiAddNewPolicyRequest = {
    
} & AddSoftDeletePolicyRequest

/**
 * Request parameters for deletePolicy operation in SoftDeletePolicyApi.
 * @export
 * @interface SoftDeletePolicyApiDeletePolicyRequest
 */
export type SoftDeletePolicyApiDeletePolicyRequest = {
    
    /**
    * Name of the Soft Delete Policy
    * @type {string}
    * @memberof SoftDeletePolicyApiDeletePolicy
    */
    readonly softDeletePolicyName: string
    
}

/**
 * Request parameters for getSingleSoftDeletePolicy operation in SoftDeletePolicyApi.
 * @export
 * @interface SoftDeletePolicyApiGetSingleSoftDeletePolicyRequest
 */
export type SoftDeletePolicyApiGetSingleSoftDeletePolicyRequest = {
    
    /**
    * Name of the Soft Delete Policy
    * @type {string}
    * @memberof SoftDeletePolicyApiGetSingleSoftDeletePolicy
    */
    readonly softDeletePolicyName: string
    
}

/**
 * Request parameters for listAllObjects operation in SoftDeletePolicyApi.
 * @export
 * @interface SoftDeletePolicyApiListAllObjectsRequest
 */
export type SoftDeletePolicyApiListAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof SoftDeletePolicyApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in SoftDeletePolicyApi.
 * @export
 * @interface SoftDeletePolicyApiUpdateByNameRequest
 */
export type SoftDeletePolicyApiUpdateByNameRequest = {
    
    /**
    * Name of the Soft Delete Policy
    * @type {string}
    * @memberof SoftDeletePolicyApiUpdateByName
    */
    readonly softDeletePolicyName: string
    
} & UpdateRequest

/**
 * SoftDeletePolicyApiGenerated - object-oriented interface
 * @export
 * @class SoftDeletePolicyApiGenerated
 * @extends {BaseAPI}
 */
export class SoftDeletePolicyApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Soft Delete Policy to the config
     * @param {SoftDeletePolicyApiAddNewPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftDeletePolicyApiGenerated
     */
    public addNewPolicy(requestParameters: SoftDeletePolicyApiAddNewPolicyRequest, options?: AxiosRequestConfig) {
        return SoftDeletePolicyApiFp(this.configuration).addNewPolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Soft Delete Policy
     * @param {SoftDeletePolicyApiDeletePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftDeletePolicyApiGenerated
     */
    public deletePolicy(requestParameters: SoftDeletePolicyApiDeletePolicyRequest, options?: AxiosRequestConfig) {
        return SoftDeletePolicyApiFp(this.configuration).deletePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Soft Delete Policy
     * @param {SoftDeletePolicyApiGetSingleSoftDeletePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftDeletePolicyApiGenerated
     */
    public getSingleSoftDeletePolicy(requestParameters: SoftDeletePolicyApiGetSingleSoftDeletePolicyRequest, options?: AxiosRequestConfig) {
        return SoftDeletePolicyApiFp(this.configuration).getSingleSoftDeletePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Soft Delete Policy objects
     * @param {SoftDeletePolicyApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftDeletePolicyApiGenerated
     */
    public listAllObjects(requestParameters: SoftDeletePolicyApiListAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return SoftDeletePolicyApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Soft Delete Policy by name
     * @param {SoftDeletePolicyApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftDeletePolicyApiGenerated
     */
    public updateByName(requestParameters: SoftDeletePolicyApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return SoftDeletePolicyApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
