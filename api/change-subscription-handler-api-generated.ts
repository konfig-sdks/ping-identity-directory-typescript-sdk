/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddChangeSubscriptionHandler200Response } from '../models';
// @ts-ignore
import { AddChangeSubscriptionHandlerRequest } from '../models';
// @ts-ignore
import { ChangeSubscriptionHandlerListResponse } from '../models';
// @ts-ignore
import { EnumthirdPartyChangeSubscriptionHandlerSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ChangeSubscriptionHandlerApi - axios parameter creator
 * @export
 */
export const ChangeSubscriptionHandlerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Change Subscription Handler to the config
         * @param {AddChangeSubscriptionHandlerRequest} addChangeSubscriptionHandlerRequest Create a new Change Subscription Handler in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewHandler: async (addChangeSubscriptionHandlerRequest: AddChangeSubscriptionHandlerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addChangeSubscriptionHandlerRequest' is not null or undefined
            assertParamExists('addNewHandler', 'addChangeSubscriptionHandlerRequest', addChangeSubscriptionHandlerRequest)
            const localVarPath = `/change-subscription-handlers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addChangeSubscriptionHandlerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/change-subscription-handlers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addChangeSubscriptionHandlerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Change Subscription Handler
         * @param {string} changeSubscriptionHandlerName Name of the Change Subscription Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHandler: async (changeSubscriptionHandlerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeSubscriptionHandlerName' is not null or undefined
            assertParamExists('deleteHandler', 'changeSubscriptionHandlerName', changeSubscriptionHandlerName)
            const localVarPath = `/change-subscription-handlers/{change-subscription-handler-name}`
                .replace(`{${"change-subscription-handler-name"}}`, encodeURIComponent(String(changeSubscriptionHandlerName !== undefined ? changeSubscriptionHandlerName : `-change-subscription-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/change-subscription-handlers/{change-subscription-handler-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Change Subscription Handler
         * @param {string} changeSubscriptionHandlerName Name of the Change Subscription Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (changeSubscriptionHandlerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeSubscriptionHandlerName' is not null or undefined
            assertParamExists('getSingle', 'changeSubscriptionHandlerName', changeSubscriptionHandlerName)
            const localVarPath = `/change-subscription-handlers/{change-subscription-handler-name}`
                .replace(`{${"change-subscription-handler-name"}}`, encodeURIComponent(String(changeSubscriptionHandlerName !== undefined ? changeSubscriptionHandlerName : `-change-subscription-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/change-subscription-handlers/{change-subscription-handler-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Change Subscription Handler objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllHandlers: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/change-subscription-handlers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/change-subscription-handlers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Change Subscription Handler by name
         * @param {string} changeSubscriptionHandlerName Name of the Change Subscription Handler
         * @param {UpdateRequest} updateRequest Update an existing Change Subscription Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (changeSubscriptionHandlerName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeSubscriptionHandlerName' is not null or undefined
            assertParamExists('updateByName', 'changeSubscriptionHandlerName', changeSubscriptionHandlerName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/change-subscription-handlers/{change-subscription-handler-name}`
                .replace(`{${"change-subscription-handler-name"}}`, encodeURIComponent(String(changeSubscriptionHandlerName !== undefined ? changeSubscriptionHandlerName : `-change-subscription-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/change-subscription-handlers/{change-subscription-handler-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChangeSubscriptionHandlerApi - functional programming interface
 * @export
 */
export const ChangeSubscriptionHandlerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChangeSubscriptionHandlerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Change Subscription Handler to the config
         * @param {ChangeSubscriptionHandlerApiAddNewHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewHandler(requestParameters: ChangeSubscriptionHandlerApiAddNewHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddChangeSubscriptionHandler200Response>> {
            const addChangeSubscriptionHandlerRequest: AddChangeSubscriptionHandlerRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewHandler(addChangeSubscriptionHandlerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Change Subscription Handler
         * @param {ChangeSubscriptionHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHandler(requestParameters: ChangeSubscriptionHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHandler(requestParameters.changeSubscriptionHandlerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Change Subscription Handler
         * @param {ChangeSubscriptionHandlerApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: ChangeSubscriptionHandlerApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddChangeSubscriptionHandler200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.changeSubscriptionHandlerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Change Subscription Handler objects
         * @param {ChangeSubscriptionHandlerApiListAllHandlersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllHandlers(requestParameters: ChangeSubscriptionHandlerApiListAllHandlersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeSubscriptionHandlerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllHandlers(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Change Subscription Handler by name
         * @param {ChangeSubscriptionHandlerApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ChangeSubscriptionHandlerApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddChangeSubscriptionHandler200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.changeSubscriptionHandlerName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChangeSubscriptionHandlerApi - factory interface
 * @export
 */
export const ChangeSubscriptionHandlerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChangeSubscriptionHandlerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Change Subscription Handler to the config
         * @param {ChangeSubscriptionHandlerApiAddNewHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewHandler(requestParameters: ChangeSubscriptionHandlerApiAddNewHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<AddChangeSubscriptionHandler200Response> {
            return localVarFp.addNewHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Change Subscription Handler
         * @param {ChangeSubscriptionHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHandler(requestParameters: ChangeSubscriptionHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Change Subscription Handler
         * @param {ChangeSubscriptionHandlerApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: ChangeSubscriptionHandlerApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddChangeSubscriptionHandler200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Change Subscription Handler objects
         * @param {ChangeSubscriptionHandlerApiListAllHandlersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllHandlers(requestParameters: ChangeSubscriptionHandlerApiListAllHandlersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ChangeSubscriptionHandlerListResponse> {
            return localVarFp.listAllHandlers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Change Subscription Handler by name
         * @param {ChangeSubscriptionHandlerApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ChangeSubscriptionHandlerApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddChangeSubscriptionHandler200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewHandler operation in ChangeSubscriptionHandlerApi.
 * @export
 * @interface ChangeSubscriptionHandlerApiAddNewHandlerRequest
 */
export type ChangeSubscriptionHandlerApiAddNewHandlerRequest = {
    
} & AddChangeSubscriptionHandlerRequest

/**
 * Request parameters for deleteHandler operation in ChangeSubscriptionHandlerApi.
 * @export
 * @interface ChangeSubscriptionHandlerApiDeleteHandlerRequest
 */
export type ChangeSubscriptionHandlerApiDeleteHandlerRequest = {
    
    /**
    * Name of the Change Subscription Handler
    * @type {string}
    * @memberof ChangeSubscriptionHandlerApiDeleteHandler
    */
    readonly changeSubscriptionHandlerName: string
    
}

/**
 * Request parameters for getSingle operation in ChangeSubscriptionHandlerApi.
 * @export
 * @interface ChangeSubscriptionHandlerApiGetSingleRequest
 */
export type ChangeSubscriptionHandlerApiGetSingleRequest = {
    
    /**
    * Name of the Change Subscription Handler
    * @type {string}
    * @memberof ChangeSubscriptionHandlerApiGetSingle
    */
    readonly changeSubscriptionHandlerName: string
    
}

/**
 * Request parameters for listAllHandlers operation in ChangeSubscriptionHandlerApi.
 * @export
 * @interface ChangeSubscriptionHandlerApiListAllHandlersRequest
 */
export type ChangeSubscriptionHandlerApiListAllHandlersRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ChangeSubscriptionHandlerApiListAllHandlers
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in ChangeSubscriptionHandlerApi.
 * @export
 * @interface ChangeSubscriptionHandlerApiUpdateByNameRequest
 */
export type ChangeSubscriptionHandlerApiUpdateByNameRequest = {
    
    /**
    * Name of the Change Subscription Handler
    * @type {string}
    * @memberof ChangeSubscriptionHandlerApiUpdateByName
    */
    readonly changeSubscriptionHandlerName: string
    
} & UpdateRequest

/**
 * ChangeSubscriptionHandlerApiGenerated - object-oriented interface
 * @export
 * @class ChangeSubscriptionHandlerApiGenerated
 * @extends {BaseAPI}
 */
export class ChangeSubscriptionHandlerApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Change Subscription Handler to the config
     * @param {ChangeSubscriptionHandlerApiAddNewHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeSubscriptionHandlerApiGenerated
     */
    public addNewHandler(requestParameters: ChangeSubscriptionHandlerApiAddNewHandlerRequest, options?: AxiosRequestConfig) {
        return ChangeSubscriptionHandlerApiFp(this.configuration).addNewHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Change Subscription Handler
     * @param {ChangeSubscriptionHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeSubscriptionHandlerApiGenerated
     */
    public deleteHandler(requestParameters: ChangeSubscriptionHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig) {
        return ChangeSubscriptionHandlerApiFp(this.configuration).deleteHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Change Subscription Handler
     * @param {ChangeSubscriptionHandlerApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeSubscriptionHandlerApiGenerated
     */
    public getSingle(requestParameters: ChangeSubscriptionHandlerApiGetSingleRequest, options?: AxiosRequestConfig) {
        return ChangeSubscriptionHandlerApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Change Subscription Handler objects
     * @param {ChangeSubscriptionHandlerApiListAllHandlersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeSubscriptionHandlerApiGenerated
     */
    public listAllHandlers(requestParameters: ChangeSubscriptionHandlerApiListAllHandlersRequest = {}, options?: AxiosRequestConfig) {
        return ChangeSubscriptionHandlerApiFp(this.configuration).listAllHandlers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Change Subscription Handler by name
     * @param {ChangeSubscriptionHandlerApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeSubscriptionHandlerApiGenerated
     */
    public updateByName(requestParameters: ChangeSubscriptionHandlerApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ChangeSubscriptionHandlerApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
