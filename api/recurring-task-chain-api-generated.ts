/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddRecurringTaskChainRequest } from '../models';
// @ts-ignore
import { EnumrecurringTaskChainInterruptedByShutdownBehaviorProp } from '../models';
// @ts-ignore
import { EnumrecurringTaskChainScheduledDateSelectionTypeProp } from '../models';
// @ts-ignore
import { EnumrecurringTaskChainScheduledDayOfTheMonthProp } from '../models';
// @ts-ignore
import { EnumrecurringTaskChainScheduledDayOfTheWeekProp } from '../models';
// @ts-ignore
import { EnumrecurringTaskChainScheduledMonthProp } from '../models';
// @ts-ignore
import { EnumrecurringTaskChainSchemaUrn } from '../models';
// @ts-ignore
import { EnumrecurringTaskChainServerOfflineAtStartTimeBehaviorProp } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { RecurringTaskChainListResponse } from '../models';
// @ts-ignore
import { RecurringTaskChainResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RecurringTaskChainApi - axios parameter creator
 * @export
 */
export const RecurringTaskChainApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Recurring Task Chain to the config
         * @param {AddRecurringTaskChainRequest} addRecurringTaskChainRequest Create a new Recurring Task Chain in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig: async (addRecurringTaskChainRequest: AddRecurringTaskChainRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addRecurringTaskChainRequest' is not null or undefined
            assertParamExists('addNewToConfig', 'addRecurringTaskChainRequest', addRecurringTaskChainRequest)
            const localVarPath = `/recurring-task-chains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addRecurringTaskChainRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recurring-task-chains',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addRecurringTaskChainRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Recurring Task Chain
         * @param {string} recurringTaskChainName Name of the Recurring Task Chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChain: async (recurringTaskChainName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recurringTaskChainName' is not null or undefined
            assertParamExists('deleteChain', 'recurringTaskChainName', recurringTaskChainName)
            const localVarPath = `/recurring-task-chains/{recurring-task-chain-name}`
                .replace(`{${"recurring-task-chain-name"}}`, encodeURIComponent(String(recurringTaskChainName !== undefined ? recurringTaskChainName : `-recurring-task-chain-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recurring-task-chains/{recurring-task-chain-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Recurring Task Chain
         * @param {string} recurringTaskChainName Name of the Recurring Task Chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (recurringTaskChainName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recurringTaskChainName' is not null or undefined
            assertParamExists('getSingle', 'recurringTaskChainName', recurringTaskChainName)
            const localVarPath = `/recurring-task-chains/{recurring-task-chain-name}`
                .replace(`{${"recurring-task-chain-name"}}`, encodeURIComponent(String(recurringTaskChainName !== undefined ? recurringTaskChainName : `-recurring-task-chain-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recurring-task-chains/{recurring-task-chain-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Recurring Task Chain objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recurring-task-chains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recurring-task-chains',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Recurring Task Chain by name
         * @param {string} recurringTaskChainName Name of the Recurring Task Chain
         * @param {UpdateRequest} updateRequest Update an existing Recurring Task Chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByRecurringTaskChainName: async (recurringTaskChainName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recurringTaskChainName' is not null or undefined
            assertParamExists('updateByRecurringTaskChainName', 'recurringTaskChainName', recurringTaskChainName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByRecurringTaskChainName', 'updateRequest', updateRequest)
            const localVarPath = `/recurring-task-chains/{recurring-task-chain-name}`
                .replace(`{${"recurring-task-chain-name"}}`, encodeURIComponent(String(recurringTaskChainName !== undefined ? recurringTaskChainName : `-recurring-task-chain-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recurring-task-chains/{recurring-task-chain-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecurringTaskChainApi - functional programming interface
 * @export
 */
export const RecurringTaskChainApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecurringTaskChainApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Recurring Task Chain to the config
         * @param {RecurringTaskChainApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewToConfig(requestParameters: RecurringTaskChainApiAddNewToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecurringTaskChainResponse>> {
            const addRecurringTaskChainRequest: AddRecurringTaskChainRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewToConfig(addRecurringTaskChainRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Recurring Task Chain
         * @param {RecurringTaskChainApiDeleteChainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChain(requestParameters: RecurringTaskChainApiDeleteChainRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChain(requestParameters.recurringTaskChainName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Recurring Task Chain
         * @param {RecurringTaskChainApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: RecurringTaskChainApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecurringTaskChainResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.recurringTaskChainName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Recurring Task Chain objects
         * @param {RecurringTaskChainApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: RecurringTaskChainApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecurringTaskChainListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Recurring Task Chain by name
         * @param {RecurringTaskChainApiUpdateByRecurringTaskChainNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByRecurringTaskChainName(requestParameters: RecurringTaskChainApiUpdateByRecurringTaskChainNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecurringTaskChainResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByRecurringTaskChainName(requestParameters.recurringTaskChainName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecurringTaskChainApi - factory interface
 * @export
 */
export const RecurringTaskChainApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecurringTaskChainApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Recurring Task Chain to the config
         * @param {RecurringTaskChainApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig(requestParameters: RecurringTaskChainApiAddNewToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<RecurringTaskChainResponse> {
            return localVarFp.addNewToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Recurring Task Chain
         * @param {RecurringTaskChainApiDeleteChainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChain(requestParameters: RecurringTaskChainApiDeleteChainRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteChain(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Recurring Task Chain
         * @param {RecurringTaskChainApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: RecurringTaskChainApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<RecurringTaskChainResponse> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Recurring Task Chain objects
         * @param {RecurringTaskChainApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: RecurringTaskChainApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RecurringTaskChainListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Recurring Task Chain by name
         * @param {RecurringTaskChainApiUpdateByRecurringTaskChainNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByRecurringTaskChainName(requestParameters: RecurringTaskChainApiUpdateByRecurringTaskChainNameRequest, options?: AxiosRequestConfig): AxiosPromise<RecurringTaskChainResponse> {
            return localVarFp.updateByRecurringTaskChainName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewToConfig operation in RecurringTaskChainApi.
 * @export
 * @interface RecurringTaskChainApiAddNewToConfigRequest
 */
export type RecurringTaskChainApiAddNewToConfigRequest = {
    
} & AddRecurringTaskChainRequest

/**
 * Request parameters for deleteChain operation in RecurringTaskChainApi.
 * @export
 * @interface RecurringTaskChainApiDeleteChainRequest
 */
export type RecurringTaskChainApiDeleteChainRequest = {
    
    /**
    * Name of the Recurring Task Chain
    * @type {string}
    * @memberof RecurringTaskChainApiDeleteChain
    */
    readonly recurringTaskChainName: string
    
}

/**
 * Request parameters for getSingle operation in RecurringTaskChainApi.
 * @export
 * @interface RecurringTaskChainApiGetSingleRequest
 */
export type RecurringTaskChainApiGetSingleRequest = {
    
    /**
    * Name of the Recurring Task Chain
    * @type {string}
    * @memberof RecurringTaskChainApiGetSingle
    */
    readonly recurringTaskChainName: string
    
}

/**
 * Request parameters for listAllObjects operation in RecurringTaskChainApi.
 * @export
 * @interface RecurringTaskChainApiListAllObjectsRequest
 */
export type RecurringTaskChainApiListAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof RecurringTaskChainApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByRecurringTaskChainName operation in RecurringTaskChainApi.
 * @export
 * @interface RecurringTaskChainApiUpdateByRecurringTaskChainNameRequest
 */
export type RecurringTaskChainApiUpdateByRecurringTaskChainNameRequest = {
    
    /**
    * Name of the Recurring Task Chain
    * @type {string}
    * @memberof RecurringTaskChainApiUpdateByRecurringTaskChainName
    */
    readonly recurringTaskChainName: string
    
} & UpdateRequest

/**
 * RecurringTaskChainApiGenerated - object-oriented interface
 * @export
 * @class RecurringTaskChainApiGenerated
 * @extends {BaseAPI}
 */
export class RecurringTaskChainApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Recurring Task Chain to the config
     * @param {RecurringTaskChainApiAddNewToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringTaskChainApiGenerated
     */
    public addNewToConfig(requestParameters: RecurringTaskChainApiAddNewToConfigRequest, options?: AxiosRequestConfig) {
        return RecurringTaskChainApiFp(this.configuration).addNewToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Recurring Task Chain
     * @param {RecurringTaskChainApiDeleteChainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringTaskChainApiGenerated
     */
    public deleteChain(requestParameters: RecurringTaskChainApiDeleteChainRequest, options?: AxiosRequestConfig) {
        return RecurringTaskChainApiFp(this.configuration).deleteChain(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Recurring Task Chain
     * @param {RecurringTaskChainApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringTaskChainApiGenerated
     */
    public getSingle(requestParameters: RecurringTaskChainApiGetSingleRequest, options?: AxiosRequestConfig) {
        return RecurringTaskChainApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Recurring Task Chain objects
     * @param {RecurringTaskChainApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringTaskChainApiGenerated
     */
    public listAllObjects(requestParameters: RecurringTaskChainApiListAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return RecurringTaskChainApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Recurring Task Chain by name
     * @param {RecurringTaskChainApiUpdateByRecurringTaskChainNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringTaskChainApiGenerated
     */
    public updateByRecurringTaskChainName(requestParameters: RecurringTaskChainApiUpdateByRecurringTaskChainNameRequest, options?: AxiosRequestConfig) {
        return RecurringTaskChainApiFp(this.configuration).updateByRecurringTaskChainName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
