/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddScimAttributeMappingRequest } from '../models';
// @ts-ignore
import { EnumscimAttributeMappingSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { ScimAttributeMappingListResponse } from '../models';
// @ts-ignore
import { ScimAttributeMappingResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ScimAttributeMappingApi - axios parameter creator
 * @export
 */
export const ScimAttributeMappingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new SCIM Attribute Mapping to the config
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {AddScimAttributeMappingRequest} addScimAttributeMappingRequest Create a new SCIM Attribute Mapping in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewMapping: async (scimResourceTypeName: string, addScimAttributeMappingRequest: AddScimAttributeMappingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('addNewMapping', 'scimResourceTypeName', scimResourceTypeName)
            // verify required parameter 'addScimAttributeMappingRequest' is not null or undefined
            assertParamExists('addNewMapping', 'addScimAttributeMappingRequest', addScimAttributeMappingRequest)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings`
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addScimAttributeMappingRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addScimAttributeMappingRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a SCIM Attribute Mapping
         * @param {string} scimAttributeMappingName Name of the SCIM Attribute Mapping
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMapping: async (scimAttributeMappingName: string, scimResourceTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimAttributeMappingName' is not null or undefined
            assertParamExists('deleteMapping', 'scimAttributeMappingName', scimAttributeMappingName)
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('deleteMapping', 'scimResourceTypeName', scimResourceTypeName)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings/{scim-attribute-mapping-name}`
                .replace(`{${"scim-attribute-mapping-name"}}`, encodeURIComponent(String(scimAttributeMappingName !== undefined ? scimAttributeMappingName : `-scim-attribute-mapping-name-`)))
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings/{scim-attribute-mapping-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all SCIM Attribute Mapping objects
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMappings: async (scimResourceTypeName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('getAllMappings', 'scimResourceTypeName', scimResourceTypeName)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings`
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single SCIM Attribute Mapping
         * @param {string} scimAttributeMappingName Name of the SCIM Attribute Mapping
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleScimAttributeMapping: async (scimAttributeMappingName: string, scimResourceTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimAttributeMappingName' is not null or undefined
            assertParamExists('getSingleScimAttributeMapping', 'scimAttributeMappingName', scimAttributeMappingName)
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('getSingleScimAttributeMapping', 'scimResourceTypeName', scimResourceTypeName)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings/{scim-attribute-mapping-name}`
                .replace(`{${"scim-attribute-mapping-name"}}`, encodeURIComponent(String(scimAttributeMappingName !== undefined ? scimAttributeMappingName : `-scim-attribute-mapping-name-`)))
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings/{scim-attribute-mapping-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing SCIM Attribute Mapping by name
         * @param {string} scimAttributeMappingName Name of the SCIM Attribute Mapping
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {UpdateRequest} updateRequest Update an existing SCIM Attribute Mapping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (scimAttributeMappingName: string, scimResourceTypeName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimAttributeMappingName' is not null or undefined
            assertParamExists('updateByName', 'scimAttributeMappingName', scimAttributeMappingName)
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('updateByName', 'scimResourceTypeName', scimResourceTypeName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings/{scim-attribute-mapping-name}`
                .replace(`{${"scim-attribute-mapping-name"}}`, encodeURIComponent(String(scimAttributeMappingName !== undefined ? scimAttributeMappingName : `-scim-attribute-mapping-name-`)))
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings/{scim-attribute-mapping-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScimAttributeMappingApi - functional programming interface
 * @export
 */
export const ScimAttributeMappingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScimAttributeMappingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new SCIM Attribute Mapping to the config
         * @param {ScimAttributeMappingApiAddNewMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewMapping(requestParameters: ScimAttributeMappingApiAddNewMappingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimAttributeMappingResponse>> {
            const addScimAttributeMappingRequest: AddScimAttributeMappingRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewMapping(requestParameters.scimResourceTypeName, addScimAttributeMappingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a SCIM Attribute Mapping
         * @param {ScimAttributeMappingApiDeleteMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMapping(requestParameters: ScimAttributeMappingApiDeleteMappingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMapping(requestParameters.scimAttributeMappingName, requestParameters.scimResourceTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all SCIM Attribute Mapping objects
         * @param {ScimAttributeMappingApiGetAllMappingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMappings(requestParameters: ScimAttributeMappingApiGetAllMappingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimAttributeMappingListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMappings(requestParameters.scimResourceTypeName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single SCIM Attribute Mapping
         * @param {ScimAttributeMappingApiGetSingleScimAttributeMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleScimAttributeMapping(requestParameters: ScimAttributeMappingApiGetSingleScimAttributeMappingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimAttributeMappingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleScimAttributeMapping(requestParameters.scimAttributeMappingName, requestParameters.scimResourceTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing SCIM Attribute Mapping by name
         * @param {ScimAttributeMappingApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ScimAttributeMappingApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimAttributeMappingResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.scimAttributeMappingName, requestParameters.scimResourceTypeName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScimAttributeMappingApi - factory interface
 * @export
 */
export const ScimAttributeMappingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScimAttributeMappingApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new SCIM Attribute Mapping to the config
         * @param {ScimAttributeMappingApiAddNewMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewMapping(requestParameters: ScimAttributeMappingApiAddNewMappingRequest, options?: AxiosRequestConfig): AxiosPromise<ScimAttributeMappingResponse> {
            return localVarFp.addNewMapping(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a SCIM Attribute Mapping
         * @param {ScimAttributeMappingApiDeleteMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMapping(requestParameters: ScimAttributeMappingApiDeleteMappingRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMapping(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all SCIM Attribute Mapping objects
         * @param {ScimAttributeMappingApiGetAllMappingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMappings(requestParameters: ScimAttributeMappingApiGetAllMappingsRequest, options?: AxiosRequestConfig): AxiosPromise<ScimAttributeMappingListResponse> {
            return localVarFp.getAllMappings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single SCIM Attribute Mapping
         * @param {ScimAttributeMappingApiGetSingleScimAttributeMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleScimAttributeMapping(requestParameters: ScimAttributeMappingApiGetSingleScimAttributeMappingRequest, options?: AxiosRequestConfig): AxiosPromise<ScimAttributeMappingResponse> {
            return localVarFp.getSingleScimAttributeMapping(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing SCIM Attribute Mapping by name
         * @param {ScimAttributeMappingApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ScimAttributeMappingApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<ScimAttributeMappingResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewMapping operation in ScimAttributeMappingApi.
 * @export
 * @interface ScimAttributeMappingApiAddNewMappingRequest
 */
export type ScimAttributeMappingApiAddNewMappingRequest = {
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof ScimAttributeMappingApiAddNewMapping
    */
    readonly scimResourceTypeName: string
    
} & AddScimAttributeMappingRequest

/**
 * Request parameters for deleteMapping operation in ScimAttributeMappingApi.
 * @export
 * @interface ScimAttributeMappingApiDeleteMappingRequest
 */
export type ScimAttributeMappingApiDeleteMappingRequest = {
    
    /**
    * Name of the SCIM Attribute Mapping
    * @type {string}
    * @memberof ScimAttributeMappingApiDeleteMapping
    */
    readonly scimAttributeMappingName: string
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof ScimAttributeMappingApiDeleteMapping
    */
    readonly scimResourceTypeName: string
    
}

/**
 * Request parameters for getAllMappings operation in ScimAttributeMappingApi.
 * @export
 * @interface ScimAttributeMappingApiGetAllMappingsRequest
 */
export type ScimAttributeMappingApiGetAllMappingsRequest = {
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof ScimAttributeMappingApiGetAllMappings
    */
    readonly scimResourceTypeName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ScimAttributeMappingApiGetAllMappings
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingleScimAttributeMapping operation in ScimAttributeMappingApi.
 * @export
 * @interface ScimAttributeMappingApiGetSingleScimAttributeMappingRequest
 */
export type ScimAttributeMappingApiGetSingleScimAttributeMappingRequest = {
    
    /**
    * Name of the SCIM Attribute Mapping
    * @type {string}
    * @memberof ScimAttributeMappingApiGetSingleScimAttributeMapping
    */
    readonly scimAttributeMappingName: string
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof ScimAttributeMappingApiGetSingleScimAttributeMapping
    */
    readonly scimResourceTypeName: string
    
}

/**
 * Request parameters for updateByName operation in ScimAttributeMappingApi.
 * @export
 * @interface ScimAttributeMappingApiUpdateByNameRequest
 */
export type ScimAttributeMappingApiUpdateByNameRequest = {
    
    /**
    * Name of the SCIM Attribute Mapping
    * @type {string}
    * @memberof ScimAttributeMappingApiUpdateByName
    */
    readonly scimAttributeMappingName: string
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof ScimAttributeMappingApiUpdateByName
    */
    readonly scimResourceTypeName: string
    
} & UpdateRequest

/**
 * ScimAttributeMappingApiGenerated - object-oriented interface
 * @export
 * @class ScimAttributeMappingApiGenerated
 * @extends {BaseAPI}
 */
export class ScimAttributeMappingApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new SCIM Attribute Mapping to the config
     * @param {ScimAttributeMappingApiAddNewMappingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimAttributeMappingApiGenerated
     */
    public addNewMapping(requestParameters: ScimAttributeMappingApiAddNewMappingRequest, options?: AxiosRequestConfig) {
        return ScimAttributeMappingApiFp(this.configuration).addNewMapping(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a SCIM Attribute Mapping
     * @param {ScimAttributeMappingApiDeleteMappingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimAttributeMappingApiGenerated
     */
    public deleteMapping(requestParameters: ScimAttributeMappingApiDeleteMappingRequest, options?: AxiosRequestConfig) {
        return ScimAttributeMappingApiFp(this.configuration).deleteMapping(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all SCIM Attribute Mapping objects
     * @param {ScimAttributeMappingApiGetAllMappingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimAttributeMappingApiGenerated
     */
    public getAllMappings(requestParameters: ScimAttributeMappingApiGetAllMappingsRequest, options?: AxiosRequestConfig) {
        return ScimAttributeMappingApiFp(this.configuration).getAllMappings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single SCIM Attribute Mapping
     * @param {ScimAttributeMappingApiGetSingleScimAttributeMappingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimAttributeMappingApiGenerated
     */
    public getSingleScimAttributeMapping(requestParameters: ScimAttributeMappingApiGetSingleScimAttributeMappingRequest, options?: AxiosRequestConfig) {
        return ScimAttributeMappingApiFp(this.configuration).getSingleScimAttributeMapping(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing SCIM Attribute Mapping by name
     * @param {ScimAttributeMappingApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimAttributeMappingApiGenerated
     */
    public updateByName(requestParameters: ScimAttributeMappingApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ScimAttributeMappingApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
