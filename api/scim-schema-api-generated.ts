/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddScimSchemaRequest } from '../models';
// @ts-ignore
import { EnumscimSchemaSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { ScimSchemaListResponse } from '../models';
// @ts-ignore
import { ScimSchemaResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ScimSchemaApi - axios parameter creator
 * @export
 */
export const ScimSchemaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new SCIM Schema to the config
         * @param {AddScimSchemaRequest} addScimSchemaRequest Create a new SCIM Schema in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewSchema: async (addScimSchemaRequest: AddScimSchemaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addScimSchemaRequest' is not null or undefined
            assertParamExists('addNewSchema', 'addScimSchemaRequest', addScimSchemaRequest)
            const localVarPath = `/scim-schemas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addScimSchemaRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addScimSchemaRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a SCIM Schema
         * @param {string} scimSchemaName Name of the SCIM Schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchema: async (scimSchemaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimSchemaName' is not null or undefined
            assertParamExists('deleteSchema', 'scimSchemaName', scimSchemaName)
            const localVarPath = `/scim-schemas/{scim-schema-name}`
                .replace(`{${"scim-schema-name"}}`, encodeURIComponent(String(scimSchemaName !== undefined ? scimSchemaName : `-scim-schema-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas/{scim-schema-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single SCIM Schema
         * @param {string} scimSchemaName Name of the SCIM Schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleSchema: async (scimSchemaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimSchemaName' is not null or undefined
            assertParamExists('getSingleSchema', 'scimSchemaName', scimSchemaName)
            const localVarPath = `/scim-schemas/{scim-schema-name}`
                .replace(`{${"scim-schema-name"}}`, encodeURIComponent(String(scimSchemaName !== undefined ? scimSchemaName : `-scim-schema-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas/{scim-schema-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all SCIM Schema objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scim-schemas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing SCIM Schema by name
         * @param {string} scimSchemaName Name of the SCIM Schema
         * @param {UpdateRequest} updateRequest Update an existing SCIM Schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (scimSchemaName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimSchemaName' is not null or undefined
            assertParamExists('updateByName', 'scimSchemaName', scimSchemaName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/scim-schemas/{scim-schema-name}`
                .replace(`{${"scim-schema-name"}}`, encodeURIComponent(String(scimSchemaName !== undefined ? scimSchemaName : `-scim-schema-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas/{scim-schema-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScimSchemaApi - functional programming interface
 * @export
 */
export const ScimSchemaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScimSchemaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new SCIM Schema to the config
         * @param {ScimSchemaApiAddNewSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewSchema(requestParameters: ScimSchemaApiAddNewSchemaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimSchemaResponse>> {
            const addScimSchemaRequest: AddScimSchemaRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewSchema(addScimSchemaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a SCIM Schema
         * @param {ScimSchemaApiDeleteSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSchema(requestParameters: ScimSchemaApiDeleteSchemaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSchema(requestParameters.scimSchemaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single SCIM Schema
         * @param {ScimSchemaApiGetSingleSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleSchema(requestParameters: ScimSchemaApiGetSingleSchemaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimSchemaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleSchema(requestParameters.scimSchemaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all SCIM Schema objects
         * @param {ScimSchemaApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: ScimSchemaApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimSchemaListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing SCIM Schema by name
         * @param {ScimSchemaApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ScimSchemaApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimSchemaResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.scimSchemaName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScimSchemaApi - factory interface
 * @export
 */
export const ScimSchemaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScimSchemaApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new SCIM Schema to the config
         * @param {ScimSchemaApiAddNewSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewSchema(requestParameters: ScimSchemaApiAddNewSchemaRequest, options?: AxiosRequestConfig): AxiosPromise<ScimSchemaResponse> {
            return localVarFp.addNewSchema(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a SCIM Schema
         * @param {ScimSchemaApiDeleteSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchema(requestParameters: ScimSchemaApiDeleteSchemaRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSchema(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single SCIM Schema
         * @param {ScimSchemaApiGetSingleSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleSchema(requestParameters: ScimSchemaApiGetSingleSchemaRequest, options?: AxiosRequestConfig): AxiosPromise<ScimSchemaResponse> {
            return localVarFp.getSingleSchema(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all SCIM Schema objects
         * @param {ScimSchemaApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: ScimSchemaApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ScimSchemaListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing SCIM Schema by name
         * @param {ScimSchemaApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ScimSchemaApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<ScimSchemaResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewSchema operation in ScimSchemaApi.
 * @export
 * @interface ScimSchemaApiAddNewSchemaRequest
 */
export type ScimSchemaApiAddNewSchemaRequest = {
    
} & AddScimSchemaRequest

/**
 * Request parameters for deleteSchema operation in ScimSchemaApi.
 * @export
 * @interface ScimSchemaApiDeleteSchemaRequest
 */
export type ScimSchemaApiDeleteSchemaRequest = {
    
    /**
    * Name of the SCIM Schema
    * @type {string}
    * @memberof ScimSchemaApiDeleteSchema
    */
    readonly scimSchemaName: string
    
}

/**
 * Request parameters for getSingleSchema operation in ScimSchemaApi.
 * @export
 * @interface ScimSchemaApiGetSingleSchemaRequest
 */
export type ScimSchemaApiGetSingleSchemaRequest = {
    
    /**
    * Name of the SCIM Schema
    * @type {string}
    * @memberof ScimSchemaApiGetSingleSchema
    */
    readonly scimSchemaName: string
    
}

/**
 * Request parameters for listAllObjects operation in ScimSchemaApi.
 * @export
 * @interface ScimSchemaApiListAllObjectsRequest
 */
export type ScimSchemaApiListAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ScimSchemaApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in ScimSchemaApi.
 * @export
 * @interface ScimSchemaApiUpdateByNameRequest
 */
export type ScimSchemaApiUpdateByNameRequest = {
    
    /**
    * Name of the SCIM Schema
    * @type {string}
    * @memberof ScimSchemaApiUpdateByName
    */
    readonly scimSchemaName: string
    
} & UpdateRequest

/**
 * ScimSchemaApiGenerated - object-oriented interface
 * @export
 * @class ScimSchemaApiGenerated
 * @extends {BaseAPI}
 */
export class ScimSchemaApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new SCIM Schema to the config
     * @param {ScimSchemaApiAddNewSchemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimSchemaApiGenerated
     */
    public addNewSchema(requestParameters: ScimSchemaApiAddNewSchemaRequest, options?: AxiosRequestConfig) {
        return ScimSchemaApiFp(this.configuration).addNewSchema(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a SCIM Schema
     * @param {ScimSchemaApiDeleteSchemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimSchemaApiGenerated
     */
    public deleteSchema(requestParameters: ScimSchemaApiDeleteSchemaRequest, options?: AxiosRequestConfig) {
        return ScimSchemaApiFp(this.configuration).deleteSchema(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single SCIM Schema
     * @param {ScimSchemaApiGetSingleSchemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimSchemaApiGenerated
     */
    public getSingleSchema(requestParameters: ScimSchemaApiGetSingleSchemaRequest, options?: AxiosRequestConfig) {
        return ScimSchemaApiFp(this.configuration).getSingleSchema(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all SCIM Schema objects
     * @param {ScimSchemaApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimSchemaApiGenerated
     */
    public listAllObjects(requestParameters: ScimSchemaApiListAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return ScimSchemaApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing SCIM Schema by name
     * @param {ScimSchemaApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimSchemaApiGenerated
     */
    public updateByName(requestParameters: ScimSchemaApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ScimSchemaApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
