/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddScimAttributeRequest } from '../models';
// @ts-ignore
import { EnumscimAttributeMutabilityProp } from '../models';
// @ts-ignore
import { EnumscimAttributeReturnedProp } from '../models';
// @ts-ignore
import { EnumscimAttributeSchemaUrn } from '../models';
// @ts-ignore
import { EnumscimAttributeTypeProp } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { ScimAttributeListResponse } from '../models';
// @ts-ignore
import { ScimAttributeResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ScimAttributeApi - axios parameter creator
 * @export
 */
export const ScimAttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new SCIM Attribute to the config
         * @param {string} scimSchemaName Name of the SCIM Schema
         * @param {AddScimAttributeRequest} addScimAttributeRequest Create a new SCIM Attribute in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewAttribute: async (scimSchemaName: string, addScimAttributeRequest: AddScimAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimSchemaName' is not null or undefined
            assertParamExists('addNewAttribute', 'scimSchemaName', scimSchemaName)
            // verify required parameter 'addScimAttributeRequest' is not null or undefined
            assertParamExists('addNewAttribute', 'addScimAttributeRequest', addScimAttributeRequest)
            const localVarPath = `/scim-schemas/{scim-schema-name}/scim-attributes`
                .replace(`{${"scim-schema-name"}}`, encodeURIComponent(String(scimSchemaName !== undefined ? scimSchemaName : `-scim-schema-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addScimAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas/{scim-schema-name}/scim-attributes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addScimAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a SCIM Attribute
         * @param {string} scimAttributeName Name of the SCIM Attribute
         * @param {string} scimSchemaName Name of the SCIM Schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttribute: async (scimAttributeName: string, scimSchemaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimAttributeName' is not null or undefined
            assertParamExists('deleteAttribute', 'scimAttributeName', scimAttributeName)
            // verify required parameter 'scimSchemaName' is not null or undefined
            assertParamExists('deleteAttribute', 'scimSchemaName', scimSchemaName)
            const localVarPath = `/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}`
                .replace(`{${"scim-attribute-name"}}`, encodeURIComponent(String(scimAttributeName !== undefined ? scimAttributeName : `-scim-attribute-name-`)))
                .replace(`{${"scim-schema-name"}}`, encodeURIComponent(String(scimSchemaName !== undefined ? scimSchemaName : `-scim-schema-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single SCIM Attribute
         * @param {string} scimAttributeName Name of the SCIM Attribute
         * @param {string} scimSchemaName Name of the SCIM Schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleAttribute: async (scimAttributeName: string, scimSchemaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimAttributeName' is not null or undefined
            assertParamExists('getSingleAttribute', 'scimAttributeName', scimAttributeName)
            // verify required parameter 'scimSchemaName' is not null or undefined
            assertParamExists('getSingleAttribute', 'scimSchemaName', scimSchemaName)
            const localVarPath = `/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}`
                .replace(`{${"scim-attribute-name"}}`, encodeURIComponent(String(scimAttributeName !== undefined ? scimAttributeName : `-scim-attribute-name-`)))
                .replace(`{${"scim-schema-name"}}`, encodeURIComponent(String(scimSchemaName !== undefined ? scimSchemaName : `-scim-schema-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all SCIM Attribute objects
         * @param {string} scimSchemaName Name of the SCIM Schema
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllAttributes: async (scimSchemaName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimSchemaName' is not null or undefined
            assertParamExists('listAllAttributes', 'scimSchemaName', scimSchemaName)
            const localVarPath = `/scim-schemas/{scim-schema-name}/scim-attributes`
                .replace(`{${"scim-schema-name"}}`, encodeURIComponent(String(scimSchemaName !== undefined ? scimSchemaName : `-scim-schema-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas/{scim-schema-name}/scim-attributes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing SCIM Attribute by name
         * @param {string} scimAttributeName Name of the SCIM Attribute
         * @param {string} scimSchemaName Name of the SCIM Schema
         * @param {UpdateRequest} updateRequest Update an existing SCIM Attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (scimAttributeName: string, scimSchemaName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimAttributeName' is not null or undefined
            assertParamExists('updateByName', 'scimAttributeName', scimAttributeName)
            // verify required parameter 'scimSchemaName' is not null or undefined
            assertParamExists('updateByName', 'scimSchemaName', scimSchemaName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}`
                .replace(`{${"scim-attribute-name"}}`, encodeURIComponent(String(scimAttributeName !== undefined ? scimAttributeName : `-scim-attribute-name-`)))
                .replace(`{${"scim-schema-name"}}`, encodeURIComponent(String(scimSchemaName !== undefined ? scimSchemaName : `-scim-schema-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScimAttributeApi - functional programming interface
 * @export
 */
export const ScimAttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScimAttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new SCIM Attribute to the config
         * @param {ScimAttributeApiAddNewAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewAttribute(requestParameters: ScimAttributeApiAddNewAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimAttributeResponse>> {
            const addScimAttributeRequest: AddScimAttributeRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewAttribute(requestParameters.scimSchemaName, addScimAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a SCIM Attribute
         * @param {ScimAttributeApiDeleteAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttribute(requestParameters: ScimAttributeApiDeleteAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttribute(requestParameters.scimAttributeName, requestParameters.scimSchemaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single SCIM Attribute
         * @param {ScimAttributeApiGetSingleAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleAttribute(requestParameters: ScimAttributeApiGetSingleAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimAttributeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleAttribute(requestParameters.scimAttributeName, requestParameters.scimSchemaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all SCIM Attribute objects
         * @param {ScimAttributeApiListAllAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllAttributes(requestParameters: ScimAttributeApiListAllAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimAttributeListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllAttributes(requestParameters.scimSchemaName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing SCIM Attribute by name
         * @param {ScimAttributeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ScimAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimAttributeResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.scimAttributeName, requestParameters.scimSchemaName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScimAttributeApi - factory interface
 * @export
 */
export const ScimAttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScimAttributeApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new SCIM Attribute to the config
         * @param {ScimAttributeApiAddNewAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewAttribute(requestParameters: ScimAttributeApiAddNewAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<ScimAttributeResponse> {
            return localVarFp.addNewAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a SCIM Attribute
         * @param {ScimAttributeApiDeleteAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttribute(requestParameters: ScimAttributeApiDeleteAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single SCIM Attribute
         * @param {ScimAttributeApiGetSingleAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleAttribute(requestParameters: ScimAttributeApiGetSingleAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<ScimAttributeResponse> {
            return localVarFp.getSingleAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all SCIM Attribute objects
         * @param {ScimAttributeApiListAllAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllAttributes(requestParameters: ScimAttributeApiListAllAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<ScimAttributeListResponse> {
            return localVarFp.listAllAttributes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing SCIM Attribute by name
         * @param {ScimAttributeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ScimAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<ScimAttributeResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewAttribute operation in ScimAttributeApi.
 * @export
 * @interface ScimAttributeApiAddNewAttributeRequest
 */
export type ScimAttributeApiAddNewAttributeRequest = {
    
    /**
    * Name of the SCIM Schema
    * @type {string}
    * @memberof ScimAttributeApiAddNewAttribute
    */
    readonly scimSchemaName: string
    
} & AddScimAttributeRequest

/**
 * Request parameters for deleteAttribute operation in ScimAttributeApi.
 * @export
 * @interface ScimAttributeApiDeleteAttributeRequest
 */
export type ScimAttributeApiDeleteAttributeRequest = {
    
    /**
    * Name of the SCIM Attribute
    * @type {string}
    * @memberof ScimAttributeApiDeleteAttribute
    */
    readonly scimAttributeName: string
    
    /**
    * Name of the SCIM Schema
    * @type {string}
    * @memberof ScimAttributeApiDeleteAttribute
    */
    readonly scimSchemaName: string
    
}

/**
 * Request parameters for getSingleAttribute operation in ScimAttributeApi.
 * @export
 * @interface ScimAttributeApiGetSingleAttributeRequest
 */
export type ScimAttributeApiGetSingleAttributeRequest = {
    
    /**
    * Name of the SCIM Attribute
    * @type {string}
    * @memberof ScimAttributeApiGetSingleAttribute
    */
    readonly scimAttributeName: string
    
    /**
    * Name of the SCIM Schema
    * @type {string}
    * @memberof ScimAttributeApiGetSingleAttribute
    */
    readonly scimSchemaName: string
    
}

/**
 * Request parameters for listAllAttributes operation in ScimAttributeApi.
 * @export
 * @interface ScimAttributeApiListAllAttributesRequest
 */
export type ScimAttributeApiListAllAttributesRequest = {
    
    /**
    * Name of the SCIM Schema
    * @type {string}
    * @memberof ScimAttributeApiListAllAttributes
    */
    readonly scimSchemaName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ScimAttributeApiListAllAttributes
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in ScimAttributeApi.
 * @export
 * @interface ScimAttributeApiUpdateByNameRequest
 */
export type ScimAttributeApiUpdateByNameRequest = {
    
    /**
    * Name of the SCIM Attribute
    * @type {string}
    * @memberof ScimAttributeApiUpdateByName
    */
    readonly scimAttributeName: string
    
    /**
    * Name of the SCIM Schema
    * @type {string}
    * @memberof ScimAttributeApiUpdateByName
    */
    readonly scimSchemaName: string
    
} & UpdateRequest

/**
 * ScimAttributeApiGenerated - object-oriented interface
 * @export
 * @class ScimAttributeApiGenerated
 * @extends {BaseAPI}
 */
export class ScimAttributeApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new SCIM Attribute to the config
     * @param {ScimAttributeApiAddNewAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimAttributeApiGenerated
     */
    public addNewAttribute(requestParameters: ScimAttributeApiAddNewAttributeRequest, options?: AxiosRequestConfig) {
        return ScimAttributeApiFp(this.configuration).addNewAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a SCIM Attribute
     * @param {ScimAttributeApiDeleteAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimAttributeApiGenerated
     */
    public deleteAttribute(requestParameters: ScimAttributeApiDeleteAttributeRequest, options?: AxiosRequestConfig) {
        return ScimAttributeApiFp(this.configuration).deleteAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single SCIM Attribute
     * @param {ScimAttributeApiGetSingleAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimAttributeApiGenerated
     */
    public getSingleAttribute(requestParameters: ScimAttributeApiGetSingleAttributeRequest, options?: AxiosRequestConfig) {
        return ScimAttributeApiFp(this.configuration).getSingleAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all SCIM Attribute objects
     * @param {ScimAttributeApiListAllAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimAttributeApiGenerated
     */
    public listAllAttributes(requestParameters: ScimAttributeApiListAllAttributesRequest, options?: AxiosRequestConfig) {
        return ScimAttributeApiFp(this.configuration).listAllAttributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing SCIM Attribute by name
     * @param {ScimAttributeApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimAttributeApiGenerated
     */
    public updateByName(requestParameters: ScimAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ScimAttributeApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
