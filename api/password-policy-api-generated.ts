/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddPasswordPolicyRequest } from '../models';
// @ts-ignore
import { EnumpasswordPolicyAllowPreEncodedPasswordsProp } from '../models';
// @ts-ignore
import { EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp } from '../models';
// @ts-ignore
import { EnumpasswordPolicyBindPasswordValidationFailureActionProp } from '../models';
// @ts-ignore
import { EnumpasswordPolicyPasswordRetirementBehaviorProp } from '../models';
// @ts-ignore
import { EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp } from '../models';
// @ts-ignore
import { EnumpasswordPolicyReturnPasswordExpirationControlsProp } from '../models';
// @ts-ignore
import { EnumpasswordPolicySchemaUrn } from '../models';
// @ts-ignore
import { EnumpasswordPolicyStateUpdateFailurePolicyProp } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { PasswordPolicyListResponse } from '../models';
// @ts-ignore
import { PasswordPolicyResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PasswordPolicyApi - axios parameter creator
 * @export
 */
export const PasswordPolicyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Password Policy to the config
         * @param {AddPasswordPolicyRequest} addPasswordPolicyRequest Create a new Password Policy in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPolicyToConfig: async (addPasswordPolicyRequest: AddPasswordPolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addPasswordPolicyRequest' is not null or undefined
            assertParamExists('addNewPolicyToConfig', 'addPasswordPolicyRequest', addPasswordPolicyRequest)
            const localVarPath = `/password-policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addPasswordPolicyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/password-policies',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addPasswordPolicyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Password Policy
         * @param {string} passwordPolicyName Name of the Password Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy: async (passwordPolicyName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordPolicyName' is not null or undefined
            assertParamExists('deletePolicy', 'passwordPolicyName', passwordPolicyName)
            const localVarPath = `/password-policies/{password-policy-name}`
                .replace(`{${"password-policy-name"}}`, encodeURIComponent(String(passwordPolicyName !== undefined ? passwordPolicyName : `-password-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/password-policies/{password-policy-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Password Policy
         * @param {string} passwordPolicyName Name of the Password Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePolicy: async (passwordPolicyName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordPolicyName' is not null or undefined
            assertParamExists('getSinglePolicy', 'passwordPolicyName', passwordPolicyName)
            const localVarPath = `/password-policies/{password-policy-name}`
                .replace(`{${"password-policy-name"}}`, encodeURIComponent(String(passwordPolicyName !== undefined ? passwordPolicyName : `-password-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/password-policies/{password-policy-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Password Policy objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/password-policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/password-policies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Password Policy by name
         * @param {string} passwordPolicyName Name of the Password Policy
         * @param {UpdateRequest} updateRequest Update an existing Password Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (passwordPolicyName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordPolicyName' is not null or undefined
            assertParamExists('updateByName', 'passwordPolicyName', passwordPolicyName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/password-policies/{password-policy-name}`
                .replace(`{${"password-policy-name"}}`, encodeURIComponent(String(passwordPolicyName !== undefined ? passwordPolicyName : `-password-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/password-policies/{password-policy-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PasswordPolicyApi - functional programming interface
 * @export
 */
export const PasswordPolicyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PasswordPolicyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Password Policy to the config
         * @param {PasswordPolicyApiAddNewPolicyToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewPolicyToConfig(requestParameters: PasswordPolicyApiAddNewPolicyToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordPolicyResponse>> {
            const addPasswordPolicyRequest: AddPasswordPolicyRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewPolicyToConfig(addPasswordPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Password Policy
         * @param {PasswordPolicyApiDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePolicy(requestParameters: PasswordPolicyApiDeletePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePolicy(requestParameters.passwordPolicyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Password Policy
         * @param {PasswordPolicyApiGetSinglePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSinglePolicy(requestParameters: PasswordPolicyApiGetSinglePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordPolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSinglePolicy(requestParameters.passwordPolicyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Password Policy objects
         * @param {PasswordPolicyApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: PasswordPolicyApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordPolicyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Password Policy by name
         * @param {PasswordPolicyApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: PasswordPolicyApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordPolicyResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.passwordPolicyName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PasswordPolicyApi - factory interface
 * @export
 */
export const PasswordPolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PasswordPolicyApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Password Policy to the config
         * @param {PasswordPolicyApiAddNewPolicyToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPolicyToConfig(requestParameters: PasswordPolicyApiAddNewPolicyToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<PasswordPolicyResponse> {
            return localVarFp.addNewPolicyToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Password Policy
         * @param {PasswordPolicyApiDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy(requestParameters: PasswordPolicyApiDeletePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Password Policy
         * @param {PasswordPolicyApiGetSinglePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePolicy(requestParameters: PasswordPolicyApiGetSinglePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<PasswordPolicyResponse> {
            return localVarFp.getSinglePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Password Policy objects
         * @param {PasswordPolicyApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: PasswordPolicyApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PasswordPolicyListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Password Policy by name
         * @param {PasswordPolicyApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: PasswordPolicyApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<PasswordPolicyResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewPolicyToConfig operation in PasswordPolicyApi.
 * @export
 * @interface PasswordPolicyApiAddNewPolicyToConfigRequest
 */
export type PasswordPolicyApiAddNewPolicyToConfigRequest = {
    
} & AddPasswordPolicyRequest

/**
 * Request parameters for deletePolicy operation in PasswordPolicyApi.
 * @export
 * @interface PasswordPolicyApiDeletePolicyRequest
 */
export type PasswordPolicyApiDeletePolicyRequest = {
    
    /**
    * Name of the Password Policy
    * @type {string}
    * @memberof PasswordPolicyApiDeletePolicy
    */
    readonly passwordPolicyName: string
    
}

/**
 * Request parameters for getSinglePolicy operation in PasswordPolicyApi.
 * @export
 * @interface PasswordPolicyApiGetSinglePolicyRequest
 */
export type PasswordPolicyApiGetSinglePolicyRequest = {
    
    /**
    * Name of the Password Policy
    * @type {string}
    * @memberof PasswordPolicyApiGetSinglePolicy
    */
    readonly passwordPolicyName: string
    
}

/**
 * Request parameters for listAllObjects operation in PasswordPolicyApi.
 * @export
 * @interface PasswordPolicyApiListAllObjectsRequest
 */
export type PasswordPolicyApiListAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof PasswordPolicyApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in PasswordPolicyApi.
 * @export
 * @interface PasswordPolicyApiUpdateByNameRequest
 */
export type PasswordPolicyApiUpdateByNameRequest = {
    
    /**
    * Name of the Password Policy
    * @type {string}
    * @memberof PasswordPolicyApiUpdateByName
    */
    readonly passwordPolicyName: string
    
} & UpdateRequest

/**
 * PasswordPolicyApiGenerated - object-oriented interface
 * @export
 * @class PasswordPolicyApiGenerated
 * @extends {BaseAPI}
 */
export class PasswordPolicyApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Password Policy to the config
     * @param {PasswordPolicyApiAddNewPolicyToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPolicyApiGenerated
     */
    public addNewPolicyToConfig(requestParameters: PasswordPolicyApiAddNewPolicyToConfigRequest, options?: AxiosRequestConfig) {
        return PasswordPolicyApiFp(this.configuration).addNewPolicyToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Password Policy
     * @param {PasswordPolicyApiDeletePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPolicyApiGenerated
     */
    public deletePolicy(requestParameters: PasswordPolicyApiDeletePolicyRequest, options?: AxiosRequestConfig) {
        return PasswordPolicyApiFp(this.configuration).deletePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Password Policy
     * @param {PasswordPolicyApiGetSinglePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPolicyApiGenerated
     */
    public getSinglePolicy(requestParameters: PasswordPolicyApiGetSinglePolicyRequest, options?: AxiosRequestConfig) {
        return PasswordPolicyApiFp(this.configuration).getSinglePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Password Policy objects
     * @param {PasswordPolicyApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPolicyApiGenerated
     */
    public listAllObjects(requestParameters: PasswordPolicyApiListAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return PasswordPolicyApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Password Policy by name
     * @param {PasswordPolicyApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPolicyApiGenerated
     */
    public updateByName(requestParameters: PasswordPolicyApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return PasswordPolicyApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
