/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddSensitiveAttributeRequest } from '../models';
// @ts-ignore
import { EnumsensitiveAttributeAllowInAddProp } from '../models';
// @ts-ignore
import { EnumsensitiveAttributeAllowInCompareProp } from '../models';
// @ts-ignore
import { EnumsensitiveAttributeAllowInFilterProp } from '../models';
// @ts-ignore
import { EnumsensitiveAttributeAllowInModifyProp } from '../models';
// @ts-ignore
import { EnumsensitiveAttributeAllowInReturnedEntriesProp } from '../models';
// @ts-ignore
import { EnumsensitiveAttributeSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { SensitiveAttributeListResponse } from '../models';
// @ts-ignore
import { SensitiveAttributeResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SensitiveAttributeApi - axios parameter creator
 * @export
 */
export const SensitiveAttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Sensitive Attribute to the config
         * @param {AddSensitiveAttributeRequest} addSensitiveAttributeRequest Create a new Sensitive Attribute in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig: async (addSensitiveAttributeRequest: AddSensitiveAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addSensitiveAttributeRequest' is not null or undefined
            assertParamExists('addNewConfig', 'addSensitiveAttributeRequest', addSensitiveAttributeRequest)
            const localVarPath = `/sensitive-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addSensitiveAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sensitive-attributes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addSensitiveAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Sensitive Attribute
         * @param {string} sensitiveAttributeName Name of the Sensitive Attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSensitiveAttribute: async (sensitiveAttributeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sensitiveAttributeName' is not null or undefined
            assertParamExists('deleteSensitiveAttribute', 'sensitiveAttributeName', sensitiveAttributeName)
            const localVarPath = `/sensitive-attributes/{sensitive-attribute-name}`
                .replace(`{${"sensitive-attribute-name"}}`, encodeURIComponent(String(sensitiveAttributeName !== undefined ? sensitiveAttributeName : `-sensitive-attribute-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sensitive-attributes/{sensitive-attribute-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Sensitive Attribute objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sensitive-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sensitive-attributes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Sensitive Attribute
         * @param {string} sensitiveAttributeName Name of the Sensitive Attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (sensitiveAttributeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sensitiveAttributeName' is not null or undefined
            assertParamExists('getSingle', 'sensitiveAttributeName', sensitiveAttributeName)
            const localVarPath = `/sensitive-attributes/{sensitive-attribute-name}`
                .replace(`{${"sensitive-attribute-name"}}`, encodeURIComponent(String(sensitiveAttributeName !== undefined ? sensitiveAttributeName : `-sensitive-attribute-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sensitive-attributes/{sensitive-attribute-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Sensitive Attribute by name
         * @param {string} sensitiveAttributeName Name of the Sensitive Attribute
         * @param {UpdateRequest} updateRequest Update an existing Sensitive Attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (sensitiveAttributeName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sensitiveAttributeName' is not null or undefined
            assertParamExists('updateByName', 'sensitiveAttributeName', sensitiveAttributeName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/sensitive-attributes/{sensitive-attribute-name}`
                .replace(`{${"sensitive-attribute-name"}}`, encodeURIComponent(String(sensitiveAttributeName !== undefined ? sensitiveAttributeName : `-sensitive-attribute-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sensitive-attributes/{sensitive-attribute-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SensitiveAttributeApi - functional programming interface
 * @export
 */
export const SensitiveAttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SensitiveAttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Sensitive Attribute to the config
         * @param {SensitiveAttributeApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewConfig(requestParameters: SensitiveAttributeApiAddNewConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SensitiveAttributeResponse>> {
            const addSensitiveAttributeRequest: AddSensitiveAttributeRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewConfig(addSensitiveAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Sensitive Attribute
         * @param {SensitiveAttributeApiDeleteSensitiveAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSensitiveAttribute(requestParameters: SensitiveAttributeApiDeleteSensitiveAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSensitiveAttribute(requestParameters.sensitiveAttributeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Sensitive Attribute objects
         * @param {SensitiveAttributeApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: SensitiveAttributeApiGetAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SensitiveAttributeListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Sensitive Attribute
         * @param {SensitiveAttributeApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: SensitiveAttributeApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SensitiveAttributeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.sensitiveAttributeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Sensitive Attribute by name
         * @param {SensitiveAttributeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: SensitiveAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SensitiveAttributeResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.sensitiveAttributeName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SensitiveAttributeApi - factory interface
 * @export
 */
export const SensitiveAttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SensitiveAttributeApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Sensitive Attribute to the config
         * @param {SensitiveAttributeApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig(requestParameters: SensitiveAttributeApiAddNewConfigRequest, options?: AxiosRequestConfig): AxiosPromise<SensitiveAttributeResponse> {
            return localVarFp.addNewConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Sensitive Attribute
         * @param {SensitiveAttributeApiDeleteSensitiveAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSensitiveAttribute(requestParameters: SensitiveAttributeApiDeleteSensitiveAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSensitiveAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Sensitive Attribute objects
         * @param {SensitiveAttributeApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: SensitiveAttributeApiGetAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SensitiveAttributeListResponse> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Sensitive Attribute
         * @param {SensitiveAttributeApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: SensitiveAttributeApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<SensitiveAttributeResponse> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Sensitive Attribute by name
         * @param {SensitiveAttributeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: SensitiveAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<SensitiveAttributeResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewConfig operation in SensitiveAttributeApi.
 * @export
 * @interface SensitiveAttributeApiAddNewConfigRequest
 */
export type SensitiveAttributeApiAddNewConfigRequest = {
    
} & AddSensitiveAttributeRequest

/**
 * Request parameters for deleteSensitiveAttribute operation in SensitiveAttributeApi.
 * @export
 * @interface SensitiveAttributeApiDeleteSensitiveAttributeRequest
 */
export type SensitiveAttributeApiDeleteSensitiveAttributeRequest = {
    
    /**
    * Name of the Sensitive Attribute
    * @type {string}
    * @memberof SensitiveAttributeApiDeleteSensitiveAttribute
    */
    readonly sensitiveAttributeName: string
    
}

/**
 * Request parameters for getAll operation in SensitiveAttributeApi.
 * @export
 * @interface SensitiveAttributeApiGetAllRequest
 */
export type SensitiveAttributeApiGetAllRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof SensitiveAttributeApiGetAll
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingle operation in SensitiveAttributeApi.
 * @export
 * @interface SensitiveAttributeApiGetSingleRequest
 */
export type SensitiveAttributeApiGetSingleRequest = {
    
    /**
    * Name of the Sensitive Attribute
    * @type {string}
    * @memberof SensitiveAttributeApiGetSingle
    */
    readonly sensitiveAttributeName: string
    
}

/**
 * Request parameters for updateByName operation in SensitiveAttributeApi.
 * @export
 * @interface SensitiveAttributeApiUpdateByNameRequest
 */
export type SensitiveAttributeApiUpdateByNameRequest = {
    
    /**
    * Name of the Sensitive Attribute
    * @type {string}
    * @memberof SensitiveAttributeApiUpdateByName
    */
    readonly sensitiveAttributeName: string
    
} & UpdateRequest

/**
 * SensitiveAttributeApiGenerated - object-oriented interface
 * @export
 * @class SensitiveAttributeApiGenerated
 * @extends {BaseAPI}
 */
export class SensitiveAttributeApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Sensitive Attribute to the config
     * @param {SensitiveAttributeApiAddNewConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensitiveAttributeApiGenerated
     */
    public addNewConfig(requestParameters: SensitiveAttributeApiAddNewConfigRequest, options?: AxiosRequestConfig) {
        return SensitiveAttributeApiFp(this.configuration).addNewConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Sensitive Attribute
     * @param {SensitiveAttributeApiDeleteSensitiveAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensitiveAttributeApiGenerated
     */
    public deleteSensitiveAttribute(requestParameters: SensitiveAttributeApiDeleteSensitiveAttributeRequest, options?: AxiosRequestConfig) {
        return SensitiveAttributeApiFp(this.configuration).deleteSensitiveAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Sensitive Attribute objects
     * @param {SensitiveAttributeApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensitiveAttributeApiGenerated
     */
    public getAll(requestParameters: SensitiveAttributeApiGetAllRequest = {}, options?: AxiosRequestConfig) {
        return SensitiveAttributeApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Sensitive Attribute
     * @param {SensitiveAttributeApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensitiveAttributeApiGenerated
     */
    public getSingle(requestParameters: SensitiveAttributeApiGetSingleRequest, options?: AxiosRequestConfig) {
        return SensitiveAttributeApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Sensitive Attribute by name
     * @param {SensitiveAttributeApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensitiveAttributeApiGenerated
     */
    public updateByName(requestParameters: SensitiveAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return SensitiveAttributeApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
