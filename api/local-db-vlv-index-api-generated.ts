/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddLocalDbVlvIndexRequest } from '../models';
// @ts-ignore
import { EnumlocalDbVlvIndexCacheModeProp } from '../models';
// @ts-ignore
import { EnumlocalDbVlvIndexSchemaUrn } from '../models';
// @ts-ignore
import { EnumlocalDbVlvIndexScopeProp } from '../models';
// @ts-ignore
import { LocalDbVlvIndexListResponse } from '../models';
// @ts-ignore
import { LocalDbVlvIndexResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LocalDbVlvIndexApi - axios parameter creator
 * @export
 */
export const LocalDbVlvIndexApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Local DB VLV Index to the config
         * @param {string} backendName Name of the Backend
         * @param {AddLocalDbVlvIndexRequest} addLocalDbVlvIndexRequest Create a new Local DB VLV Index in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewIndexToConfig: async (backendName: string, addLocalDbVlvIndexRequest: AddLocalDbVlvIndexRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backendName' is not null or undefined
            assertParamExists('addNewIndexToConfig', 'backendName', backendName)
            // verify required parameter 'addLocalDbVlvIndexRequest' is not null or undefined
            assertParamExists('addNewIndexToConfig', 'addLocalDbVlvIndexRequest', addLocalDbVlvIndexRequest)
            const localVarPath = `/backends/{backend-name}/local-db-vlv-indexes`
                .replace(`{${"backend-name"}}`, encodeURIComponent(String(backendName !== undefined ? backendName : `-backend-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addLocalDbVlvIndexRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends/{backend-name}/local-db-vlv-indexes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addLocalDbVlvIndexRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Local DB VLV Index
         * @param {string} localDbVlvIndexName Name of the Local DB VLV Index
         * @param {string} backendName Name of the Backend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (localDbVlvIndexName: string, backendName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'localDbVlvIndexName' is not null or undefined
            assertParamExists('delete', 'localDbVlvIndexName', localDbVlvIndexName)
            // verify required parameter 'backendName' is not null or undefined
            assertParamExists('delete', 'backendName', backendName)
            const localVarPath = `/backends/{backend-name}/local-db-vlv-indexes/{local-db-vlv-index-name}`
                .replace(`{${"local-db-vlv-index-name"}}`, encodeURIComponent(String(localDbVlvIndexName !== undefined ? localDbVlvIndexName : `-local-db-vlv-index-name-`)))
                .replace(`{${"backend-name"}}`, encodeURIComponent(String(backendName !== undefined ? backendName : `-backend-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends/{backend-name}/local-db-vlv-indexes/{local-db-vlv-index-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Local DB VLV Index
         * @param {string} localDbVlvIndexName Name of the Local DB VLV Index
         * @param {string} backendName Name of the Backend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (localDbVlvIndexName: string, backendName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'localDbVlvIndexName' is not null or undefined
            assertParamExists('getSingle', 'localDbVlvIndexName', localDbVlvIndexName)
            // verify required parameter 'backendName' is not null or undefined
            assertParamExists('getSingle', 'backendName', backendName)
            const localVarPath = `/backends/{backend-name}/local-db-vlv-indexes/{local-db-vlv-index-name}`
                .replace(`{${"local-db-vlv-index-name"}}`, encodeURIComponent(String(localDbVlvIndexName !== undefined ? localDbVlvIndexName : `-local-db-vlv-index-name-`)))
                .replace(`{${"backend-name"}}`, encodeURIComponent(String(backendName !== undefined ? backendName : `-backend-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends/{backend-name}/local-db-vlv-indexes/{local-db-vlv-index-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Local DB VLV Index objects
         * @param {string} backendName Name of the Backend
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects: async (backendName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backendName' is not null or undefined
            assertParamExists('listObjects', 'backendName', backendName)
            const localVarPath = `/backends/{backend-name}/local-db-vlv-indexes`
                .replace(`{${"backend-name"}}`, encodeURIComponent(String(backendName !== undefined ? backendName : `-backend-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends/{backend-name}/local-db-vlv-indexes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Local DB VLV Index by name
         * @param {string} localDbVlvIndexName Name of the Local DB VLV Index
         * @param {string} backendName Name of the Backend
         * @param {UpdateRequest} updateRequest Update an existing Local DB VLV Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (localDbVlvIndexName: string, backendName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'localDbVlvIndexName' is not null or undefined
            assertParamExists('updateByName', 'localDbVlvIndexName', localDbVlvIndexName)
            // verify required parameter 'backendName' is not null or undefined
            assertParamExists('updateByName', 'backendName', backendName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/backends/{backend-name}/local-db-vlv-indexes/{local-db-vlv-index-name}`
                .replace(`{${"local-db-vlv-index-name"}}`, encodeURIComponent(String(localDbVlvIndexName !== undefined ? localDbVlvIndexName : `-local-db-vlv-index-name-`)))
                .replace(`{${"backend-name"}}`, encodeURIComponent(String(backendName !== undefined ? backendName : `-backend-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends/{backend-name}/local-db-vlv-indexes/{local-db-vlv-index-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocalDbVlvIndexApi - functional programming interface
 * @export
 */
export const LocalDbVlvIndexApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocalDbVlvIndexApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Local DB VLV Index to the config
         * @param {LocalDbVlvIndexApiAddNewIndexToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewIndexToConfig(requestParameters: LocalDbVlvIndexApiAddNewIndexToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalDbVlvIndexResponse>> {
            const addLocalDbVlvIndexRequest: AddLocalDbVlvIndexRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewIndexToConfig(requestParameters.backendName, addLocalDbVlvIndexRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Local DB VLV Index
         * @param {LocalDbVlvIndexApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: LocalDbVlvIndexApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(requestParameters.localDbVlvIndexName, requestParameters.backendName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Local DB VLV Index
         * @param {LocalDbVlvIndexApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: LocalDbVlvIndexApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalDbVlvIndexResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.localDbVlvIndexName, requestParameters.backendName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Local DB VLV Index objects
         * @param {LocalDbVlvIndexApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listObjects(requestParameters: LocalDbVlvIndexApiListObjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalDbVlvIndexListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listObjects(requestParameters.backendName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Local DB VLV Index by name
         * @param {LocalDbVlvIndexApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: LocalDbVlvIndexApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalDbVlvIndexResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.localDbVlvIndexName, requestParameters.backendName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocalDbVlvIndexApi - factory interface
 * @export
 */
export const LocalDbVlvIndexApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocalDbVlvIndexApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Local DB VLV Index to the config
         * @param {LocalDbVlvIndexApiAddNewIndexToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewIndexToConfig(requestParameters: LocalDbVlvIndexApiAddNewIndexToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<LocalDbVlvIndexResponse> {
            return localVarFp.addNewIndexToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Local DB VLV Index
         * @param {LocalDbVlvIndexApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: LocalDbVlvIndexApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Local DB VLV Index
         * @param {LocalDbVlvIndexApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: LocalDbVlvIndexApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<LocalDbVlvIndexResponse> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Local DB VLV Index objects
         * @param {LocalDbVlvIndexApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects(requestParameters: LocalDbVlvIndexApiListObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<LocalDbVlvIndexListResponse> {
            return localVarFp.listObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Local DB VLV Index by name
         * @param {LocalDbVlvIndexApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: LocalDbVlvIndexApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<LocalDbVlvIndexResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewIndexToConfig operation in LocalDbVlvIndexApi.
 * @export
 * @interface LocalDbVlvIndexApiAddNewIndexToConfigRequest
 */
export type LocalDbVlvIndexApiAddNewIndexToConfigRequest = {
    
    /**
    * Name of the Backend
    * @type {string}
    * @memberof LocalDbVlvIndexApiAddNewIndexToConfig
    */
    readonly backendName: string
    
} & AddLocalDbVlvIndexRequest

/**
 * Request parameters for delete operation in LocalDbVlvIndexApi.
 * @export
 * @interface LocalDbVlvIndexApiDeleteRequest
 */
export type LocalDbVlvIndexApiDeleteRequest = {
    
    /**
    * Name of the Local DB VLV Index
    * @type {string}
    * @memberof LocalDbVlvIndexApiDelete
    */
    readonly localDbVlvIndexName: string
    
    /**
    * Name of the Backend
    * @type {string}
    * @memberof LocalDbVlvIndexApiDelete
    */
    readonly backendName: string
    
}

/**
 * Request parameters for getSingle operation in LocalDbVlvIndexApi.
 * @export
 * @interface LocalDbVlvIndexApiGetSingleRequest
 */
export type LocalDbVlvIndexApiGetSingleRequest = {
    
    /**
    * Name of the Local DB VLV Index
    * @type {string}
    * @memberof LocalDbVlvIndexApiGetSingle
    */
    readonly localDbVlvIndexName: string
    
    /**
    * Name of the Backend
    * @type {string}
    * @memberof LocalDbVlvIndexApiGetSingle
    */
    readonly backendName: string
    
}

/**
 * Request parameters for listObjects operation in LocalDbVlvIndexApi.
 * @export
 * @interface LocalDbVlvIndexApiListObjectsRequest
 */
export type LocalDbVlvIndexApiListObjectsRequest = {
    
    /**
    * Name of the Backend
    * @type {string}
    * @memberof LocalDbVlvIndexApiListObjects
    */
    readonly backendName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof LocalDbVlvIndexApiListObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in LocalDbVlvIndexApi.
 * @export
 * @interface LocalDbVlvIndexApiUpdateByNameRequest
 */
export type LocalDbVlvIndexApiUpdateByNameRequest = {
    
    /**
    * Name of the Local DB VLV Index
    * @type {string}
    * @memberof LocalDbVlvIndexApiUpdateByName
    */
    readonly localDbVlvIndexName: string
    
    /**
    * Name of the Backend
    * @type {string}
    * @memberof LocalDbVlvIndexApiUpdateByName
    */
    readonly backendName: string
    
} & UpdateRequest

/**
 * LocalDbVlvIndexApiGenerated - object-oriented interface
 * @export
 * @class LocalDbVlvIndexApiGenerated
 * @extends {BaseAPI}
 */
export class LocalDbVlvIndexApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Local DB VLV Index to the config
     * @param {LocalDbVlvIndexApiAddNewIndexToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalDbVlvIndexApiGenerated
     */
    public addNewIndexToConfig(requestParameters: LocalDbVlvIndexApiAddNewIndexToConfigRequest, options?: AxiosRequestConfig) {
        return LocalDbVlvIndexApiFp(this.configuration).addNewIndexToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Local DB VLV Index
     * @param {LocalDbVlvIndexApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalDbVlvIndexApiGenerated
     */
    public delete(requestParameters: LocalDbVlvIndexApiDeleteRequest, options?: AxiosRequestConfig) {
        return LocalDbVlvIndexApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Local DB VLV Index
     * @param {LocalDbVlvIndexApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalDbVlvIndexApiGenerated
     */
    public getSingle(requestParameters: LocalDbVlvIndexApiGetSingleRequest, options?: AxiosRequestConfig) {
        return LocalDbVlvIndexApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Local DB VLV Index objects
     * @param {LocalDbVlvIndexApiListObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalDbVlvIndexApiGenerated
     */
    public listObjects(requestParameters: LocalDbVlvIndexApiListObjectsRequest, options?: AxiosRequestConfig) {
        return LocalDbVlvIndexApiFp(this.configuration).listObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Local DB VLV Index by name
     * @param {LocalDbVlvIndexApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalDbVlvIndexApiGenerated
     */
    public updateByName(requestParameters: LocalDbVlvIndexApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return LocalDbVlvIndexApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
