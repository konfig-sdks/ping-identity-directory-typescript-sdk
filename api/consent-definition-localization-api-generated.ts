/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddConsentDefinitionLocalizationRequest } from '../models';
// @ts-ignore
import { ConsentDefinitionLocalizationListResponse } from '../models';
// @ts-ignore
import { ConsentDefinitionLocalizationResponse } from '../models';
// @ts-ignore
import { EnumconsentDefinitionLocalizationSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConsentDefinitionLocalizationApi - axios parameter creator
 * @export
 */
export const ConsentDefinitionLocalizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Consent Definition Localization to the config
         * @param {string} consentDefinitionName Name of the Consent Definition
         * @param {AddConsentDefinitionLocalizationRequest} addConsentDefinitionLocalizationRequest Create a new Consent Definition Localization in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNew: async (consentDefinitionName: string, addConsentDefinitionLocalizationRequest: AddConsentDefinitionLocalizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentDefinitionName' is not null or undefined
            assertParamExists('addNew', 'consentDefinitionName', consentDefinitionName)
            // verify required parameter 'addConsentDefinitionLocalizationRequest' is not null or undefined
            assertParamExists('addNew', 'addConsentDefinitionLocalizationRequest', addConsentDefinitionLocalizationRequest)
            const localVarPath = `/consent-definitions/{consent-definition-name}/consent-definition-localizations`
                .replace(`{${"consent-definition-name"}}`, encodeURIComponent(String(consentDefinitionName !== undefined ? consentDefinitionName : `-consent-definition-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addConsentDefinitionLocalizationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/consent-definitions/{consent-definition-name}/consent-definition-localizations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addConsentDefinitionLocalizationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Consent Definition Localization
         * @param {string} consentDefinitionLocalizationName Name of the Consent Definition Localization
         * @param {string} consentDefinitionName Name of the Consent Definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocalization: async (consentDefinitionLocalizationName: string, consentDefinitionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentDefinitionLocalizationName' is not null or undefined
            assertParamExists('deleteLocalization', 'consentDefinitionLocalizationName', consentDefinitionLocalizationName)
            // verify required parameter 'consentDefinitionName' is not null or undefined
            assertParamExists('deleteLocalization', 'consentDefinitionName', consentDefinitionName)
            const localVarPath = `/consent-definitions/{consent-definition-name}/consent-definition-localizations/{consent-definition-localization-name}`
                .replace(`{${"consent-definition-localization-name"}}`, encodeURIComponent(String(consentDefinitionLocalizationName !== undefined ? consentDefinitionLocalizationName : `-consent-definition-localization-name-`)))
                .replace(`{${"consent-definition-name"}}`, encodeURIComponent(String(consentDefinitionName !== undefined ? consentDefinitionName : `-consent-definition-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/consent-definitions/{consent-definition-name}/consent-definition-localizations/{consent-definition-localization-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Consent Definition Localization objects
         * @param {string} consentDefinitionName Name of the Consent Definition
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects: async (consentDefinitionName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentDefinitionName' is not null or undefined
            assertParamExists('getAllObjects', 'consentDefinitionName', consentDefinitionName)
            const localVarPath = `/consent-definitions/{consent-definition-name}/consent-definition-localizations`
                .replace(`{${"consent-definition-name"}}`, encodeURIComponent(String(consentDefinitionName !== undefined ? consentDefinitionName : `-consent-definition-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/consent-definitions/{consent-definition-name}/consent-definition-localizations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Consent Definition Localization
         * @param {string} consentDefinitionLocalizationName Name of the Consent Definition Localization
         * @param {string} consentDefinitionName Name of the Consent Definition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (consentDefinitionLocalizationName: string, consentDefinitionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentDefinitionLocalizationName' is not null or undefined
            assertParamExists('getSingle', 'consentDefinitionLocalizationName', consentDefinitionLocalizationName)
            // verify required parameter 'consentDefinitionName' is not null or undefined
            assertParamExists('getSingle', 'consentDefinitionName', consentDefinitionName)
            const localVarPath = `/consent-definitions/{consent-definition-name}/consent-definition-localizations/{consent-definition-localization-name}`
                .replace(`{${"consent-definition-localization-name"}}`, encodeURIComponent(String(consentDefinitionLocalizationName !== undefined ? consentDefinitionLocalizationName : `-consent-definition-localization-name-`)))
                .replace(`{${"consent-definition-name"}}`, encodeURIComponent(String(consentDefinitionName !== undefined ? consentDefinitionName : `-consent-definition-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/consent-definitions/{consent-definition-name}/consent-definition-localizations/{consent-definition-localization-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Consent Definition Localization by name
         * @param {string} consentDefinitionLocalizationName Name of the Consent Definition Localization
         * @param {string} consentDefinitionName Name of the Consent Definition
         * @param {UpdateRequest} updateRequest Update an existing Consent Definition Localization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (consentDefinitionLocalizationName: string, consentDefinitionName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentDefinitionLocalizationName' is not null or undefined
            assertParamExists('updateByName', 'consentDefinitionLocalizationName', consentDefinitionLocalizationName)
            // verify required parameter 'consentDefinitionName' is not null or undefined
            assertParamExists('updateByName', 'consentDefinitionName', consentDefinitionName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/consent-definitions/{consent-definition-name}/consent-definition-localizations/{consent-definition-localization-name}`
                .replace(`{${"consent-definition-localization-name"}}`, encodeURIComponent(String(consentDefinitionLocalizationName !== undefined ? consentDefinitionLocalizationName : `-consent-definition-localization-name-`)))
                .replace(`{${"consent-definition-name"}}`, encodeURIComponent(String(consentDefinitionName !== undefined ? consentDefinitionName : `-consent-definition-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/consent-definitions/{consent-definition-name}/consent-definition-localizations/{consent-definition-localization-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsentDefinitionLocalizationApi - functional programming interface
 * @export
 */
export const ConsentDefinitionLocalizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsentDefinitionLocalizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Consent Definition Localization to the config
         * @param {ConsentDefinitionLocalizationApiAddNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNew(requestParameters: ConsentDefinitionLocalizationApiAddNewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentDefinitionLocalizationResponse>> {
            const addConsentDefinitionLocalizationRequest: AddConsentDefinitionLocalizationRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNew(requestParameters.consentDefinitionName, addConsentDefinitionLocalizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Consent Definition Localization
         * @param {ConsentDefinitionLocalizationApiDeleteLocalizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLocalization(requestParameters: ConsentDefinitionLocalizationApiDeleteLocalizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLocalization(requestParameters.consentDefinitionLocalizationName, requestParameters.consentDefinitionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Consent Definition Localization objects
         * @param {ConsentDefinitionLocalizationApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllObjects(requestParameters: ConsentDefinitionLocalizationApiGetAllObjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentDefinitionLocalizationListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllObjects(requestParameters.consentDefinitionName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Consent Definition Localization
         * @param {ConsentDefinitionLocalizationApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: ConsentDefinitionLocalizationApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentDefinitionLocalizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.consentDefinitionLocalizationName, requestParameters.consentDefinitionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Consent Definition Localization by name
         * @param {ConsentDefinitionLocalizationApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ConsentDefinitionLocalizationApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentDefinitionLocalizationResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.consentDefinitionLocalizationName, requestParameters.consentDefinitionName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConsentDefinitionLocalizationApi - factory interface
 * @export
 */
export const ConsentDefinitionLocalizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsentDefinitionLocalizationApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Consent Definition Localization to the config
         * @param {ConsentDefinitionLocalizationApiAddNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNew(requestParameters: ConsentDefinitionLocalizationApiAddNewRequest, options?: AxiosRequestConfig): AxiosPromise<ConsentDefinitionLocalizationResponse> {
            return localVarFp.addNew(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Consent Definition Localization
         * @param {ConsentDefinitionLocalizationApiDeleteLocalizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocalization(requestParameters: ConsentDefinitionLocalizationApiDeleteLocalizationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteLocalization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Consent Definition Localization objects
         * @param {ConsentDefinitionLocalizationApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects(requestParameters: ConsentDefinitionLocalizationApiGetAllObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<ConsentDefinitionLocalizationListResponse> {
            return localVarFp.getAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Consent Definition Localization
         * @param {ConsentDefinitionLocalizationApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: ConsentDefinitionLocalizationApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<ConsentDefinitionLocalizationResponse> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Consent Definition Localization by name
         * @param {ConsentDefinitionLocalizationApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ConsentDefinitionLocalizationApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<ConsentDefinitionLocalizationResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNew operation in ConsentDefinitionLocalizationApi.
 * @export
 * @interface ConsentDefinitionLocalizationApiAddNewRequest
 */
export type ConsentDefinitionLocalizationApiAddNewRequest = {
    
    /**
    * Name of the Consent Definition
    * @type {string}
    * @memberof ConsentDefinitionLocalizationApiAddNew
    */
    readonly consentDefinitionName: string
    
} & AddConsentDefinitionLocalizationRequest

/**
 * Request parameters for deleteLocalization operation in ConsentDefinitionLocalizationApi.
 * @export
 * @interface ConsentDefinitionLocalizationApiDeleteLocalizationRequest
 */
export type ConsentDefinitionLocalizationApiDeleteLocalizationRequest = {
    
    /**
    * Name of the Consent Definition Localization
    * @type {string}
    * @memberof ConsentDefinitionLocalizationApiDeleteLocalization
    */
    readonly consentDefinitionLocalizationName: string
    
    /**
    * Name of the Consent Definition
    * @type {string}
    * @memberof ConsentDefinitionLocalizationApiDeleteLocalization
    */
    readonly consentDefinitionName: string
    
}

/**
 * Request parameters for getAllObjects operation in ConsentDefinitionLocalizationApi.
 * @export
 * @interface ConsentDefinitionLocalizationApiGetAllObjectsRequest
 */
export type ConsentDefinitionLocalizationApiGetAllObjectsRequest = {
    
    /**
    * Name of the Consent Definition
    * @type {string}
    * @memberof ConsentDefinitionLocalizationApiGetAllObjects
    */
    readonly consentDefinitionName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ConsentDefinitionLocalizationApiGetAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingle operation in ConsentDefinitionLocalizationApi.
 * @export
 * @interface ConsentDefinitionLocalizationApiGetSingleRequest
 */
export type ConsentDefinitionLocalizationApiGetSingleRequest = {
    
    /**
    * Name of the Consent Definition Localization
    * @type {string}
    * @memberof ConsentDefinitionLocalizationApiGetSingle
    */
    readonly consentDefinitionLocalizationName: string
    
    /**
    * Name of the Consent Definition
    * @type {string}
    * @memberof ConsentDefinitionLocalizationApiGetSingle
    */
    readonly consentDefinitionName: string
    
}

/**
 * Request parameters for updateByName operation in ConsentDefinitionLocalizationApi.
 * @export
 * @interface ConsentDefinitionLocalizationApiUpdateByNameRequest
 */
export type ConsentDefinitionLocalizationApiUpdateByNameRequest = {
    
    /**
    * Name of the Consent Definition Localization
    * @type {string}
    * @memberof ConsentDefinitionLocalizationApiUpdateByName
    */
    readonly consentDefinitionLocalizationName: string
    
    /**
    * Name of the Consent Definition
    * @type {string}
    * @memberof ConsentDefinitionLocalizationApiUpdateByName
    */
    readonly consentDefinitionName: string
    
} & UpdateRequest

/**
 * ConsentDefinitionLocalizationApiGenerated - object-oriented interface
 * @export
 * @class ConsentDefinitionLocalizationApiGenerated
 * @extends {BaseAPI}
 */
export class ConsentDefinitionLocalizationApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Consent Definition Localization to the config
     * @param {ConsentDefinitionLocalizationApiAddNewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentDefinitionLocalizationApiGenerated
     */
    public addNew(requestParameters: ConsentDefinitionLocalizationApiAddNewRequest, options?: AxiosRequestConfig) {
        return ConsentDefinitionLocalizationApiFp(this.configuration).addNew(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Consent Definition Localization
     * @param {ConsentDefinitionLocalizationApiDeleteLocalizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentDefinitionLocalizationApiGenerated
     */
    public deleteLocalization(requestParameters: ConsentDefinitionLocalizationApiDeleteLocalizationRequest, options?: AxiosRequestConfig) {
        return ConsentDefinitionLocalizationApiFp(this.configuration).deleteLocalization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Consent Definition Localization objects
     * @param {ConsentDefinitionLocalizationApiGetAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentDefinitionLocalizationApiGenerated
     */
    public getAllObjects(requestParameters: ConsentDefinitionLocalizationApiGetAllObjectsRequest, options?: AxiosRequestConfig) {
        return ConsentDefinitionLocalizationApiFp(this.configuration).getAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Consent Definition Localization
     * @param {ConsentDefinitionLocalizationApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentDefinitionLocalizationApiGenerated
     */
    public getSingle(requestParameters: ConsentDefinitionLocalizationApiGetSingleRequest, options?: AxiosRequestConfig) {
        return ConsentDefinitionLocalizationApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Consent Definition Localization by name
     * @param {ConsentDefinitionLocalizationApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentDefinitionLocalizationApiGenerated
     */
    public updateByName(requestParameters: ConsentDefinitionLocalizationApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ConsentDefinitionLocalizationApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
