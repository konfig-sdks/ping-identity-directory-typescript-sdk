/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddReplicationAssurancePolicyRequest } from '../models';
// @ts-ignore
import { EnumreplicationAssurancePolicyLocalLevelProp } from '../models';
// @ts-ignore
import { EnumreplicationAssurancePolicyRemoteLevelProp } from '../models';
// @ts-ignore
import { EnumreplicationAssurancePolicySchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { ReplicationAssurancePolicyListResponse } from '../models';
// @ts-ignore
import { ReplicationAssurancePolicyResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReplicationAssurancePolicyApi - axios parameter creator
 * @export
 */
export const ReplicationAssurancePolicyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Replication Assurance Policy to the config
         * @param {AddReplicationAssurancePolicyRequest} addReplicationAssurancePolicyRequest Create a new Replication Assurance Policy in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNew: async (addReplicationAssurancePolicyRequest: AddReplicationAssurancePolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addReplicationAssurancePolicyRequest' is not null or undefined
            assertParamExists('addNew', 'addReplicationAssurancePolicyRequest', addReplicationAssurancePolicyRequest)
            const localVarPath = `/replication-assurance-policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addReplicationAssurancePolicyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/replication-assurance-policies',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addReplicationAssurancePolicyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Replication Assurance Policy
         * @param {string} replicationAssurancePolicyName Name of the Replication Assurance Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy: async (replicationAssurancePolicyName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'replicationAssurancePolicyName' is not null or undefined
            assertParamExists('deletePolicy', 'replicationAssurancePolicyName', replicationAssurancePolicyName)
            const localVarPath = `/replication-assurance-policies/{replication-assurance-policy-name}`
                .replace(`{${"replication-assurance-policy-name"}}`, encodeURIComponent(String(replicationAssurancePolicyName !== undefined ? replicationAssurancePolicyName : `-replication-assurance-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/replication-assurance-policies/{replication-assurance-policy-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Replication Assurance Policy
         * @param {string} replicationAssurancePolicyName Name of the Replication Assurance Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePolicy: async (replicationAssurancePolicyName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'replicationAssurancePolicyName' is not null or undefined
            assertParamExists('getSinglePolicy', 'replicationAssurancePolicyName', replicationAssurancePolicyName)
            const localVarPath = `/replication-assurance-policies/{replication-assurance-policy-name}`
                .replace(`{${"replication-assurance-policy-name"}}`, encodeURIComponent(String(replicationAssurancePolicyName !== undefined ? replicationAssurancePolicyName : `-replication-assurance-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/replication-assurance-policies/{replication-assurance-policy-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Replication Assurance Policy objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/replication-assurance-policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/replication-assurance-policies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Replication Assurance Policy by name
         * @param {string} replicationAssurancePolicyName Name of the Replication Assurance Policy
         * @param {UpdateRequest} updateRequest Update an existing Replication Assurance Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (replicationAssurancePolicyName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'replicationAssurancePolicyName' is not null or undefined
            assertParamExists('updateByName', 'replicationAssurancePolicyName', replicationAssurancePolicyName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/replication-assurance-policies/{replication-assurance-policy-name}`
                .replace(`{${"replication-assurance-policy-name"}}`, encodeURIComponent(String(replicationAssurancePolicyName !== undefined ? replicationAssurancePolicyName : `-replication-assurance-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/replication-assurance-policies/{replication-assurance-policy-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReplicationAssurancePolicyApi - functional programming interface
 * @export
 */
export const ReplicationAssurancePolicyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReplicationAssurancePolicyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Replication Assurance Policy to the config
         * @param {ReplicationAssurancePolicyApiAddNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNew(requestParameters: ReplicationAssurancePolicyApiAddNewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReplicationAssurancePolicyResponse>> {
            const addReplicationAssurancePolicyRequest: AddReplicationAssurancePolicyRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNew(addReplicationAssurancePolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Replication Assurance Policy
         * @param {ReplicationAssurancePolicyApiDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePolicy(requestParameters: ReplicationAssurancePolicyApiDeletePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePolicy(requestParameters.replicationAssurancePolicyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Replication Assurance Policy
         * @param {ReplicationAssurancePolicyApiGetSinglePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSinglePolicy(requestParameters: ReplicationAssurancePolicyApiGetSinglePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReplicationAssurancePolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSinglePolicy(requestParameters.replicationAssurancePolicyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Replication Assurance Policy objects
         * @param {ReplicationAssurancePolicyApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: ReplicationAssurancePolicyApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReplicationAssurancePolicyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Replication Assurance Policy by name
         * @param {ReplicationAssurancePolicyApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ReplicationAssurancePolicyApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReplicationAssurancePolicyResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.replicationAssurancePolicyName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReplicationAssurancePolicyApi - factory interface
 * @export
 */
export const ReplicationAssurancePolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReplicationAssurancePolicyApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Replication Assurance Policy to the config
         * @param {ReplicationAssurancePolicyApiAddNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNew(requestParameters: ReplicationAssurancePolicyApiAddNewRequest, options?: AxiosRequestConfig): AxiosPromise<ReplicationAssurancePolicyResponse> {
            return localVarFp.addNew(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Replication Assurance Policy
         * @param {ReplicationAssurancePolicyApiDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy(requestParameters: ReplicationAssurancePolicyApiDeletePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Replication Assurance Policy
         * @param {ReplicationAssurancePolicyApiGetSinglePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePolicy(requestParameters: ReplicationAssurancePolicyApiGetSinglePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<ReplicationAssurancePolicyResponse> {
            return localVarFp.getSinglePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Replication Assurance Policy objects
         * @param {ReplicationAssurancePolicyApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: ReplicationAssurancePolicyApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ReplicationAssurancePolicyListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Replication Assurance Policy by name
         * @param {ReplicationAssurancePolicyApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ReplicationAssurancePolicyApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<ReplicationAssurancePolicyResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNew operation in ReplicationAssurancePolicyApi.
 * @export
 * @interface ReplicationAssurancePolicyApiAddNewRequest
 */
export type ReplicationAssurancePolicyApiAddNewRequest = {
    
} & AddReplicationAssurancePolicyRequest

/**
 * Request parameters for deletePolicy operation in ReplicationAssurancePolicyApi.
 * @export
 * @interface ReplicationAssurancePolicyApiDeletePolicyRequest
 */
export type ReplicationAssurancePolicyApiDeletePolicyRequest = {
    
    /**
    * Name of the Replication Assurance Policy
    * @type {string}
    * @memberof ReplicationAssurancePolicyApiDeletePolicy
    */
    readonly replicationAssurancePolicyName: string
    
}

/**
 * Request parameters for getSinglePolicy operation in ReplicationAssurancePolicyApi.
 * @export
 * @interface ReplicationAssurancePolicyApiGetSinglePolicyRequest
 */
export type ReplicationAssurancePolicyApiGetSinglePolicyRequest = {
    
    /**
    * Name of the Replication Assurance Policy
    * @type {string}
    * @memberof ReplicationAssurancePolicyApiGetSinglePolicy
    */
    readonly replicationAssurancePolicyName: string
    
}

/**
 * Request parameters for listAllObjects operation in ReplicationAssurancePolicyApi.
 * @export
 * @interface ReplicationAssurancePolicyApiListAllObjectsRequest
 */
export type ReplicationAssurancePolicyApiListAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ReplicationAssurancePolicyApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in ReplicationAssurancePolicyApi.
 * @export
 * @interface ReplicationAssurancePolicyApiUpdateByNameRequest
 */
export type ReplicationAssurancePolicyApiUpdateByNameRequest = {
    
    /**
    * Name of the Replication Assurance Policy
    * @type {string}
    * @memberof ReplicationAssurancePolicyApiUpdateByName
    */
    readonly replicationAssurancePolicyName: string
    
} & UpdateRequest

/**
 * ReplicationAssurancePolicyApiGenerated - object-oriented interface
 * @export
 * @class ReplicationAssurancePolicyApiGenerated
 * @extends {BaseAPI}
 */
export class ReplicationAssurancePolicyApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Replication Assurance Policy to the config
     * @param {ReplicationAssurancePolicyApiAddNewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReplicationAssurancePolicyApiGenerated
     */
    public addNew(requestParameters: ReplicationAssurancePolicyApiAddNewRequest, options?: AxiosRequestConfig) {
        return ReplicationAssurancePolicyApiFp(this.configuration).addNew(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Replication Assurance Policy
     * @param {ReplicationAssurancePolicyApiDeletePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReplicationAssurancePolicyApiGenerated
     */
    public deletePolicy(requestParameters: ReplicationAssurancePolicyApiDeletePolicyRequest, options?: AxiosRequestConfig) {
        return ReplicationAssurancePolicyApiFp(this.configuration).deletePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Replication Assurance Policy
     * @param {ReplicationAssurancePolicyApiGetSinglePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReplicationAssurancePolicyApiGenerated
     */
    public getSinglePolicy(requestParameters: ReplicationAssurancePolicyApiGetSinglePolicyRequest, options?: AxiosRequestConfig) {
        return ReplicationAssurancePolicyApiFp(this.configuration).getSinglePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Replication Assurance Policy objects
     * @param {ReplicationAssurancePolicyApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReplicationAssurancePolicyApiGenerated
     */
    public listAllObjects(requestParameters: ReplicationAssurancePolicyApiListAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return ReplicationAssurancePolicyApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Replication Assurance Policy by name
     * @param {ReplicationAssurancePolicyApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReplicationAssurancePolicyApiGenerated
     */
    public updateByName(requestParameters: ReplicationAssurancePolicyApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ReplicationAssurancePolicyApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
