/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddScimSubattributeRequest } from '../models';
// @ts-ignore
import { EnumscimSubattributeMutabilityProp } from '../models';
// @ts-ignore
import { EnumscimSubattributeReturnedProp } from '../models';
// @ts-ignore
import { EnumscimSubattributeSchemaUrn } from '../models';
// @ts-ignore
import { EnumscimSubattributeTypeProp } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { ScimSubattributeListResponse } from '../models';
// @ts-ignore
import { ScimSubattributeResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ScimSubattributeApi - axios parameter creator
 * @export
 */
export const ScimSubattributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new SCIM Subattribute to the config
         * @param {string} scimAttributeName Name of the SCIM Attribute
         * @param {string} scimSchemaName Name of the SCIM Schema
         * @param {AddScimSubattributeRequest} addScimSubattributeRequest Create a new SCIM Subattribute in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig: async (scimAttributeName: string, scimSchemaName: string, addScimSubattributeRequest: AddScimSubattributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimAttributeName' is not null or undefined
            assertParamExists('addNewConfig', 'scimAttributeName', scimAttributeName)
            // verify required parameter 'scimSchemaName' is not null or undefined
            assertParamExists('addNewConfig', 'scimSchemaName', scimSchemaName)
            // verify required parameter 'addScimSubattributeRequest' is not null or undefined
            assertParamExists('addNewConfig', 'addScimSubattributeRequest', addScimSubattributeRequest)
            const localVarPath = `/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes`
                .replace(`{${"scim-attribute-name"}}`, encodeURIComponent(String(scimAttributeName !== undefined ? scimAttributeName : `-scim-attribute-name-`)))
                .replace(`{${"scim-schema-name"}}`, encodeURIComponent(String(scimSchemaName !== undefined ? scimSchemaName : `-scim-schema-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addScimSubattributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addScimSubattributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a SCIM Subattribute
         * @param {string} scimSubattributeName Name of the SCIM Subattribute
         * @param {string} scimAttributeName Name of the SCIM Attribute
         * @param {string} scimSchemaName Name of the SCIM Schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubattribute: async (scimSubattributeName: string, scimAttributeName: string, scimSchemaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimSubattributeName' is not null or undefined
            assertParamExists('deleteSubattribute', 'scimSubattributeName', scimSubattributeName)
            // verify required parameter 'scimAttributeName' is not null or undefined
            assertParamExists('deleteSubattribute', 'scimAttributeName', scimAttributeName)
            // verify required parameter 'scimSchemaName' is not null or undefined
            assertParamExists('deleteSubattribute', 'scimSchemaName', scimSchemaName)
            const localVarPath = `/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes/{scim-subattribute-name}`
                .replace(`{${"scim-subattribute-name"}}`, encodeURIComponent(String(scimSubattributeName !== undefined ? scimSubattributeName : `-scim-subattribute-name-`)))
                .replace(`{${"scim-attribute-name"}}`, encodeURIComponent(String(scimAttributeName !== undefined ? scimAttributeName : `-scim-attribute-name-`)))
                .replace(`{${"scim-schema-name"}}`, encodeURIComponent(String(scimSchemaName !== undefined ? scimSchemaName : `-scim-schema-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes/{scim-subattribute-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single SCIM Subattribute
         * @param {string} scimSubattributeName Name of the SCIM Subattribute
         * @param {string} scimAttributeName Name of the SCIM Attribute
         * @param {string} scimSchemaName Name of the SCIM Schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleSubattribute: async (scimSubattributeName: string, scimAttributeName: string, scimSchemaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimSubattributeName' is not null or undefined
            assertParamExists('getSingleSubattribute', 'scimSubattributeName', scimSubattributeName)
            // verify required parameter 'scimAttributeName' is not null or undefined
            assertParamExists('getSingleSubattribute', 'scimAttributeName', scimAttributeName)
            // verify required parameter 'scimSchemaName' is not null or undefined
            assertParamExists('getSingleSubattribute', 'scimSchemaName', scimSchemaName)
            const localVarPath = `/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes/{scim-subattribute-name}`
                .replace(`{${"scim-subattribute-name"}}`, encodeURIComponent(String(scimSubattributeName !== undefined ? scimSubattributeName : `-scim-subattribute-name-`)))
                .replace(`{${"scim-attribute-name"}}`, encodeURIComponent(String(scimAttributeName !== undefined ? scimAttributeName : `-scim-attribute-name-`)))
                .replace(`{${"scim-schema-name"}}`, encodeURIComponent(String(scimSchemaName !== undefined ? scimSchemaName : `-scim-schema-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes/{scim-subattribute-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all SCIM Subattribute objects
         * @param {string} scimAttributeName Name of the SCIM Attribute
         * @param {string} scimSchemaName Name of the SCIM Schema
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllSubattributes: async (scimAttributeName: string, scimSchemaName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimAttributeName' is not null or undefined
            assertParamExists('listAllSubattributes', 'scimAttributeName', scimAttributeName)
            // verify required parameter 'scimSchemaName' is not null or undefined
            assertParamExists('listAllSubattributes', 'scimSchemaName', scimSchemaName)
            const localVarPath = `/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes`
                .replace(`{${"scim-attribute-name"}}`, encodeURIComponent(String(scimAttributeName !== undefined ? scimAttributeName : `-scim-attribute-name-`)))
                .replace(`{${"scim-schema-name"}}`, encodeURIComponent(String(scimSchemaName !== undefined ? scimSchemaName : `-scim-schema-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing SCIM Subattribute by name
         * @param {string} scimSubattributeName Name of the SCIM Subattribute
         * @param {string} scimAttributeName Name of the SCIM Attribute
         * @param {string} scimSchemaName Name of the SCIM Schema
         * @param {UpdateRequest} updateRequest Update an existing SCIM Subattribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (scimSubattributeName: string, scimAttributeName: string, scimSchemaName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimSubattributeName' is not null or undefined
            assertParamExists('updateByName', 'scimSubattributeName', scimSubattributeName)
            // verify required parameter 'scimAttributeName' is not null or undefined
            assertParamExists('updateByName', 'scimAttributeName', scimAttributeName)
            // verify required parameter 'scimSchemaName' is not null or undefined
            assertParamExists('updateByName', 'scimSchemaName', scimSchemaName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes/{scim-subattribute-name}`
                .replace(`{${"scim-subattribute-name"}}`, encodeURIComponent(String(scimSubattributeName !== undefined ? scimSubattributeName : `-scim-subattribute-name-`)))
                .replace(`{${"scim-attribute-name"}}`, encodeURIComponent(String(scimAttributeName !== undefined ? scimAttributeName : `-scim-attribute-name-`)))
                .replace(`{${"scim-schema-name"}}`, encodeURIComponent(String(scimSchemaName !== undefined ? scimSchemaName : `-scim-schema-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes/{scim-subattribute-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScimSubattributeApi - functional programming interface
 * @export
 */
export const ScimSubattributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScimSubattributeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new SCIM Subattribute to the config
         * @param {ScimSubattributeApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewConfig(requestParameters: ScimSubattributeApiAddNewConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimSubattributeResponse>> {
            const addScimSubattributeRequest: AddScimSubattributeRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewConfig(requestParameters.scimAttributeName, requestParameters.scimSchemaName, addScimSubattributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a SCIM Subattribute
         * @param {ScimSubattributeApiDeleteSubattributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubattribute(requestParameters: ScimSubattributeApiDeleteSubattributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSubattribute(requestParameters.scimSubattributeName, requestParameters.scimAttributeName, requestParameters.scimSchemaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single SCIM Subattribute
         * @param {ScimSubattributeApiGetSingleSubattributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleSubattribute(requestParameters: ScimSubattributeApiGetSingleSubattributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimSubattributeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleSubattribute(requestParameters.scimSubattributeName, requestParameters.scimAttributeName, requestParameters.scimSchemaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all SCIM Subattribute objects
         * @param {ScimSubattributeApiListAllSubattributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllSubattributes(requestParameters: ScimSubattributeApiListAllSubattributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimSubattributeListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllSubattributes(requestParameters.scimAttributeName, requestParameters.scimSchemaName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing SCIM Subattribute by name
         * @param {ScimSubattributeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ScimSubattributeApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimSubattributeResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.scimSubattributeName, requestParameters.scimAttributeName, requestParameters.scimSchemaName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScimSubattributeApi - factory interface
 * @export
 */
export const ScimSubattributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScimSubattributeApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new SCIM Subattribute to the config
         * @param {ScimSubattributeApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig(requestParameters: ScimSubattributeApiAddNewConfigRequest, options?: AxiosRequestConfig): AxiosPromise<ScimSubattributeResponse> {
            return localVarFp.addNewConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a SCIM Subattribute
         * @param {ScimSubattributeApiDeleteSubattributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubattribute(requestParameters: ScimSubattributeApiDeleteSubattributeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSubattribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single SCIM Subattribute
         * @param {ScimSubattributeApiGetSingleSubattributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleSubattribute(requestParameters: ScimSubattributeApiGetSingleSubattributeRequest, options?: AxiosRequestConfig): AxiosPromise<ScimSubattributeResponse> {
            return localVarFp.getSingleSubattribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all SCIM Subattribute objects
         * @param {ScimSubattributeApiListAllSubattributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllSubattributes(requestParameters: ScimSubattributeApiListAllSubattributesRequest, options?: AxiosRequestConfig): AxiosPromise<ScimSubattributeListResponse> {
            return localVarFp.listAllSubattributes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing SCIM Subattribute by name
         * @param {ScimSubattributeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ScimSubattributeApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<ScimSubattributeResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewConfig operation in ScimSubattributeApi.
 * @export
 * @interface ScimSubattributeApiAddNewConfigRequest
 */
export type ScimSubattributeApiAddNewConfigRequest = {
    
    /**
    * Name of the SCIM Attribute
    * @type {string}
    * @memberof ScimSubattributeApiAddNewConfig
    */
    readonly scimAttributeName: string
    
    /**
    * Name of the SCIM Schema
    * @type {string}
    * @memberof ScimSubattributeApiAddNewConfig
    */
    readonly scimSchemaName: string
    
} & AddScimSubattributeRequest

/**
 * Request parameters for deleteSubattribute operation in ScimSubattributeApi.
 * @export
 * @interface ScimSubattributeApiDeleteSubattributeRequest
 */
export type ScimSubattributeApiDeleteSubattributeRequest = {
    
    /**
    * Name of the SCIM Subattribute
    * @type {string}
    * @memberof ScimSubattributeApiDeleteSubattribute
    */
    readonly scimSubattributeName: string
    
    /**
    * Name of the SCIM Attribute
    * @type {string}
    * @memberof ScimSubattributeApiDeleteSubattribute
    */
    readonly scimAttributeName: string
    
    /**
    * Name of the SCIM Schema
    * @type {string}
    * @memberof ScimSubattributeApiDeleteSubattribute
    */
    readonly scimSchemaName: string
    
}

/**
 * Request parameters for getSingleSubattribute operation in ScimSubattributeApi.
 * @export
 * @interface ScimSubattributeApiGetSingleSubattributeRequest
 */
export type ScimSubattributeApiGetSingleSubattributeRequest = {
    
    /**
    * Name of the SCIM Subattribute
    * @type {string}
    * @memberof ScimSubattributeApiGetSingleSubattribute
    */
    readonly scimSubattributeName: string
    
    /**
    * Name of the SCIM Attribute
    * @type {string}
    * @memberof ScimSubattributeApiGetSingleSubattribute
    */
    readonly scimAttributeName: string
    
    /**
    * Name of the SCIM Schema
    * @type {string}
    * @memberof ScimSubattributeApiGetSingleSubattribute
    */
    readonly scimSchemaName: string
    
}

/**
 * Request parameters for listAllSubattributes operation in ScimSubattributeApi.
 * @export
 * @interface ScimSubattributeApiListAllSubattributesRequest
 */
export type ScimSubattributeApiListAllSubattributesRequest = {
    
    /**
    * Name of the SCIM Attribute
    * @type {string}
    * @memberof ScimSubattributeApiListAllSubattributes
    */
    readonly scimAttributeName: string
    
    /**
    * Name of the SCIM Schema
    * @type {string}
    * @memberof ScimSubattributeApiListAllSubattributes
    */
    readonly scimSchemaName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ScimSubattributeApiListAllSubattributes
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in ScimSubattributeApi.
 * @export
 * @interface ScimSubattributeApiUpdateByNameRequest
 */
export type ScimSubattributeApiUpdateByNameRequest = {
    
    /**
    * Name of the SCIM Subattribute
    * @type {string}
    * @memberof ScimSubattributeApiUpdateByName
    */
    readonly scimSubattributeName: string
    
    /**
    * Name of the SCIM Attribute
    * @type {string}
    * @memberof ScimSubattributeApiUpdateByName
    */
    readonly scimAttributeName: string
    
    /**
    * Name of the SCIM Schema
    * @type {string}
    * @memberof ScimSubattributeApiUpdateByName
    */
    readonly scimSchemaName: string
    
} & UpdateRequest

/**
 * ScimSubattributeApiGenerated - object-oriented interface
 * @export
 * @class ScimSubattributeApiGenerated
 * @extends {BaseAPI}
 */
export class ScimSubattributeApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new SCIM Subattribute to the config
     * @param {ScimSubattributeApiAddNewConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimSubattributeApiGenerated
     */
    public addNewConfig(requestParameters: ScimSubattributeApiAddNewConfigRequest, options?: AxiosRequestConfig) {
        return ScimSubattributeApiFp(this.configuration).addNewConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a SCIM Subattribute
     * @param {ScimSubattributeApiDeleteSubattributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimSubattributeApiGenerated
     */
    public deleteSubattribute(requestParameters: ScimSubattributeApiDeleteSubattributeRequest, options?: AxiosRequestConfig) {
        return ScimSubattributeApiFp(this.configuration).deleteSubattribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single SCIM Subattribute
     * @param {ScimSubattributeApiGetSingleSubattributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimSubattributeApiGenerated
     */
    public getSingleSubattribute(requestParameters: ScimSubattributeApiGetSingleSubattributeRequest, options?: AxiosRequestConfig) {
        return ScimSubattributeApiFp(this.configuration).getSingleSubattribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all SCIM Subattribute objects
     * @param {ScimSubattributeApiListAllSubattributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimSubattributeApiGenerated
     */
    public listAllSubattributes(requestParameters: ScimSubattributeApiListAllSubattributesRequest, options?: AxiosRequestConfig) {
        return ScimSubattributeApiFp(this.configuration).listAllSubattributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing SCIM Subattribute by name
     * @param {ScimSubattributeApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimSubattributeApiGenerated
     */
    public updateByName(requestParameters: ScimSubattributeApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ScimSubattributeApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
