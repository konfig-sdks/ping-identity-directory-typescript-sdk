/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddCustomLoggedStatsRequest } from '../models';
// @ts-ignore
import { CustomLoggedStatsListResponse } from '../models';
// @ts-ignore
import { CustomLoggedStatsResponse } from '../models';
// @ts-ignore
import { EnumcustomLoggedStatsSchemaUrn } from '../models';
// @ts-ignore
import { EnumcustomLoggedStatsStatisticTypeProp } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomLoggedStatsApi - axios parameter creator
 * @export
 */
export const CustomLoggedStatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Custom Logged Stats to the config
         * @param {string} pluginName Name of the Plugin
         * @param {AddCustomLoggedStatsRequest} addCustomLoggedStatsRequest Create a new Custom Logged Stats in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewStatToConfig: async (pluginName: string, addCustomLoggedStatsRequest: AddCustomLoggedStatsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginName' is not null or undefined
            assertParamExists('addNewStatToConfig', 'pluginName', pluginName)
            // verify required parameter 'addCustomLoggedStatsRequest' is not null or undefined
            assertParamExists('addNewStatToConfig', 'addCustomLoggedStatsRequest', addCustomLoggedStatsRequest)
            const localVarPath = `/plugin-root/plugins/{plugin-name}/custom-logged-stats`
                .replace(`{${"plugin-name"}}`, encodeURIComponent(String(pluginName !== undefined ? pluginName : `-plugin-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addCustomLoggedStatsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/plugin-root/plugins/{plugin-name}/custom-logged-stats',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addCustomLoggedStatsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Custom Logged Stats
         * @param {string} customLoggedStatsName Name of the Custom Logged Stats
         * @param {string} pluginName Name of the Plugin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStat: async (customLoggedStatsName: string, pluginName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customLoggedStatsName' is not null or undefined
            assertParamExists('deleteStat', 'customLoggedStatsName', customLoggedStatsName)
            // verify required parameter 'pluginName' is not null or undefined
            assertParamExists('deleteStat', 'pluginName', pluginName)
            const localVarPath = `/plugin-root/plugins/{plugin-name}/custom-logged-stats/{custom-logged-stats-name}`
                .replace(`{${"custom-logged-stats-name"}}`, encodeURIComponent(String(customLoggedStatsName !== undefined ? customLoggedStatsName : `-custom-logged-stats-name-`)))
                .replace(`{${"plugin-name"}}`, encodeURIComponent(String(pluginName !== undefined ? pluginName : `-plugin-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/plugin-root/plugins/{plugin-name}/custom-logged-stats/{custom-logged-stats-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Custom Logged Stats
         * @param {string} customLoggedStatsName Name of the Custom Logged Stats
         * @param {string} pluginName Name of the Plugin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (customLoggedStatsName: string, pluginName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customLoggedStatsName' is not null or undefined
            assertParamExists('getSingle', 'customLoggedStatsName', customLoggedStatsName)
            // verify required parameter 'pluginName' is not null or undefined
            assertParamExists('getSingle', 'pluginName', pluginName)
            const localVarPath = `/plugin-root/plugins/{plugin-name}/custom-logged-stats/{custom-logged-stats-name}`
                .replace(`{${"custom-logged-stats-name"}}`, encodeURIComponent(String(customLoggedStatsName !== undefined ? customLoggedStatsName : `-custom-logged-stats-name-`)))
                .replace(`{${"plugin-name"}}`, encodeURIComponent(String(pluginName !== undefined ? pluginName : `-plugin-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/plugin-root/plugins/{plugin-name}/custom-logged-stats/{custom-logged-stats-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Custom Logged Stats objects
         * @param {string} pluginName Name of the Plugin
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (pluginName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginName' is not null or undefined
            assertParamExists('listAllObjects', 'pluginName', pluginName)
            const localVarPath = `/plugin-root/plugins/{plugin-name}/custom-logged-stats`
                .replace(`{${"plugin-name"}}`, encodeURIComponent(String(pluginName !== undefined ? pluginName : `-plugin-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/plugin-root/plugins/{plugin-name}/custom-logged-stats',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Custom Logged Stats by name
         * @param {string} customLoggedStatsName Name of the Custom Logged Stats
         * @param {string} pluginName Name of the Plugin
         * @param {UpdateRequest} updateRequest Update an existing Custom Logged Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (customLoggedStatsName: string, pluginName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customLoggedStatsName' is not null or undefined
            assertParamExists('updateByName', 'customLoggedStatsName', customLoggedStatsName)
            // verify required parameter 'pluginName' is not null or undefined
            assertParamExists('updateByName', 'pluginName', pluginName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/plugin-root/plugins/{plugin-name}/custom-logged-stats/{custom-logged-stats-name}`
                .replace(`{${"custom-logged-stats-name"}}`, encodeURIComponent(String(customLoggedStatsName !== undefined ? customLoggedStatsName : `-custom-logged-stats-name-`)))
                .replace(`{${"plugin-name"}}`, encodeURIComponent(String(pluginName !== undefined ? pluginName : `-plugin-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/plugin-root/plugins/{plugin-name}/custom-logged-stats/{custom-logged-stats-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomLoggedStatsApi - functional programming interface
 * @export
 */
export const CustomLoggedStatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomLoggedStatsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Custom Logged Stats to the config
         * @param {CustomLoggedStatsApiAddNewStatToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewStatToConfig(requestParameters: CustomLoggedStatsApiAddNewStatToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomLoggedStatsResponse>> {
            const addCustomLoggedStatsRequest: AddCustomLoggedStatsRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewStatToConfig(requestParameters.pluginName, addCustomLoggedStatsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Custom Logged Stats
         * @param {CustomLoggedStatsApiDeleteStatRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStat(requestParameters: CustomLoggedStatsApiDeleteStatRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStat(requestParameters.customLoggedStatsName, requestParameters.pluginName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Custom Logged Stats
         * @param {CustomLoggedStatsApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: CustomLoggedStatsApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomLoggedStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.customLoggedStatsName, requestParameters.pluginName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Custom Logged Stats objects
         * @param {CustomLoggedStatsApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: CustomLoggedStatsApiListAllObjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomLoggedStatsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.pluginName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Custom Logged Stats by name
         * @param {CustomLoggedStatsApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: CustomLoggedStatsApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomLoggedStatsResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.customLoggedStatsName, requestParameters.pluginName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomLoggedStatsApi - factory interface
 * @export
 */
export const CustomLoggedStatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomLoggedStatsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Custom Logged Stats to the config
         * @param {CustomLoggedStatsApiAddNewStatToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewStatToConfig(requestParameters: CustomLoggedStatsApiAddNewStatToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<CustomLoggedStatsResponse> {
            return localVarFp.addNewStatToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Custom Logged Stats
         * @param {CustomLoggedStatsApiDeleteStatRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStat(requestParameters: CustomLoggedStatsApiDeleteStatRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteStat(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Custom Logged Stats
         * @param {CustomLoggedStatsApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: CustomLoggedStatsApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<CustomLoggedStatsResponse> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Custom Logged Stats objects
         * @param {CustomLoggedStatsApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: CustomLoggedStatsApiListAllObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<CustomLoggedStatsListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Custom Logged Stats by name
         * @param {CustomLoggedStatsApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: CustomLoggedStatsApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<CustomLoggedStatsResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewStatToConfig operation in CustomLoggedStatsApi.
 * @export
 * @interface CustomLoggedStatsApiAddNewStatToConfigRequest
 */
export type CustomLoggedStatsApiAddNewStatToConfigRequest = {
    
    /**
    * Name of the Plugin
    * @type {string}
    * @memberof CustomLoggedStatsApiAddNewStatToConfig
    */
    readonly pluginName: string
    
} & AddCustomLoggedStatsRequest

/**
 * Request parameters for deleteStat operation in CustomLoggedStatsApi.
 * @export
 * @interface CustomLoggedStatsApiDeleteStatRequest
 */
export type CustomLoggedStatsApiDeleteStatRequest = {
    
    /**
    * Name of the Custom Logged Stats
    * @type {string}
    * @memberof CustomLoggedStatsApiDeleteStat
    */
    readonly customLoggedStatsName: string
    
    /**
    * Name of the Plugin
    * @type {string}
    * @memberof CustomLoggedStatsApiDeleteStat
    */
    readonly pluginName: string
    
}

/**
 * Request parameters for getSingle operation in CustomLoggedStatsApi.
 * @export
 * @interface CustomLoggedStatsApiGetSingleRequest
 */
export type CustomLoggedStatsApiGetSingleRequest = {
    
    /**
    * Name of the Custom Logged Stats
    * @type {string}
    * @memberof CustomLoggedStatsApiGetSingle
    */
    readonly customLoggedStatsName: string
    
    /**
    * Name of the Plugin
    * @type {string}
    * @memberof CustomLoggedStatsApiGetSingle
    */
    readonly pluginName: string
    
}

/**
 * Request parameters for listAllObjects operation in CustomLoggedStatsApi.
 * @export
 * @interface CustomLoggedStatsApiListAllObjectsRequest
 */
export type CustomLoggedStatsApiListAllObjectsRequest = {
    
    /**
    * Name of the Plugin
    * @type {string}
    * @memberof CustomLoggedStatsApiListAllObjects
    */
    readonly pluginName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof CustomLoggedStatsApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in CustomLoggedStatsApi.
 * @export
 * @interface CustomLoggedStatsApiUpdateByNameRequest
 */
export type CustomLoggedStatsApiUpdateByNameRequest = {
    
    /**
    * Name of the Custom Logged Stats
    * @type {string}
    * @memberof CustomLoggedStatsApiUpdateByName
    */
    readonly customLoggedStatsName: string
    
    /**
    * Name of the Plugin
    * @type {string}
    * @memberof CustomLoggedStatsApiUpdateByName
    */
    readonly pluginName: string
    
} & UpdateRequest

/**
 * CustomLoggedStatsApiGenerated - object-oriented interface
 * @export
 * @class CustomLoggedStatsApiGenerated
 * @extends {BaseAPI}
 */
export class CustomLoggedStatsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Custom Logged Stats to the config
     * @param {CustomLoggedStatsApiAddNewStatToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomLoggedStatsApiGenerated
     */
    public addNewStatToConfig(requestParameters: CustomLoggedStatsApiAddNewStatToConfigRequest, options?: AxiosRequestConfig) {
        return CustomLoggedStatsApiFp(this.configuration).addNewStatToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Custom Logged Stats
     * @param {CustomLoggedStatsApiDeleteStatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomLoggedStatsApiGenerated
     */
    public deleteStat(requestParameters: CustomLoggedStatsApiDeleteStatRequest, options?: AxiosRequestConfig) {
        return CustomLoggedStatsApiFp(this.configuration).deleteStat(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Custom Logged Stats
     * @param {CustomLoggedStatsApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomLoggedStatsApiGenerated
     */
    public getSingle(requestParameters: CustomLoggedStatsApiGetSingleRequest, options?: AxiosRequestConfig) {
        return CustomLoggedStatsApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Custom Logged Stats objects
     * @param {CustomLoggedStatsApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomLoggedStatsApiGenerated
     */
    public listAllObjects(requestParameters: CustomLoggedStatsApiListAllObjectsRequest, options?: AxiosRequestConfig) {
        return CustomLoggedStatsApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Custom Logged Stats by name
     * @param {CustomLoggedStatsApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomLoggedStatsApiGenerated
     */
    public updateByName(requestParameters: CustomLoggedStatsApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return CustomLoggedStatsApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
