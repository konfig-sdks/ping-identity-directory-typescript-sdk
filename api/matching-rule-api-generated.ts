/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetMatchingRule200Response } from '../models';
// @ts-ignore
import { MatchingRuleListResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MatchingRuleApi - axios parameter creator
 * @export
 */
export const MatchingRuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a single Matching Rule
         * @param {string} matchingRuleName Name of the Matching Rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleMatchingRule: async (matchingRuleName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchingRuleName' is not null or undefined
            assertParamExists('getSingleMatchingRule', 'matchingRuleName', matchingRuleName)
            const localVarPath = `/matching-rules/{matching-rule-name}`
                .replace(`{${"matching-rule-name"}}`, encodeURIComponent(String(matchingRuleName !== undefined ? matchingRuleName : `-matching-rule-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/matching-rules/{matching-rule-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Matching Rule objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMatchingRules: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/matching-rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/matching-rules',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Matching Rule by name
         * @param {string} matchingRuleName Name of the Matching Rule
         * @param {UpdateRequest} updateRequest Update an existing Matching Rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (matchingRuleName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchingRuleName' is not null or undefined
            assertParamExists('updateByName', 'matchingRuleName', matchingRuleName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/matching-rules/{matching-rule-name}`
                .replace(`{${"matching-rule-name"}}`, encodeURIComponent(String(matchingRuleName !== undefined ? matchingRuleName : `-matching-rule-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/matching-rules/{matching-rule-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatchingRuleApi - functional programming interface
 * @export
 */
export const MatchingRuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MatchingRuleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns a single Matching Rule
         * @param {MatchingRuleApiGetSingleMatchingRuleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleMatchingRule(requestParameters: MatchingRuleApiGetSingleMatchingRuleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMatchingRule200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleMatchingRule(requestParameters.matchingRuleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Matching Rule objects
         * @param {MatchingRuleApiListMatchingRulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMatchingRules(requestParameters: MatchingRuleApiListMatchingRulesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchingRuleListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMatchingRules(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Matching Rule by name
         * @param {MatchingRuleApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: MatchingRuleApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMatchingRule200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.matchingRuleName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MatchingRuleApi - factory interface
 * @export
 */
export const MatchingRuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MatchingRuleApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns a single Matching Rule
         * @param {MatchingRuleApiGetSingleMatchingRuleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleMatchingRule(requestParameters: MatchingRuleApiGetSingleMatchingRuleRequest, options?: AxiosRequestConfig): AxiosPromise<GetMatchingRule200Response> {
            return localVarFp.getSingleMatchingRule(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Matching Rule objects
         * @param {MatchingRuleApiListMatchingRulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMatchingRules(requestParameters: MatchingRuleApiListMatchingRulesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MatchingRuleListResponse> {
            return localVarFp.listMatchingRules(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Matching Rule by name
         * @param {MatchingRuleApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: MatchingRuleApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<GetMatchingRule200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSingleMatchingRule operation in MatchingRuleApi.
 * @export
 * @interface MatchingRuleApiGetSingleMatchingRuleRequest
 */
export type MatchingRuleApiGetSingleMatchingRuleRequest = {
    
    /**
    * Name of the Matching Rule
    * @type {string}
    * @memberof MatchingRuleApiGetSingleMatchingRule
    */
    readonly matchingRuleName: string
    
}

/**
 * Request parameters for listMatchingRules operation in MatchingRuleApi.
 * @export
 * @interface MatchingRuleApiListMatchingRulesRequest
 */
export type MatchingRuleApiListMatchingRulesRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof MatchingRuleApiListMatchingRules
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in MatchingRuleApi.
 * @export
 * @interface MatchingRuleApiUpdateByNameRequest
 */
export type MatchingRuleApiUpdateByNameRequest = {
    
    /**
    * Name of the Matching Rule
    * @type {string}
    * @memberof MatchingRuleApiUpdateByName
    */
    readonly matchingRuleName: string
    
} & UpdateRequest

/**
 * MatchingRuleApiGenerated - object-oriented interface
 * @export
 * @class MatchingRuleApiGenerated
 * @extends {BaseAPI}
 */
export class MatchingRuleApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Returns a single Matching Rule
     * @param {MatchingRuleApiGetSingleMatchingRuleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchingRuleApiGenerated
     */
    public getSingleMatchingRule(requestParameters: MatchingRuleApiGetSingleMatchingRuleRequest, options?: AxiosRequestConfig) {
        return MatchingRuleApiFp(this.configuration).getSingleMatchingRule(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Matching Rule objects
     * @param {MatchingRuleApiListMatchingRulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchingRuleApiGenerated
     */
    public listMatchingRules(requestParameters: MatchingRuleApiListMatchingRulesRequest = {}, options?: AxiosRequestConfig) {
        return MatchingRuleApiFp(this.configuration).listMatchingRules(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Matching Rule by name
     * @param {MatchingRuleApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchingRuleApiGenerated
     */
    public updateByName(requestParameters: MatchingRuleApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return MatchingRuleApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
