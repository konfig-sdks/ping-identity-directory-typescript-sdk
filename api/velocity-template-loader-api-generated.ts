/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddVelocityTemplateLoaderRequest } from '../models';
// @ts-ignore
import { EnumvelocityTemplateLoaderSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
// @ts-ignore
import { VelocityTemplateLoaderListResponse } from '../models';
// @ts-ignore
import { VelocityTemplateLoaderResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VelocityTemplateLoaderApi - axios parameter creator
 * @export
 */
export const VelocityTemplateLoaderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Velocity Template Loader to the config
         * @param {string} httpServletExtensionName Name of the HTTP Servlet Extension
         * @param {AddVelocityTemplateLoaderRequest} addVelocityTemplateLoaderRequest Create a new Velocity Template Loader in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewLoaderToConfig: async (httpServletExtensionName: string, addVelocityTemplateLoaderRequest: AddVelocityTemplateLoaderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'httpServletExtensionName' is not null or undefined
            assertParamExists('addNewLoaderToConfig', 'httpServletExtensionName', httpServletExtensionName)
            // verify required parameter 'addVelocityTemplateLoaderRequest' is not null or undefined
            assertParamExists('addNewLoaderToConfig', 'addVelocityTemplateLoaderRequest', addVelocityTemplateLoaderRequest)
            const localVarPath = `/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders`
                .replace(`{${"http-servlet-extension-name"}}`, encodeURIComponent(String(httpServletExtensionName !== undefined ? httpServletExtensionName : `-http-servlet-extension-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addVelocityTemplateLoaderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addVelocityTemplateLoaderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Velocity Template Loader
         * @param {string} velocityTemplateLoaderName Name of the Velocity Template Loader
         * @param {string} httpServletExtensionName Name of the HTTP Servlet Extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoader: async (velocityTemplateLoaderName: string, httpServletExtensionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'velocityTemplateLoaderName' is not null or undefined
            assertParamExists('deleteLoader', 'velocityTemplateLoaderName', velocityTemplateLoaderName)
            // verify required parameter 'httpServletExtensionName' is not null or undefined
            assertParamExists('deleteLoader', 'httpServletExtensionName', httpServletExtensionName)
            const localVarPath = `/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders/{velocity-template-loader-name}`
                .replace(`{${"velocity-template-loader-name"}}`, encodeURIComponent(String(velocityTemplateLoaderName !== undefined ? velocityTemplateLoaderName : `-velocity-template-loader-name-`)))
                .replace(`{${"http-servlet-extension-name"}}`, encodeURIComponent(String(httpServletExtensionName !== undefined ? httpServletExtensionName : `-http-servlet-extension-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders/{velocity-template-loader-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Velocity Template Loader objects
         * @param {string} httpServletExtensionName Name of the HTTP Servlet Extension
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTemplateLoaders: async (httpServletExtensionName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'httpServletExtensionName' is not null or undefined
            assertParamExists('getAllTemplateLoaders', 'httpServletExtensionName', httpServletExtensionName)
            const localVarPath = `/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders`
                .replace(`{${"http-servlet-extension-name"}}`, encodeURIComponent(String(httpServletExtensionName !== undefined ? httpServletExtensionName : `-http-servlet-extension-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Velocity Template Loader
         * @param {string} velocityTemplateLoaderName Name of the Velocity Template Loader
         * @param {string} httpServletExtensionName Name of the HTTP Servlet Extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleLoader: async (velocityTemplateLoaderName: string, httpServletExtensionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'velocityTemplateLoaderName' is not null or undefined
            assertParamExists('getSingleLoader', 'velocityTemplateLoaderName', velocityTemplateLoaderName)
            // verify required parameter 'httpServletExtensionName' is not null or undefined
            assertParamExists('getSingleLoader', 'httpServletExtensionName', httpServletExtensionName)
            const localVarPath = `/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders/{velocity-template-loader-name}`
                .replace(`{${"velocity-template-loader-name"}}`, encodeURIComponent(String(velocityTemplateLoaderName !== undefined ? velocityTemplateLoaderName : `-velocity-template-loader-name-`)))
                .replace(`{${"http-servlet-extension-name"}}`, encodeURIComponent(String(httpServletExtensionName !== undefined ? httpServletExtensionName : `-http-servlet-extension-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders/{velocity-template-loader-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Velocity Template Loader by name
         * @param {string} velocityTemplateLoaderName Name of the Velocity Template Loader
         * @param {string} httpServletExtensionName Name of the HTTP Servlet Extension
         * @param {UpdateRequest} updateRequest Update an existing Velocity Template Loader
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (velocityTemplateLoaderName: string, httpServletExtensionName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'velocityTemplateLoaderName' is not null or undefined
            assertParamExists('updateByName', 'velocityTemplateLoaderName', velocityTemplateLoaderName)
            // verify required parameter 'httpServletExtensionName' is not null or undefined
            assertParamExists('updateByName', 'httpServletExtensionName', httpServletExtensionName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders/{velocity-template-loader-name}`
                .replace(`{${"velocity-template-loader-name"}}`, encodeURIComponent(String(velocityTemplateLoaderName !== undefined ? velocityTemplateLoaderName : `-velocity-template-loader-name-`)))
                .replace(`{${"http-servlet-extension-name"}}`, encodeURIComponent(String(httpServletExtensionName !== undefined ? httpServletExtensionName : `-http-servlet-extension-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders/{velocity-template-loader-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VelocityTemplateLoaderApi - functional programming interface
 * @export
 */
export const VelocityTemplateLoaderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VelocityTemplateLoaderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Velocity Template Loader to the config
         * @param {VelocityTemplateLoaderApiAddNewLoaderToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewLoaderToConfig(requestParameters: VelocityTemplateLoaderApiAddNewLoaderToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VelocityTemplateLoaderResponse>> {
            const addVelocityTemplateLoaderRequest: AddVelocityTemplateLoaderRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewLoaderToConfig(requestParameters.httpServletExtensionName, addVelocityTemplateLoaderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Velocity Template Loader
         * @param {VelocityTemplateLoaderApiDeleteLoaderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLoader(requestParameters: VelocityTemplateLoaderApiDeleteLoaderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLoader(requestParameters.velocityTemplateLoaderName, requestParameters.httpServletExtensionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Velocity Template Loader objects
         * @param {VelocityTemplateLoaderApiGetAllTemplateLoadersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTemplateLoaders(requestParameters: VelocityTemplateLoaderApiGetAllTemplateLoadersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VelocityTemplateLoaderListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTemplateLoaders(requestParameters.httpServletExtensionName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Velocity Template Loader
         * @param {VelocityTemplateLoaderApiGetSingleLoaderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleLoader(requestParameters: VelocityTemplateLoaderApiGetSingleLoaderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VelocityTemplateLoaderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleLoader(requestParameters.velocityTemplateLoaderName, requestParameters.httpServletExtensionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Velocity Template Loader by name
         * @param {VelocityTemplateLoaderApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: VelocityTemplateLoaderApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VelocityTemplateLoaderResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.velocityTemplateLoaderName, requestParameters.httpServletExtensionName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VelocityTemplateLoaderApi - factory interface
 * @export
 */
export const VelocityTemplateLoaderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VelocityTemplateLoaderApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Velocity Template Loader to the config
         * @param {VelocityTemplateLoaderApiAddNewLoaderToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewLoaderToConfig(requestParameters: VelocityTemplateLoaderApiAddNewLoaderToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<VelocityTemplateLoaderResponse> {
            return localVarFp.addNewLoaderToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Velocity Template Loader
         * @param {VelocityTemplateLoaderApiDeleteLoaderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoader(requestParameters: VelocityTemplateLoaderApiDeleteLoaderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteLoader(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Velocity Template Loader objects
         * @param {VelocityTemplateLoaderApiGetAllTemplateLoadersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTemplateLoaders(requestParameters: VelocityTemplateLoaderApiGetAllTemplateLoadersRequest, options?: AxiosRequestConfig): AxiosPromise<VelocityTemplateLoaderListResponse> {
            return localVarFp.getAllTemplateLoaders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Velocity Template Loader
         * @param {VelocityTemplateLoaderApiGetSingleLoaderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleLoader(requestParameters: VelocityTemplateLoaderApiGetSingleLoaderRequest, options?: AxiosRequestConfig): AxiosPromise<VelocityTemplateLoaderResponse> {
            return localVarFp.getSingleLoader(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Velocity Template Loader by name
         * @param {VelocityTemplateLoaderApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: VelocityTemplateLoaderApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<VelocityTemplateLoaderResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewLoaderToConfig operation in VelocityTemplateLoaderApi.
 * @export
 * @interface VelocityTemplateLoaderApiAddNewLoaderToConfigRequest
 */
export type VelocityTemplateLoaderApiAddNewLoaderToConfigRequest = {
    
    /**
    * Name of the HTTP Servlet Extension
    * @type {string}
    * @memberof VelocityTemplateLoaderApiAddNewLoaderToConfig
    */
    readonly httpServletExtensionName: string
    
} & AddVelocityTemplateLoaderRequest

/**
 * Request parameters for deleteLoader operation in VelocityTemplateLoaderApi.
 * @export
 * @interface VelocityTemplateLoaderApiDeleteLoaderRequest
 */
export type VelocityTemplateLoaderApiDeleteLoaderRequest = {
    
    /**
    * Name of the Velocity Template Loader
    * @type {string}
    * @memberof VelocityTemplateLoaderApiDeleteLoader
    */
    readonly velocityTemplateLoaderName: string
    
    /**
    * Name of the HTTP Servlet Extension
    * @type {string}
    * @memberof VelocityTemplateLoaderApiDeleteLoader
    */
    readonly httpServletExtensionName: string
    
}

/**
 * Request parameters for getAllTemplateLoaders operation in VelocityTemplateLoaderApi.
 * @export
 * @interface VelocityTemplateLoaderApiGetAllTemplateLoadersRequest
 */
export type VelocityTemplateLoaderApiGetAllTemplateLoadersRequest = {
    
    /**
    * Name of the HTTP Servlet Extension
    * @type {string}
    * @memberof VelocityTemplateLoaderApiGetAllTemplateLoaders
    */
    readonly httpServletExtensionName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof VelocityTemplateLoaderApiGetAllTemplateLoaders
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingleLoader operation in VelocityTemplateLoaderApi.
 * @export
 * @interface VelocityTemplateLoaderApiGetSingleLoaderRequest
 */
export type VelocityTemplateLoaderApiGetSingleLoaderRequest = {
    
    /**
    * Name of the Velocity Template Loader
    * @type {string}
    * @memberof VelocityTemplateLoaderApiGetSingleLoader
    */
    readonly velocityTemplateLoaderName: string
    
    /**
    * Name of the HTTP Servlet Extension
    * @type {string}
    * @memberof VelocityTemplateLoaderApiGetSingleLoader
    */
    readonly httpServletExtensionName: string
    
}

/**
 * Request parameters for updateByName operation in VelocityTemplateLoaderApi.
 * @export
 * @interface VelocityTemplateLoaderApiUpdateByNameRequest
 */
export type VelocityTemplateLoaderApiUpdateByNameRequest = {
    
    /**
    * Name of the Velocity Template Loader
    * @type {string}
    * @memberof VelocityTemplateLoaderApiUpdateByName
    */
    readonly velocityTemplateLoaderName: string
    
    /**
    * Name of the HTTP Servlet Extension
    * @type {string}
    * @memberof VelocityTemplateLoaderApiUpdateByName
    */
    readonly httpServletExtensionName: string
    
} & UpdateRequest

/**
 * VelocityTemplateLoaderApiGenerated - object-oriented interface
 * @export
 * @class VelocityTemplateLoaderApiGenerated
 * @extends {BaseAPI}
 */
export class VelocityTemplateLoaderApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Velocity Template Loader to the config
     * @param {VelocityTemplateLoaderApiAddNewLoaderToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VelocityTemplateLoaderApiGenerated
     */
    public addNewLoaderToConfig(requestParameters: VelocityTemplateLoaderApiAddNewLoaderToConfigRequest, options?: AxiosRequestConfig) {
        return VelocityTemplateLoaderApiFp(this.configuration).addNewLoaderToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Velocity Template Loader
     * @param {VelocityTemplateLoaderApiDeleteLoaderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VelocityTemplateLoaderApiGenerated
     */
    public deleteLoader(requestParameters: VelocityTemplateLoaderApiDeleteLoaderRequest, options?: AxiosRequestConfig) {
        return VelocityTemplateLoaderApiFp(this.configuration).deleteLoader(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Velocity Template Loader objects
     * @param {VelocityTemplateLoaderApiGetAllTemplateLoadersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VelocityTemplateLoaderApiGenerated
     */
    public getAllTemplateLoaders(requestParameters: VelocityTemplateLoaderApiGetAllTemplateLoadersRequest, options?: AxiosRequestConfig) {
        return VelocityTemplateLoaderApiFp(this.configuration).getAllTemplateLoaders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Velocity Template Loader
     * @param {VelocityTemplateLoaderApiGetSingleLoaderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VelocityTemplateLoaderApiGenerated
     */
    public getSingleLoader(requestParameters: VelocityTemplateLoaderApiGetSingleLoaderRequest, options?: AxiosRequestConfig) {
        return VelocityTemplateLoaderApiFp(this.configuration).getSingleLoader(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Velocity Template Loader by name
     * @param {VelocityTemplateLoaderApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VelocityTemplateLoaderApiGenerated
     */
    public updateByName(requestParameters: VelocityTemplateLoaderApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return VelocityTemplateLoaderApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
