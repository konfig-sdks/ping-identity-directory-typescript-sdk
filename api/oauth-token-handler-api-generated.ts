/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddOauthTokenHandler200Response } from '../models';
// @ts-ignore
import { AddOauthTokenHandlerRequest } from '../models';
// @ts-ignore
import { EnumthirdPartyOauthTokenHandlerSchemaUrn } from '../models';
// @ts-ignore
import { OauthTokenHandlerListResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OauthTokenHandlerApi - axios parameter creator
 * @export
 */
export const OauthTokenHandlerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new OAuth Token Handler to the config
         * @param {AddOauthTokenHandlerRequest} addOauthTokenHandlerRequest Create a new OAuth Token Handler in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewHandler: async (addOauthTokenHandlerRequest: AddOauthTokenHandlerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addOauthTokenHandlerRequest' is not null or undefined
            assertParamExists('addNewHandler', 'addOauthTokenHandlerRequest', addOauthTokenHandlerRequest)
            const localVarPath = `/oauth-token-handlers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addOauthTokenHandlerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/oauth-token-handlers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addOauthTokenHandlerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a OAuth Token Handler
         * @param {string} oauthTokenHandlerName Name of the OAuth Token Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHandler: async (oauthTokenHandlerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oauthTokenHandlerName' is not null or undefined
            assertParamExists('deleteHandler', 'oauthTokenHandlerName', oauthTokenHandlerName)
            const localVarPath = `/oauth-token-handlers/{oauth-token-handler-name}`
                .replace(`{${"oauth-token-handler-name"}}`, encodeURIComponent(String(oauthTokenHandlerName !== undefined ? oauthTokenHandlerName : `-oauth-token-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/oauth-token-handlers/{oauth-token-handler-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single OAuth Token Handler
         * @param {string} oauthTokenHandlerName Name of the OAuth Token Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (oauthTokenHandlerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oauthTokenHandlerName' is not null or undefined
            assertParamExists('getSingle', 'oauthTokenHandlerName', oauthTokenHandlerName)
            const localVarPath = `/oauth-token-handlers/{oauth-token-handler-name}`
                .replace(`{${"oauth-token-handler-name"}}`, encodeURIComponent(String(oauthTokenHandlerName !== undefined ? oauthTokenHandlerName : `-oauth-token-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/oauth-token-handlers/{oauth-token-handler-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all OAuth Token Handler objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllHandlers: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oauth-token-handlers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/oauth-token-handlers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing OAuth Token Handler by name
         * @param {string} oauthTokenHandlerName Name of the OAuth Token Handler
         * @param {UpdateRequest} updateRequest Update an existing OAuth Token Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (oauthTokenHandlerName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oauthTokenHandlerName' is not null or undefined
            assertParamExists('updateByName', 'oauthTokenHandlerName', oauthTokenHandlerName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/oauth-token-handlers/{oauth-token-handler-name}`
                .replace(`{${"oauth-token-handler-name"}}`, encodeURIComponent(String(oauthTokenHandlerName !== undefined ? oauthTokenHandlerName : `-oauth-token-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/oauth-token-handlers/{oauth-token-handler-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OauthTokenHandlerApi - functional programming interface
 * @export
 */
export const OauthTokenHandlerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OauthTokenHandlerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new OAuth Token Handler to the config
         * @param {OauthTokenHandlerApiAddNewHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewHandler(requestParameters: OauthTokenHandlerApiAddNewHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddOauthTokenHandler200Response>> {
            const addOauthTokenHandlerRequest: AddOauthTokenHandlerRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewHandler(addOauthTokenHandlerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a OAuth Token Handler
         * @param {OauthTokenHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHandler(requestParameters: OauthTokenHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHandler(requestParameters.oauthTokenHandlerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single OAuth Token Handler
         * @param {OauthTokenHandlerApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: OauthTokenHandlerApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddOauthTokenHandler200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.oauthTokenHandlerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all OAuth Token Handler objects
         * @param {OauthTokenHandlerApiListAllHandlersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllHandlers(requestParameters: OauthTokenHandlerApiListAllHandlersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthTokenHandlerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllHandlers(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing OAuth Token Handler by name
         * @param {OauthTokenHandlerApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: OauthTokenHandlerApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddOauthTokenHandler200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.oauthTokenHandlerName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OauthTokenHandlerApi - factory interface
 * @export
 */
export const OauthTokenHandlerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OauthTokenHandlerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new OAuth Token Handler to the config
         * @param {OauthTokenHandlerApiAddNewHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewHandler(requestParameters: OauthTokenHandlerApiAddNewHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<AddOauthTokenHandler200Response> {
            return localVarFp.addNewHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a OAuth Token Handler
         * @param {OauthTokenHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHandler(requestParameters: OauthTokenHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single OAuth Token Handler
         * @param {OauthTokenHandlerApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: OauthTokenHandlerApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddOauthTokenHandler200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all OAuth Token Handler objects
         * @param {OauthTokenHandlerApiListAllHandlersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllHandlers(requestParameters: OauthTokenHandlerApiListAllHandlersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OauthTokenHandlerListResponse> {
            return localVarFp.listAllHandlers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing OAuth Token Handler by name
         * @param {OauthTokenHandlerApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: OauthTokenHandlerApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddOauthTokenHandler200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewHandler operation in OauthTokenHandlerApi.
 * @export
 * @interface OauthTokenHandlerApiAddNewHandlerRequest
 */
export type OauthTokenHandlerApiAddNewHandlerRequest = {
    
} & AddOauthTokenHandlerRequest

/**
 * Request parameters for deleteHandler operation in OauthTokenHandlerApi.
 * @export
 * @interface OauthTokenHandlerApiDeleteHandlerRequest
 */
export type OauthTokenHandlerApiDeleteHandlerRequest = {
    
    /**
    * Name of the OAuth Token Handler
    * @type {string}
    * @memberof OauthTokenHandlerApiDeleteHandler
    */
    readonly oauthTokenHandlerName: string
    
}

/**
 * Request parameters for getSingle operation in OauthTokenHandlerApi.
 * @export
 * @interface OauthTokenHandlerApiGetSingleRequest
 */
export type OauthTokenHandlerApiGetSingleRequest = {
    
    /**
    * Name of the OAuth Token Handler
    * @type {string}
    * @memberof OauthTokenHandlerApiGetSingle
    */
    readonly oauthTokenHandlerName: string
    
}

/**
 * Request parameters for listAllHandlers operation in OauthTokenHandlerApi.
 * @export
 * @interface OauthTokenHandlerApiListAllHandlersRequest
 */
export type OauthTokenHandlerApiListAllHandlersRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof OauthTokenHandlerApiListAllHandlers
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in OauthTokenHandlerApi.
 * @export
 * @interface OauthTokenHandlerApiUpdateByNameRequest
 */
export type OauthTokenHandlerApiUpdateByNameRequest = {
    
    /**
    * Name of the OAuth Token Handler
    * @type {string}
    * @memberof OauthTokenHandlerApiUpdateByName
    */
    readonly oauthTokenHandlerName: string
    
} & UpdateRequest

/**
 * OauthTokenHandlerApiGenerated - object-oriented interface
 * @export
 * @class OauthTokenHandlerApiGenerated
 * @extends {BaseAPI}
 */
export class OauthTokenHandlerApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new OAuth Token Handler to the config
     * @param {OauthTokenHandlerApiAddNewHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthTokenHandlerApiGenerated
     */
    public addNewHandler(requestParameters: OauthTokenHandlerApiAddNewHandlerRequest, options?: AxiosRequestConfig) {
        return OauthTokenHandlerApiFp(this.configuration).addNewHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a OAuth Token Handler
     * @param {OauthTokenHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthTokenHandlerApiGenerated
     */
    public deleteHandler(requestParameters: OauthTokenHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig) {
        return OauthTokenHandlerApiFp(this.configuration).deleteHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single OAuth Token Handler
     * @param {OauthTokenHandlerApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthTokenHandlerApiGenerated
     */
    public getSingle(requestParameters: OauthTokenHandlerApiGetSingleRequest, options?: AxiosRequestConfig) {
        return OauthTokenHandlerApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all OAuth Token Handler objects
     * @param {OauthTokenHandlerApiListAllHandlersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthTokenHandlerApiGenerated
     */
    public listAllHandlers(requestParameters: OauthTokenHandlerApiListAllHandlersRequest = {}, options?: AxiosRequestConfig) {
        return OauthTokenHandlerApiFp(this.configuration).listAllHandlers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing OAuth Token Handler by name
     * @param {OauthTokenHandlerApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthTokenHandlerApiGenerated
     */
    public updateByName(requestParameters: OauthTokenHandlerApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return OauthTokenHandlerApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
