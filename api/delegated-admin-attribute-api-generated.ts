/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDelegatedAdminAttribute200Response } from '../models';
// @ts-ignore
import { AddDelegatedAdminAttributeRequest } from '../models';
// @ts-ignore
import { DelegatedAdminAttributeListResponse } from '../models';
// @ts-ignore
import { EnumdelegatedAdminAttributeAttributePresentationProp } from '../models';
// @ts-ignore
import { EnumdelegatedAdminAttributeMutabilityProp } from '../models';
// @ts-ignore
import { EnumdelegatedAdminAttributePhotoAllowedMIMETypeProp } from '../models';
// @ts-ignore
import { EnumgenericDelegatedAdminAttributeSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DelegatedAdminAttributeApi - axios parameter creator
 * @export
 */
export const DelegatedAdminAttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Delegated Admin Attribute to the config
         * @param {string} restResourceTypeName Name of the REST Resource Type
         * @param {AddDelegatedAdminAttributeRequest} addDelegatedAdminAttributeRequest Create a new Delegated Admin Attribute in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig: async (restResourceTypeName: string, addDelegatedAdminAttributeRequest: AddDelegatedAdminAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restResourceTypeName' is not null or undefined
            assertParamExists('addNewConfig', 'restResourceTypeName', restResourceTypeName)
            // verify required parameter 'addDelegatedAdminAttributeRequest' is not null or undefined
            assertParamExists('addNewConfig', 'addDelegatedAdminAttributeRequest', addDelegatedAdminAttributeRequest)
            const localVarPath = `/rest-resource-types/{rest-resource-type-name}/delegated-admin-attributes`
                .replace(`{${"rest-resource-type-name"}}`, encodeURIComponent(String(restResourceTypeName !== undefined ? restResourceTypeName : `-rest-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addDelegatedAdminAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/rest-resource-types/{rest-resource-type-name}/delegated-admin-attributes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addDelegatedAdminAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Delegated Admin Attribute
         * @param {string} delegatedAdminAttributeName Name of the Delegated Admin Attribute
         * @param {string} restResourceTypeName Name of the REST Resource Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDelegatedAdminAttribute: async (delegatedAdminAttributeName: string, restResourceTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminAttributeName' is not null or undefined
            assertParamExists('deleteDelegatedAdminAttribute', 'delegatedAdminAttributeName', delegatedAdminAttributeName)
            // verify required parameter 'restResourceTypeName' is not null or undefined
            assertParamExists('deleteDelegatedAdminAttribute', 'restResourceTypeName', restResourceTypeName)
            const localVarPath = `/rest-resource-types/{rest-resource-type-name}/delegated-admin-attributes/{delegated-admin-attribute-name}`
                .replace(`{${"delegated-admin-attribute-name"}}`, encodeURIComponent(String(delegatedAdminAttributeName !== undefined ? delegatedAdminAttributeName : `-delegated-admin-attribute-name-`)))
                .replace(`{${"rest-resource-type-name"}}`, encodeURIComponent(String(restResourceTypeName !== undefined ? restResourceTypeName : `-rest-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/rest-resource-types/{rest-resource-type-name}/delegated-admin-attributes/{delegated-admin-attribute-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Delegated Admin Attribute objects
         * @param {string} restResourceTypeName Name of the REST Resource Type
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfDelegatedAdminAttributes: async (restResourceTypeName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restResourceTypeName' is not null or undefined
            assertParamExists('getListOfDelegatedAdminAttributes', 'restResourceTypeName', restResourceTypeName)
            const localVarPath = `/rest-resource-types/{rest-resource-type-name}/delegated-admin-attributes`
                .replace(`{${"rest-resource-type-name"}}`, encodeURIComponent(String(restResourceTypeName !== undefined ? restResourceTypeName : `-rest-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/rest-resource-types/{rest-resource-type-name}/delegated-admin-attributes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Delegated Admin Attribute
         * @param {string} delegatedAdminAttributeName Name of the Delegated Admin Attribute
         * @param {string} restResourceTypeName Name of the REST Resource Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (delegatedAdminAttributeName: string, restResourceTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminAttributeName' is not null or undefined
            assertParamExists('getSingle', 'delegatedAdminAttributeName', delegatedAdminAttributeName)
            // verify required parameter 'restResourceTypeName' is not null or undefined
            assertParamExists('getSingle', 'restResourceTypeName', restResourceTypeName)
            const localVarPath = `/rest-resource-types/{rest-resource-type-name}/delegated-admin-attributes/{delegated-admin-attribute-name}`
                .replace(`{${"delegated-admin-attribute-name"}}`, encodeURIComponent(String(delegatedAdminAttributeName !== undefined ? delegatedAdminAttributeName : `-delegated-admin-attribute-name-`)))
                .replace(`{${"rest-resource-type-name"}}`, encodeURIComponent(String(restResourceTypeName !== undefined ? restResourceTypeName : `-rest-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/rest-resource-types/{rest-resource-type-name}/delegated-admin-attributes/{delegated-admin-attribute-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Delegated Admin Attribute by name
         * @param {string} delegatedAdminAttributeName Name of the Delegated Admin Attribute
         * @param {string} restResourceTypeName Name of the REST Resource Type
         * @param {UpdateRequest} updateRequest Update an existing Delegated Admin Attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (delegatedAdminAttributeName: string, restResourceTypeName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminAttributeName' is not null or undefined
            assertParamExists('updateByName', 'delegatedAdminAttributeName', delegatedAdminAttributeName)
            // verify required parameter 'restResourceTypeName' is not null or undefined
            assertParamExists('updateByName', 'restResourceTypeName', restResourceTypeName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/rest-resource-types/{rest-resource-type-name}/delegated-admin-attributes/{delegated-admin-attribute-name}`
                .replace(`{${"delegated-admin-attribute-name"}}`, encodeURIComponent(String(delegatedAdminAttributeName !== undefined ? delegatedAdminAttributeName : `-delegated-admin-attribute-name-`)))
                .replace(`{${"rest-resource-type-name"}}`, encodeURIComponent(String(restResourceTypeName !== undefined ? restResourceTypeName : `-rest-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/rest-resource-types/{rest-resource-type-name}/delegated-admin-attributes/{delegated-admin-attribute-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DelegatedAdminAttributeApi - functional programming interface
 * @export
 */
export const DelegatedAdminAttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DelegatedAdminAttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Delegated Admin Attribute to the config
         * @param {DelegatedAdminAttributeApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewConfig(requestParameters: DelegatedAdminAttributeApiAddNewConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddDelegatedAdminAttribute200Response>> {
            const addDelegatedAdminAttributeRequest: AddDelegatedAdminAttributeRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewConfig(requestParameters.restResourceTypeName, addDelegatedAdminAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Delegated Admin Attribute
         * @param {DelegatedAdminAttributeApiDeleteDelegatedAdminAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDelegatedAdminAttribute(requestParameters: DelegatedAdminAttributeApiDeleteDelegatedAdminAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDelegatedAdminAttribute(requestParameters.delegatedAdminAttributeName, requestParameters.restResourceTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Delegated Admin Attribute objects
         * @param {DelegatedAdminAttributeApiGetListOfDelegatedAdminAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListOfDelegatedAdminAttributes(requestParameters: DelegatedAdminAttributeApiGetListOfDelegatedAdminAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegatedAdminAttributeListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListOfDelegatedAdminAttributes(requestParameters.restResourceTypeName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Delegated Admin Attribute
         * @param {DelegatedAdminAttributeApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: DelegatedAdminAttributeApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddDelegatedAdminAttribute200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.delegatedAdminAttributeName, requestParameters.restResourceTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Delegated Admin Attribute by name
         * @param {DelegatedAdminAttributeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: DelegatedAdminAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddDelegatedAdminAttribute200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.delegatedAdminAttributeName, requestParameters.restResourceTypeName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DelegatedAdminAttributeApi - factory interface
 * @export
 */
export const DelegatedAdminAttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DelegatedAdminAttributeApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Delegated Admin Attribute to the config
         * @param {DelegatedAdminAttributeApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig(requestParameters: DelegatedAdminAttributeApiAddNewConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AddDelegatedAdminAttribute200Response> {
            return localVarFp.addNewConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Delegated Admin Attribute
         * @param {DelegatedAdminAttributeApiDeleteDelegatedAdminAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDelegatedAdminAttribute(requestParameters: DelegatedAdminAttributeApiDeleteDelegatedAdminAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDelegatedAdminAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Delegated Admin Attribute objects
         * @param {DelegatedAdminAttributeApiGetListOfDelegatedAdminAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfDelegatedAdminAttributes(requestParameters: DelegatedAdminAttributeApiGetListOfDelegatedAdminAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<DelegatedAdminAttributeListResponse> {
            return localVarFp.getListOfDelegatedAdminAttributes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Delegated Admin Attribute
         * @param {DelegatedAdminAttributeApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: DelegatedAdminAttributeApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddDelegatedAdminAttribute200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Delegated Admin Attribute by name
         * @param {DelegatedAdminAttributeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: DelegatedAdminAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddDelegatedAdminAttribute200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewConfig operation in DelegatedAdminAttributeApi.
 * @export
 * @interface DelegatedAdminAttributeApiAddNewConfigRequest
 */
export type DelegatedAdminAttributeApiAddNewConfigRequest = {
    
    /**
    * Name of the REST Resource Type
    * @type {string}
    * @memberof DelegatedAdminAttributeApiAddNewConfig
    */
    readonly restResourceTypeName: string
    
} & AddDelegatedAdminAttributeRequest

/**
 * Request parameters for deleteDelegatedAdminAttribute operation in DelegatedAdminAttributeApi.
 * @export
 * @interface DelegatedAdminAttributeApiDeleteDelegatedAdminAttributeRequest
 */
export type DelegatedAdminAttributeApiDeleteDelegatedAdminAttributeRequest = {
    
    /**
    * Name of the Delegated Admin Attribute
    * @type {string}
    * @memberof DelegatedAdminAttributeApiDeleteDelegatedAdminAttribute
    */
    readonly delegatedAdminAttributeName: string
    
    /**
    * Name of the REST Resource Type
    * @type {string}
    * @memberof DelegatedAdminAttributeApiDeleteDelegatedAdminAttribute
    */
    readonly restResourceTypeName: string
    
}

/**
 * Request parameters for getListOfDelegatedAdminAttributes operation in DelegatedAdminAttributeApi.
 * @export
 * @interface DelegatedAdminAttributeApiGetListOfDelegatedAdminAttributesRequest
 */
export type DelegatedAdminAttributeApiGetListOfDelegatedAdminAttributesRequest = {
    
    /**
    * Name of the REST Resource Type
    * @type {string}
    * @memberof DelegatedAdminAttributeApiGetListOfDelegatedAdminAttributes
    */
    readonly restResourceTypeName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof DelegatedAdminAttributeApiGetListOfDelegatedAdminAttributes
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingle operation in DelegatedAdminAttributeApi.
 * @export
 * @interface DelegatedAdminAttributeApiGetSingleRequest
 */
export type DelegatedAdminAttributeApiGetSingleRequest = {
    
    /**
    * Name of the Delegated Admin Attribute
    * @type {string}
    * @memberof DelegatedAdminAttributeApiGetSingle
    */
    readonly delegatedAdminAttributeName: string
    
    /**
    * Name of the REST Resource Type
    * @type {string}
    * @memberof DelegatedAdminAttributeApiGetSingle
    */
    readonly restResourceTypeName: string
    
}

/**
 * Request parameters for updateByName operation in DelegatedAdminAttributeApi.
 * @export
 * @interface DelegatedAdminAttributeApiUpdateByNameRequest
 */
export type DelegatedAdminAttributeApiUpdateByNameRequest = {
    
    /**
    * Name of the Delegated Admin Attribute
    * @type {string}
    * @memberof DelegatedAdminAttributeApiUpdateByName
    */
    readonly delegatedAdminAttributeName: string
    
    /**
    * Name of the REST Resource Type
    * @type {string}
    * @memberof DelegatedAdminAttributeApiUpdateByName
    */
    readonly restResourceTypeName: string
    
} & UpdateRequest

/**
 * DelegatedAdminAttributeApiGenerated - object-oriented interface
 * @export
 * @class DelegatedAdminAttributeApiGenerated
 * @extends {BaseAPI}
 */
export class DelegatedAdminAttributeApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Delegated Admin Attribute to the config
     * @param {DelegatedAdminAttributeApiAddNewConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminAttributeApiGenerated
     */
    public addNewConfig(requestParameters: DelegatedAdminAttributeApiAddNewConfigRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminAttributeApiFp(this.configuration).addNewConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Delegated Admin Attribute
     * @param {DelegatedAdminAttributeApiDeleteDelegatedAdminAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminAttributeApiGenerated
     */
    public deleteDelegatedAdminAttribute(requestParameters: DelegatedAdminAttributeApiDeleteDelegatedAdminAttributeRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminAttributeApiFp(this.configuration).deleteDelegatedAdminAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Delegated Admin Attribute objects
     * @param {DelegatedAdminAttributeApiGetListOfDelegatedAdminAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminAttributeApiGenerated
     */
    public getListOfDelegatedAdminAttributes(requestParameters: DelegatedAdminAttributeApiGetListOfDelegatedAdminAttributesRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminAttributeApiFp(this.configuration).getListOfDelegatedAdminAttributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Delegated Admin Attribute
     * @param {DelegatedAdminAttributeApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminAttributeApiGenerated
     */
    public getSingle(requestParameters: DelegatedAdminAttributeApiGetSingleRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminAttributeApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Delegated Admin Attribute by name
     * @param {DelegatedAdminAttributeApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminAttributeApiGenerated
     */
    public updateByName(requestParameters: DelegatedAdminAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminAttributeApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
