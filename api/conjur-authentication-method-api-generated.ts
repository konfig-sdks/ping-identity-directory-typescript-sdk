/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddApiKeyConjurAuthenticationMethodRequest } from '../models';
// @ts-ignore
import { ApiKeyConjurAuthenticationMethodResponse } from '../models';
// @ts-ignore
import { ConjurAuthenticationMethodListResponse } from '../models';
// @ts-ignore
import { EnumapiKeyConjurAuthenticationMethodSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConjurAuthenticationMethodApi - axios parameter creator
 * @export
 */
export const ConjurAuthenticationMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Conjur Authentication Method to the config
         * @param {AddApiKeyConjurAuthenticationMethodRequest} addApiKeyConjurAuthenticationMethodRequest Create a new Conjur Authentication Method in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewMethod: async (addApiKeyConjurAuthenticationMethodRequest: AddApiKeyConjurAuthenticationMethodRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addApiKeyConjurAuthenticationMethodRequest' is not null or undefined
            assertParamExists('addNewMethod', 'addApiKeyConjurAuthenticationMethodRequest', addApiKeyConjurAuthenticationMethodRequest)
            const localVarPath = `/conjur-authentication-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addApiKeyConjurAuthenticationMethodRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/conjur-authentication-methods',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addApiKeyConjurAuthenticationMethodRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Conjur Authentication Method
         * @param {string} conjurAuthenticationMethodName Name of the Conjur Authentication Method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMethod: async (conjurAuthenticationMethodName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conjurAuthenticationMethodName' is not null or undefined
            assertParamExists('deleteMethod', 'conjurAuthenticationMethodName', conjurAuthenticationMethodName)
            const localVarPath = `/conjur-authentication-methods/{conjur-authentication-method-name}`
                .replace(`{${"conjur-authentication-method-name"}}`, encodeURIComponent(String(conjurAuthenticationMethodName !== undefined ? conjurAuthenticationMethodName : `-conjur-authentication-method-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/conjur-authentication-methods/{conjur-authentication-method-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Conjur Authentication Method
         * @param {string} conjurAuthenticationMethodName Name of the Conjur Authentication Method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMethod: async (conjurAuthenticationMethodName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conjurAuthenticationMethodName' is not null or undefined
            assertParamExists('getMethod', 'conjurAuthenticationMethodName', conjurAuthenticationMethodName)
            const localVarPath = `/conjur-authentication-methods/{conjur-authentication-method-name}`
                .replace(`{${"conjur-authentication-method-name"}}`, encodeURIComponent(String(conjurAuthenticationMethodName !== undefined ? conjurAuthenticationMethodName : `-conjur-authentication-method-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/conjur-authentication-methods/{conjur-authentication-method-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Conjur Authentication Method objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllMethods: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/conjur-authentication-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/conjur-authentication-methods',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Conjur Authentication Method by name
         * @param {string} conjurAuthenticationMethodName Name of the Conjur Authentication Method
         * @param {UpdateRequest} updateRequest Update an existing Conjur Authentication Method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByMethodName: async (conjurAuthenticationMethodName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conjurAuthenticationMethodName' is not null or undefined
            assertParamExists('updateByMethodName', 'conjurAuthenticationMethodName', conjurAuthenticationMethodName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByMethodName', 'updateRequest', updateRequest)
            const localVarPath = `/conjur-authentication-methods/{conjur-authentication-method-name}`
                .replace(`{${"conjur-authentication-method-name"}}`, encodeURIComponent(String(conjurAuthenticationMethodName !== undefined ? conjurAuthenticationMethodName : `-conjur-authentication-method-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/conjur-authentication-methods/{conjur-authentication-method-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConjurAuthenticationMethodApi - functional programming interface
 * @export
 */
export const ConjurAuthenticationMethodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConjurAuthenticationMethodApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Conjur Authentication Method to the config
         * @param {ConjurAuthenticationMethodApiAddNewMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewMethod(requestParameters: ConjurAuthenticationMethodApiAddNewMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyConjurAuthenticationMethodResponse>> {
            const addApiKeyConjurAuthenticationMethodRequest: AddApiKeyConjurAuthenticationMethodRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewMethod(addApiKeyConjurAuthenticationMethodRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Conjur Authentication Method
         * @param {ConjurAuthenticationMethodApiDeleteMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMethod(requestParameters: ConjurAuthenticationMethodApiDeleteMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMethod(requestParameters.conjurAuthenticationMethodName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Conjur Authentication Method
         * @param {ConjurAuthenticationMethodApiGetMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMethod(requestParameters: ConjurAuthenticationMethodApiGetMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyConjurAuthenticationMethodResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMethod(requestParameters.conjurAuthenticationMethodName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Conjur Authentication Method objects
         * @param {ConjurAuthenticationMethodApiListAllMethodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllMethods(requestParameters: ConjurAuthenticationMethodApiListAllMethodsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConjurAuthenticationMethodListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllMethods(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Conjur Authentication Method by name
         * @param {ConjurAuthenticationMethodApiUpdateByMethodNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByMethodName(requestParameters: ConjurAuthenticationMethodApiUpdateByMethodNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyConjurAuthenticationMethodResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByMethodName(requestParameters.conjurAuthenticationMethodName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConjurAuthenticationMethodApi - factory interface
 * @export
 */
export const ConjurAuthenticationMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConjurAuthenticationMethodApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Conjur Authentication Method to the config
         * @param {ConjurAuthenticationMethodApiAddNewMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewMethod(requestParameters: ConjurAuthenticationMethodApiAddNewMethodRequest, options?: AxiosRequestConfig): AxiosPromise<ApiKeyConjurAuthenticationMethodResponse> {
            return localVarFp.addNewMethod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Conjur Authentication Method
         * @param {ConjurAuthenticationMethodApiDeleteMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMethod(requestParameters: ConjurAuthenticationMethodApiDeleteMethodRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMethod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Conjur Authentication Method
         * @param {ConjurAuthenticationMethodApiGetMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMethod(requestParameters: ConjurAuthenticationMethodApiGetMethodRequest, options?: AxiosRequestConfig): AxiosPromise<ApiKeyConjurAuthenticationMethodResponse> {
            return localVarFp.getMethod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Conjur Authentication Method objects
         * @param {ConjurAuthenticationMethodApiListAllMethodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllMethods(requestParameters: ConjurAuthenticationMethodApiListAllMethodsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ConjurAuthenticationMethodListResponse> {
            return localVarFp.listAllMethods(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Conjur Authentication Method by name
         * @param {ConjurAuthenticationMethodApiUpdateByMethodNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByMethodName(requestParameters: ConjurAuthenticationMethodApiUpdateByMethodNameRequest, options?: AxiosRequestConfig): AxiosPromise<ApiKeyConjurAuthenticationMethodResponse> {
            return localVarFp.updateByMethodName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewMethod operation in ConjurAuthenticationMethodApi.
 * @export
 * @interface ConjurAuthenticationMethodApiAddNewMethodRequest
 */
export type ConjurAuthenticationMethodApiAddNewMethodRequest = {
    
} & AddApiKeyConjurAuthenticationMethodRequest

/**
 * Request parameters for deleteMethod operation in ConjurAuthenticationMethodApi.
 * @export
 * @interface ConjurAuthenticationMethodApiDeleteMethodRequest
 */
export type ConjurAuthenticationMethodApiDeleteMethodRequest = {
    
    /**
    * Name of the Conjur Authentication Method
    * @type {string}
    * @memberof ConjurAuthenticationMethodApiDeleteMethod
    */
    readonly conjurAuthenticationMethodName: string
    
}

/**
 * Request parameters for getMethod operation in ConjurAuthenticationMethodApi.
 * @export
 * @interface ConjurAuthenticationMethodApiGetMethodRequest
 */
export type ConjurAuthenticationMethodApiGetMethodRequest = {
    
    /**
    * Name of the Conjur Authentication Method
    * @type {string}
    * @memberof ConjurAuthenticationMethodApiGetMethod
    */
    readonly conjurAuthenticationMethodName: string
    
}

/**
 * Request parameters for listAllMethods operation in ConjurAuthenticationMethodApi.
 * @export
 * @interface ConjurAuthenticationMethodApiListAllMethodsRequest
 */
export type ConjurAuthenticationMethodApiListAllMethodsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ConjurAuthenticationMethodApiListAllMethods
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByMethodName operation in ConjurAuthenticationMethodApi.
 * @export
 * @interface ConjurAuthenticationMethodApiUpdateByMethodNameRequest
 */
export type ConjurAuthenticationMethodApiUpdateByMethodNameRequest = {
    
    /**
    * Name of the Conjur Authentication Method
    * @type {string}
    * @memberof ConjurAuthenticationMethodApiUpdateByMethodName
    */
    readonly conjurAuthenticationMethodName: string
    
} & UpdateRequest

/**
 * ConjurAuthenticationMethodApiGenerated - object-oriented interface
 * @export
 * @class ConjurAuthenticationMethodApiGenerated
 * @extends {BaseAPI}
 */
export class ConjurAuthenticationMethodApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Conjur Authentication Method to the config
     * @param {ConjurAuthenticationMethodApiAddNewMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConjurAuthenticationMethodApiGenerated
     */
    public addNewMethod(requestParameters: ConjurAuthenticationMethodApiAddNewMethodRequest, options?: AxiosRequestConfig) {
        return ConjurAuthenticationMethodApiFp(this.configuration).addNewMethod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Conjur Authentication Method
     * @param {ConjurAuthenticationMethodApiDeleteMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConjurAuthenticationMethodApiGenerated
     */
    public deleteMethod(requestParameters: ConjurAuthenticationMethodApiDeleteMethodRequest, options?: AxiosRequestConfig) {
        return ConjurAuthenticationMethodApiFp(this.configuration).deleteMethod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Conjur Authentication Method
     * @param {ConjurAuthenticationMethodApiGetMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConjurAuthenticationMethodApiGenerated
     */
    public getMethod(requestParameters: ConjurAuthenticationMethodApiGetMethodRequest, options?: AxiosRequestConfig) {
        return ConjurAuthenticationMethodApiFp(this.configuration).getMethod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Conjur Authentication Method objects
     * @param {ConjurAuthenticationMethodApiListAllMethodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConjurAuthenticationMethodApiGenerated
     */
    public listAllMethods(requestParameters: ConjurAuthenticationMethodApiListAllMethodsRequest = {}, options?: AxiosRequestConfig) {
        return ConjurAuthenticationMethodApiFp(this.configuration).listAllMethods(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Conjur Authentication Method by name
     * @param {ConjurAuthenticationMethodApiUpdateByMethodNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConjurAuthenticationMethodApiGenerated
     */
    public updateByMethodName(requestParameters: ConjurAuthenticationMethodApiUpdateByMethodNameRequest, options?: AxiosRequestConfig) {
        return ConjurAuthenticationMethodApiFp(this.configuration).updateByMethodName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
