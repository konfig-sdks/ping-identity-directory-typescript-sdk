/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddLocalDbIndexRequest } from '../models';
// @ts-ignore
import { EnumlocalDbIndexCacheModeProp } from '../models';
// @ts-ignore
import { EnumlocalDbIndexIndexTypeProp } from '../models';
// @ts-ignore
import { EnumlocalDbIndexSchemaUrn } from '../models';
// @ts-ignore
import { LocalDbIndexListResponse } from '../models';
// @ts-ignore
import { LocalDbIndexResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LocalDbIndexApi - axios parameter creator
 * @export
 */
export const LocalDbIndexApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Local DB Index to the config
         * @param {string} backendName Name of the Backend
         * @param {AddLocalDbIndexRequest} addLocalDbIndexRequest Create a new Local DB Index in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewIndex: async (backendName: string, addLocalDbIndexRequest: AddLocalDbIndexRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backendName' is not null or undefined
            assertParamExists('addNewIndex', 'backendName', backendName)
            // verify required parameter 'addLocalDbIndexRequest' is not null or undefined
            assertParamExists('addNewIndex', 'addLocalDbIndexRequest', addLocalDbIndexRequest)
            const localVarPath = `/backends/{backend-name}/local-db-indexes`
                .replace(`{${"backend-name"}}`, encodeURIComponent(String(backendName !== undefined ? backendName : `-backend-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addLocalDbIndexRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends/{backend-name}/local-db-indexes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addLocalDbIndexRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Local DB Index
         * @param {string} localDbIndexName Name of the Local DB Index
         * @param {string} backendName Name of the Backend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIndex: async (localDbIndexName: string, backendName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'localDbIndexName' is not null or undefined
            assertParamExists('deleteIndex', 'localDbIndexName', localDbIndexName)
            // verify required parameter 'backendName' is not null or undefined
            assertParamExists('deleteIndex', 'backendName', backendName)
            const localVarPath = `/backends/{backend-name}/local-db-indexes/{local-db-index-name}`
                .replace(`{${"local-db-index-name"}}`, encodeURIComponent(String(localDbIndexName !== undefined ? localDbIndexName : `-local-db-index-name-`)))
                .replace(`{${"backend-name"}}`, encodeURIComponent(String(backendName !== undefined ? backendName : `-backend-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends/{backend-name}/local-db-indexes/{local-db-index-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Local DB Index objects
         * @param {string} backendName Name of the Backend
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIndexes: async (backendName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backendName' is not null or undefined
            assertParamExists('getAllIndexes', 'backendName', backendName)
            const localVarPath = `/backends/{backend-name}/local-db-indexes`
                .replace(`{${"backend-name"}}`, encodeURIComponent(String(backendName !== undefined ? backendName : `-backend-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends/{backend-name}/local-db-indexes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Local DB Index
         * @param {string} localDbIndexName Name of the Local DB Index
         * @param {string} backendName Name of the Backend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (localDbIndexName: string, backendName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'localDbIndexName' is not null or undefined
            assertParamExists('getSingle', 'localDbIndexName', localDbIndexName)
            // verify required parameter 'backendName' is not null or undefined
            assertParamExists('getSingle', 'backendName', backendName)
            const localVarPath = `/backends/{backend-name}/local-db-indexes/{local-db-index-name}`
                .replace(`{${"local-db-index-name"}}`, encodeURIComponent(String(localDbIndexName !== undefined ? localDbIndexName : `-local-db-index-name-`)))
                .replace(`{${"backend-name"}}`, encodeURIComponent(String(backendName !== undefined ? backendName : `-backend-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends/{backend-name}/local-db-indexes/{local-db-index-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Local DB Index by name
         * @param {string} localDbIndexName Name of the Local DB Index
         * @param {string} backendName Name of the Backend
         * @param {UpdateRequest} updateRequest Update an existing Local DB Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (localDbIndexName: string, backendName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'localDbIndexName' is not null or undefined
            assertParamExists('updateByName', 'localDbIndexName', localDbIndexName)
            // verify required parameter 'backendName' is not null or undefined
            assertParamExists('updateByName', 'backendName', backendName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/backends/{backend-name}/local-db-indexes/{local-db-index-name}`
                .replace(`{${"local-db-index-name"}}`, encodeURIComponent(String(localDbIndexName !== undefined ? localDbIndexName : `-local-db-index-name-`)))
                .replace(`{${"backend-name"}}`, encodeURIComponent(String(backendName !== undefined ? backendName : `-backend-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends/{backend-name}/local-db-indexes/{local-db-index-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocalDbIndexApi - functional programming interface
 * @export
 */
export const LocalDbIndexApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocalDbIndexApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Local DB Index to the config
         * @param {LocalDbIndexApiAddNewIndexRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewIndex(requestParameters: LocalDbIndexApiAddNewIndexRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalDbIndexResponse>> {
            const addLocalDbIndexRequest: AddLocalDbIndexRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewIndex(requestParameters.backendName, addLocalDbIndexRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Local DB Index
         * @param {LocalDbIndexApiDeleteIndexRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIndex(requestParameters: LocalDbIndexApiDeleteIndexRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIndex(requestParameters.localDbIndexName, requestParameters.backendName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Local DB Index objects
         * @param {LocalDbIndexApiGetAllIndexesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllIndexes(requestParameters: LocalDbIndexApiGetAllIndexesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalDbIndexListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllIndexes(requestParameters.backendName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Local DB Index
         * @param {LocalDbIndexApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: LocalDbIndexApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalDbIndexResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.localDbIndexName, requestParameters.backendName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Local DB Index by name
         * @param {LocalDbIndexApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: LocalDbIndexApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalDbIndexResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.localDbIndexName, requestParameters.backendName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocalDbIndexApi - factory interface
 * @export
 */
export const LocalDbIndexApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocalDbIndexApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Local DB Index to the config
         * @param {LocalDbIndexApiAddNewIndexRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewIndex(requestParameters: LocalDbIndexApiAddNewIndexRequest, options?: AxiosRequestConfig): AxiosPromise<LocalDbIndexResponse> {
            return localVarFp.addNewIndex(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Local DB Index
         * @param {LocalDbIndexApiDeleteIndexRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIndex(requestParameters: LocalDbIndexApiDeleteIndexRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteIndex(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Local DB Index objects
         * @param {LocalDbIndexApiGetAllIndexesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIndexes(requestParameters: LocalDbIndexApiGetAllIndexesRequest, options?: AxiosRequestConfig): AxiosPromise<LocalDbIndexListResponse> {
            return localVarFp.getAllIndexes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Local DB Index
         * @param {LocalDbIndexApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: LocalDbIndexApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<LocalDbIndexResponse> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Local DB Index by name
         * @param {LocalDbIndexApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: LocalDbIndexApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<LocalDbIndexResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewIndex operation in LocalDbIndexApi.
 * @export
 * @interface LocalDbIndexApiAddNewIndexRequest
 */
export type LocalDbIndexApiAddNewIndexRequest = {
    
    /**
    * Name of the Backend
    * @type {string}
    * @memberof LocalDbIndexApiAddNewIndex
    */
    readonly backendName: string
    
} & AddLocalDbIndexRequest

/**
 * Request parameters for deleteIndex operation in LocalDbIndexApi.
 * @export
 * @interface LocalDbIndexApiDeleteIndexRequest
 */
export type LocalDbIndexApiDeleteIndexRequest = {
    
    /**
    * Name of the Local DB Index
    * @type {string}
    * @memberof LocalDbIndexApiDeleteIndex
    */
    readonly localDbIndexName: string
    
    /**
    * Name of the Backend
    * @type {string}
    * @memberof LocalDbIndexApiDeleteIndex
    */
    readonly backendName: string
    
}

/**
 * Request parameters for getAllIndexes operation in LocalDbIndexApi.
 * @export
 * @interface LocalDbIndexApiGetAllIndexesRequest
 */
export type LocalDbIndexApiGetAllIndexesRequest = {
    
    /**
    * Name of the Backend
    * @type {string}
    * @memberof LocalDbIndexApiGetAllIndexes
    */
    readonly backendName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof LocalDbIndexApiGetAllIndexes
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingle operation in LocalDbIndexApi.
 * @export
 * @interface LocalDbIndexApiGetSingleRequest
 */
export type LocalDbIndexApiGetSingleRequest = {
    
    /**
    * Name of the Local DB Index
    * @type {string}
    * @memberof LocalDbIndexApiGetSingle
    */
    readonly localDbIndexName: string
    
    /**
    * Name of the Backend
    * @type {string}
    * @memberof LocalDbIndexApiGetSingle
    */
    readonly backendName: string
    
}

/**
 * Request parameters for updateByName operation in LocalDbIndexApi.
 * @export
 * @interface LocalDbIndexApiUpdateByNameRequest
 */
export type LocalDbIndexApiUpdateByNameRequest = {
    
    /**
    * Name of the Local DB Index
    * @type {string}
    * @memberof LocalDbIndexApiUpdateByName
    */
    readonly localDbIndexName: string
    
    /**
    * Name of the Backend
    * @type {string}
    * @memberof LocalDbIndexApiUpdateByName
    */
    readonly backendName: string
    
} & UpdateRequest

/**
 * LocalDbIndexApiGenerated - object-oriented interface
 * @export
 * @class LocalDbIndexApiGenerated
 * @extends {BaseAPI}
 */
export class LocalDbIndexApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Local DB Index to the config
     * @param {LocalDbIndexApiAddNewIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalDbIndexApiGenerated
     */
    public addNewIndex(requestParameters: LocalDbIndexApiAddNewIndexRequest, options?: AxiosRequestConfig) {
        return LocalDbIndexApiFp(this.configuration).addNewIndex(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Local DB Index
     * @param {LocalDbIndexApiDeleteIndexRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalDbIndexApiGenerated
     */
    public deleteIndex(requestParameters: LocalDbIndexApiDeleteIndexRequest, options?: AxiosRequestConfig) {
        return LocalDbIndexApiFp(this.configuration).deleteIndex(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Local DB Index objects
     * @param {LocalDbIndexApiGetAllIndexesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalDbIndexApiGenerated
     */
    public getAllIndexes(requestParameters: LocalDbIndexApiGetAllIndexesRequest, options?: AxiosRequestConfig) {
        return LocalDbIndexApiFp(this.configuration).getAllIndexes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Local DB Index
     * @param {LocalDbIndexApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalDbIndexApiGenerated
     */
    public getSingle(requestParameters: LocalDbIndexApiGetSingleRequest, options?: AxiosRequestConfig) {
        return LocalDbIndexApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Local DB Index by name
     * @param {LocalDbIndexApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalDbIndexApiGenerated
     */
    public updateByName(requestParameters: LocalDbIndexApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return LocalDbIndexApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
