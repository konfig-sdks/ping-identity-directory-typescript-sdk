/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDnMapRequest } from '../models';
// @ts-ignore
import { DnMapListResponse } from '../models';
// @ts-ignore
import { DnMapResponse } from '../models';
// @ts-ignore
import { EnumdnMapSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DnMapApi - axios parameter creator
 * @export
 */
export const DnMapApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new DN Map to the config
         * @param {AddDnMapRequest} addDnMapRequest Create a new DN Map in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDnMap: async (addDnMapRequest: AddDnMapRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addDnMapRequest' is not null or undefined
            assertParamExists('createNewDnMap', 'addDnMapRequest', addDnMapRequest)
            const localVarPath = `/dn-maps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addDnMapRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dn-maps',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addDnMapRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a DN Map
         * @param {string} dnMapName Name of the DN Map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDnMap: async (dnMapName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dnMapName' is not null or undefined
            assertParamExists('deleteDnMap', 'dnMapName', dnMapName)
            const localVarPath = `/dn-maps/{dn-map-name}`
                .replace(`{${"dn-map-name"}}`, encodeURIComponent(String(dnMapName !== undefined ? dnMapName : `-dn-map-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dn-maps/{dn-map-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single DN Map
         * @param {string} dnMapName Name of the DN Map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleDnMap: async (dnMapName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dnMapName' is not null or undefined
            assertParamExists('getSingleDnMap', 'dnMapName', dnMapName)
            const localVarPath = `/dn-maps/{dn-map-name}`
                .replace(`{${"dn-map-name"}}`, encodeURIComponent(String(dnMapName !== undefined ? dnMapName : `-dn-map-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dn-maps/{dn-map-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all DN Map objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dn-maps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dn-maps',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing DN Map by name
         * @param {string} dnMapName Name of the DN Map
         * @param {UpdateRequest} updateRequest Update an existing DN Map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDnMapByName: async (dnMapName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dnMapName' is not null or undefined
            assertParamExists('updateDnMapByName', 'dnMapName', dnMapName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateDnMapByName', 'updateRequest', updateRequest)
            const localVarPath = `/dn-maps/{dn-map-name}`
                .replace(`{${"dn-map-name"}}`, encodeURIComponent(String(dnMapName !== undefined ? dnMapName : `-dn-map-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dn-maps/{dn-map-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DnMapApi - functional programming interface
 * @export
 */
export const DnMapApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DnMapApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new DN Map to the config
         * @param {DnMapApiCreateNewDnMapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewDnMap(requestParameters: DnMapApiCreateNewDnMapRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DnMapResponse>> {
            const addDnMapRequest: AddDnMapRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewDnMap(addDnMapRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a DN Map
         * @param {DnMapApiDeleteDnMapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDnMap(requestParameters: DnMapApiDeleteDnMapRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDnMap(requestParameters.dnMapName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single DN Map
         * @param {DnMapApiGetSingleDnMapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleDnMap(requestParameters: DnMapApiGetSingleDnMapRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DnMapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleDnMap(requestParameters.dnMapName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all DN Map objects
         * @param {DnMapApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listObjects(requestParameters: DnMapApiListObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DnMapListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing DN Map by name
         * @param {DnMapApiUpdateDnMapByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDnMapByName(requestParameters: DnMapApiUpdateDnMapByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DnMapResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDnMapByName(requestParameters.dnMapName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DnMapApi - factory interface
 * @export
 */
export const DnMapApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DnMapApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new DN Map to the config
         * @param {DnMapApiCreateNewDnMapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDnMap(requestParameters: DnMapApiCreateNewDnMapRequest, options?: AxiosRequestConfig): AxiosPromise<DnMapResponse> {
            return localVarFp.createNewDnMap(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a DN Map
         * @param {DnMapApiDeleteDnMapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDnMap(requestParameters: DnMapApiDeleteDnMapRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDnMap(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single DN Map
         * @param {DnMapApiGetSingleDnMapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleDnMap(requestParameters: DnMapApiGetSingleDnMapRequest, options?: AxiosRequestConfig): AxiosPromise<DnMapResponse> {
            return localVarFp.getSingleDnMap(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all DN Map objects
         * @param {DnMapApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects(requestParameters: DnMapApiListObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DnMapListResponse> {
            return localVarFp.listObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing DN Map by name
         * @param {DnMapApiUpdateDnMapByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDnMapByName(requestParameters: DnMapApiUpdateDnMapByNameRequest, options?: AxiosRequestConfig): AxiosPromise<DnMapResponse> {
            return localVarFp.updateDnMapByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewDnMap operation in DnMapApi.
 * @export
 * @interface DnMapApiCreateNewDnMapRequest
 */
export type DnMapApiCreateNewDnMapRequest = {
    
} & AddDnMapRequest

/**
 * Request parameters for deleteDnMap operation in DnMapApi.
 * @export
 * @interface DnMapApiDeleteDnMapRequest
 */
export type DnMapApiDeleteDnMapRequest = {
    
    /**
    * Name of the DN Map
    * @type {string}
    * @memberof DnMapApiDeleteDnMap
    */
    readonly dnMapName: string
    
}

/**
 * Request parameters for getSingleDnMap operation in DnMapApi.
 * @export
 * @interface DnMapApiGetSingleDnMapRequest
 */
export type DnMapApiGetSingleDnMapRequest = {
    
    /**
    * Name of the DN Map
    * @type {string}
    * @memberof DnMapApiGetSingleDnMap
    */
    readonly dnMapName: string
    
}

/**
 * Request parameters for listObjects operation in DnMapApi.
 * @export
 * @interface DnMapApiListObjectsRequest
 */
export type DnMapApiListObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof DnMapApiListObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateDnMapByName operation in DnMapApi.
 * @export
 * @interface DnMapApiUpdateDnMapByNameRequest
 */
export type DnMapApiUpdateDnMapByNameRequest = {
    
    /**
    * Name of the DN Map
    * @type {string}
    * @memberof DnMapApiUpdateDnMapByName
    */
    readonly dnMapName: string
    
} & UpdateRequest

/**
 * DnMapApiGenerated - object-oriented interface
 * @export
 * @class DnMapApiGenerated
 * @extends {BaseAPI}
 */
export class DnMapApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new DN Map to the config
     * @param {DnMapApiCreateNewDnMapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DnMapApiGenerated
     */
    public createNewDnMap(requestParameters: DnMapApiCreateNewDnMapRequest, options?: AxiosRequestConfig) {
        return DnMapApiFp(this.configuration).createNewDnMap(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a DN Map
     * @param {DnMapApiDeleteDnMapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DnMapApiGenerated
     */
    public deleteDnMap(requestParameters: DnMapApiDeleteDnMapRequest, options?: AxiosRequestConfig) {
        return DnMapApiFp(this.configuration).deleteDnMap(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single DN Map
     * @param {DnMapApiGetSingleDnMapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DnMapApiGenerated
     */
    public getSingleDnMap(requestParameters: DnMapApiGetSingleDnMapRequest, options?: AxiosRequestConfig) {
        return DnMapApiFp(this.configuration).getSingleDnMap(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all DN Map objects
     * @param {DnMapApiListObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DnMapApiGenerated
     */
    public listObjects(requestParameters: DnMapApiListObjectsRequest = {}, options?: AxiosRequestConfig) {
        return DnMapApiFp(this.configuration).listObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing DN Map by name
     * @param {DnMapApiUpdateDnMapByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DnMapApiGenerated
     */
    public updateDnMapByName(requestParameters: DnMapApiUpdateDnMapByNameRequest, options?: AxiosRequestConfig) {
        return DnMapApiFp(this.configuration).updateDnMapByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
