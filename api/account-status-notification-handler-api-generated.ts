/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountStatusNotificationHandlerListResponse } from '../models';
// @ts-ignore
import { AddAccountStatusNotificationHandler200Response } from '../models';
// @ts-ignore
import { AddAccountStatusNotificationHandlerRequest } from '../models';
// @ts-ignore
import { EnumaccountStatusNotificationHandlerAccountStatusNotificationTypeProp } from '../models';
// @ts-ignore
import { EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountStatusNotificationHandlerApi - axios parameter creator
 * @export
 */
export const AccountStatusNotificationHandlerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Account Status Notification Handler to the config
         * @param {AddAccountStatusNotificationHandlerRequest} addAccountStatusNotificationHandlerRequest Create a new Account Status Notification Handler in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewHandler: async (addAccountStatusNotificationHandlerRequest: AddAccountStatusNotificationHandlerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addAccountStatusNotificationHandlerRequest' is not null or undefined
            assertParamExists('addNewHandler', 'addAccountStatusNotificationHandlerRequest', addAccountStatusNotificationHandlerRequest)
            const localVarPath = `/account-status-notification-handlers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addAccountStatusNotificationHandlerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account-status-notification-handlers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addAccountStatusNotificationHandlerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Account Status Notification Handler
         * @param {string} accountStatusNotificationHandlerName Name of the Account Status Notification Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHandler: async (accountStatusNotificationHandlerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountStatusNotificationHandlerName' is not null or undefined
            assertParamExists('deleteHandler', 'accountStatusNotificationHandlerName', accountStatusNotificationHandlerName)
            const localVarPath = `/account-status-notification-handlers/{account-status-notification-handler-name}`
                .replace(`{${"account-status-notification-handler-name"}}`, encodeURIComponent(String(accountStatusNotificationHandlerName !== undefined ? accountStatusNotificationHandlerName : `-account-status-notification-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account-status-notification-handlers/{account-status-notification-handler-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Account Status Notification Handler
         * @param {string} accountStatusNotificationHandlerName Name of the Account Status Notification Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (accountStatusNotificationHandlerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountStatusNotificationHandlerName' is not null or undefined
            assertParamExists('getSingle', 'accountStatusNotificationHandlerName', accountStatusNotificationHandlerName)
            const localVarPath = `/account-status-notification-handlers/{account-status-notification-handler-name}`
                .replace(`{${"account-status-notification-handler-name"}}`, encodeURIComponent(String(accountStatusNotificationHandlerName !== undefined ? accountStatusNotificationHandlerName : `-account-status-notification-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account-status-notification-handlers/{account-status-notification-handler-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Account Status Notification Handler objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account-status-notification-handlers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account-status-notification-handlers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Account Status Notification Handler by name
         * @param {string} accountStatusNotificationHandlerName Name of the Account Status Notification Handler
         * @param {UpdateRequest} updateRequest Update an existing Account Status Notification Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByHandlerName: async (accountStatusNotificationHandlerName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountStatusNotificationHandlerName' is not null or undefined
            assertParamExists('updateByHandlerName', 'accountStatusNotificationHandlerName', accountStatusNotificationHandlerName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByHandlerName', 'updateRequest', updateRequest)
            const localVarPath = `/account-status-notification-handlers/{account-status-notification-handler-name}`
                .replace(`{${"account-status-notification-handler-name"}}`, encodeURIComponent(String(accountStatusNotificationHandlerName !== undefined ? accountStatusNotificationHandlerName : `-account-status-notification-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account-status-notification-handlers/{account-status-notification-handler-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountStatusNotificationHandlerApi - functional programming interface
 * @export
 */
export const AccountStatusNotificationHandlerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountStatusNotificationHandlerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Account Status Notification Handler to the config
         * @param {AccountStatusNotificationHandlerApiAddNewHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewHandler(requestParameters: AccountStatusNotificationHandlerApiAddNewHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddAccountStatusNotificationHandler200Response>> {
            const addAccountStatusNotificationHandlerRequest: AddAccountStatusNotificationHandlerRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewHandler(addAccountStatusNotificationHandlerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Account Status Notification Handler
         * @param {AccountStatusNotificationHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHandler(requestParameters: AccountStatusNotificationHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHandler(requestParameters.accountStatusNotificationHandlerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Account Status Notification Handler
         * @param {AccountStatusNotificationHandlerApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: AccountStatusNotificationHandlerApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddAccountStatusNotificationHandler200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.accountStatusNotificationHandlerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Account Status Notification Handler objects
         * @param {AccountStatusNotificationHandlerApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listObjects(requestParameters: AccountStatusNotificationHandlerApiListObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountStatusNotificationHandlerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Account Status Notification Handler by name
         * @param {AccountStatusNotificationHandlerApiUpdateByHandlerNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByHandlerName(requestParameters: AccountStatusNotificationHandlerApiUpdateByHandlerNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddAccountStatusNotificationHandler200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByHandlerName(requestParameters.accountStatusNotificationHandlerName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountStatusNotificationHandlerApi - factory interface
 * @export
 */
export const AccountStatusNotificationHandlerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountStatusNotificationHandlerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Account Status Notification Handler to the config
         * @param {AccountStatusNotificationHandlerApiAddNewHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewHandler(requestParameters: AccountStatusNotificationHandlerApiAddNewHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<AddAccountStatusNotificationHandler200Response> {
            return localVarFp.addNewHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Account Status Notification Handler
         * @param {AccountStatusNotificationHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHandler(requestParameters: AccountStatusNotificationHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Account Status Notification Handler
         * @param {AccountStatusNotificationHandlerApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: AccountStatusNotificationHandlerApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddAccountStatusNotificationHandler200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Account Status Notification Handler objects
         * @param {AccountStatusNotificationHandlerApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects(requestParameters: AccountStatusNotificationHandlerApiListObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccountStatusNotificationHandlerListResponse> {
            return localVarFp.listObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Account Status Notification Handler by name
         * @param {AccountStatusNotificationHandlerApiUpdateByHandlerNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByHandlerName(requestParameters: AccountStatusNotificationHandlerApiUpdateByHandlerNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddAccountStatusNotificationHandler200Response> {
            return localVarFp.updateByHandlerName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewHandler operation in AccountStatusNotificationHandlerApi.
 * @export
 * @interface AccountStatusNotificationHandlerApiAddNewHandlerRequest
 */
export type AccountStatusNotificationHandlerApiAddNewHandlerRequest = {
    
} & AddAccountStatusNotificationHandlerRequest

/**
 * Request parameters for deleteHandler operation in AccountStatusNotificationHandlerApi.
 * @export
 * @interface AccountStatusNotificationHandlerApiDeleteHandlerRequest
 */
export type AccountStatusNotificationHandlerApiDeleteHandlerRequest = {
    
    /**
    * Name of the Account Status Notification Handler
    * @type {string}
    * @memberof AccountStatusNotificationHandlerApiDeleteHandler
    */
    readonly accountStatusNotificationHandlerName: string
    
}

/**
 * Request parameters for getSingle operation in AccountStatusNotificationHandlerApi.
 * @export
 * @interface AccountStatusNotificationHandlerApiGetSingleRequest
 */
export type AccountStatusNotificationHandlerApiGetSingleRequest = {
    
    /**
    * Name of the Account Status Notification Handler
    * @type {string}
    * @memberof AccountStatusNotificationHandlerApiGetSingle
    */
    readonly accountStatusNotificationHandlerName: string
    
}

/**
 * Request parameters for listObjects operation in AccountStatusNotificationHandlerApi.
 * @export
 * @interface AccountStatusNotificationHandlerApiListObjectsRequest
 */
export type AccountStatusNotificationHandlerApiListObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof AccountStatusNotificationHandlerApiListObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByHandlerName operation in AccountStatusNotificationHandlerApi.
 * @export
 * @interface AccountStatusNotificationHandlerApiUpdateByHandlerNameRequest
 */
export type AccountStatusNotificationHandlerApiUpdateByHandlerNameRequest = {
    
    /**
    * Name of the Account Status Notification Handler
    * @type {string}
    * @memberof AccountStatusNotificationHandlerApiUpdateByHandlerName
    */
    readonly accountStatusNotificationHandlerName: string
    
} & UpdateRequest

/**
 * AccountStatusNotificationHandlerApiGenerated - object-oriented interface
 * @export
 * @class AccountStatusNotificationHandlerApiGenerated
 * @extends {BaseAPI}
 */
export class AccountStatusNotificationHandlerApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Account Status Notification Handler to the config
     * @param {AccountStatusNotificationHandlerApiAddNewHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountStatusNotificationHandlerApiGenerated
     */
    public addNewHandler(requestParameters: AccountStatusNotificationHandlerApiAddNewHandlerRequest, options?: AxiosRequestConfig) {
        return AccountStatusNotificationHandlerApiFp(this.configuration).addNewHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Account Status Notification Handler
     * @param {AccountStatusNotificationHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountStatusNotificationHandlerApiGenerated
     */
    public deleteHandler(requestParameters: AccountStatusNotificationHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig) {
        return AccountStatusNotificationHandlerApiFp(this.configuration).deleteHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Account Status Notification Handler
     * @param {AccountStatusNotificationHandlerApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountStatusNotificationHandlerApiGenerated
     */
    public getSingle(requestParameters: AccountStatusNotificationHandlerApiGetSingleRequest, options?: AxiosRequestConfig) {
        return AccountStatusNotificationHandlerApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Account Status Notification Handler objects
     * @param {AccountStatusNotificationHandlerApiListObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountStatusNotificationHandlerApiGenerated
     */
    public listObjects(requestParameters: AccountStatusNotificationHandlerApiListObjectsRequest = {}, options?: AxiosRequestConfig) {
        return AccountStatusNotificationHandlerApiFp(this.configuration).listObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Account Status Notification Handler by name
     * @param {AccountStatusNotificationHandlerApiUpdateByHandlerNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountStatusNotificationHandlerApiGenerated
     */
    public updateByHandlerName(requestParameters: AccountStatusNotificationHandlerApiUpdateByHandlerNameRequest, options?: AxiosRequestConfig) {
        return AccountStatusNotificationHandlerApiFp(this.configuration).updateByHandlerName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
