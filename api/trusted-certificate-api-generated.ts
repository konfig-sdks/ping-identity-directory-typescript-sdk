/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddTrustedCertificateRequest } from '../models';
// @ts-ignore
import { EnumtrustedCertificateSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { TrustedCertificateListResponse } from '../models';
// @ts-ignore
import { TrustedCertificateResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TrustedCertificateApi - axios parameter creator
 * @export
 */
export const TrustedCertificateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Trusted Certificate to the config
         * @param {AddTrustedCertificateRequest} addTrustedCertificateRequest Create a new Trusted Certificate in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig: async (addTrustedCertificateRequest: AddTrustedCertificateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addTrustedCertificateRequest' is not null or undefined
            assertParamExists('addNewToConfig', 'addTrustedCertificateRequest', addTrustedCertificateRequest)
            const localVarPath = `/trusted-certificates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addTrustedCertificateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/trusted-certificates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addTrustedCertificateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Trusted Certificate
         * @param {string} trustedCertificateName Name of the Trusted Certificate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCertificate: async (trustedCertificateName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trustedCertificateName' is not null or undefined
            assertParamExists('deleteCertificate', 'trustedCertificateName', trustedCertificateName)
            const localVarPath = `/trusted-certificates/{trusted-certificate-name}`
                .replace(`{${"trusted-certificate-name"}}`, encodeURIComponent(String(trustedCertificateName !== undefined ? trustedCertificateName : `-trusted-certificate-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/trusted-certificates/{trusted-certificate-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Trusted Certificate
         * @param {string} trustedCertificateName Name of the Trusted Certificate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (trustedCertificateName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trustedCertificateName' is not null or undefined
            assertParamExists('getSingle', 'trustedCertificateName', trustedCertificateName)
            const localVarPath = `/trusted-certificates/{trusted-certificate-name}`
                .replace(`{${"trusted-certificate-name"}}`, encodeURIComponent(String(trustedCertificateName !== undefined ? trustedCertificateName : `-trusted-certificate-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/trusted-certificates/{trusted-certificate-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Trusted Certificate objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCertificates: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/trusted-certificates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/trusted-certificates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Trusted Certificate by name
         * @param {string} trustedCertificateName Name of the Trusted Certificate
         * @param {UpdateRequest} updateRequest Update an existing Trusted Certificate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (trustedCertificateName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trustedCertificateName' is not null or undefined
            assertParamExists('updateByName', 'trustedCertificateName', trustedCertificateName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/trusted-certificates/{trusted-certificate-name}`
                .replace(`{${"trusted-certificate-name"}}`, encodeURIComponent(String(trustedCertificateName !== undefined ? trustedCertificateName : `-trusted-certificate-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/trusted-certificates/{trusted-certificate-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrustedCertificateApi - functional programming interface
 * @export
 */
export const TrustedCertificateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrustedCertificateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Trusted Certificate to the config
         * @param {TrustedCertificateApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewToConfig(requestParameters: TrustedCertificateApiAddNewToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrustedCertificateResponse>> {
            const addTrustedCertificateRequest: AddTrustedCertificateRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewToConfig(addTrustedCertificateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Trusted Certificate
         * @param {TrustedCertificateApiDeleteCertificateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCertificate(requestParameters: TrustedCertificateApiDeleteCertificateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCertificate(requestParameters.trustedCertificateName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Trusted Certificate
         * @param {TrustedCertificateApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: TrustedCertificateApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrustedCertificateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.trustedCertificateName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Trusted Certificate objects
         * @param {TrustedCertificateApiListAllCertificatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllCertificates(requestParameters: TrustedCertificateApiListAllCertificatesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrustedCertificateListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllCertificates(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Trusted Certificate by name
         * @param {TrustedCertificateApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: TrustedCertificateApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrustedCertificateResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.trustedCertificateName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrustedCertificateApi - factory interface
 * @export
 */
export const TrustedCertificateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrustedCertificateApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Trusted Certificate to the config
         * @param {TrustedCertificateApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig(requestParameters: TrustedCertificateApiAddNewToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<TrustedCertificateResponse> {
            return localVarFp.addNewToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Trusted Certificate
         * @param {TrustedCertificateApiDeleteCertificateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCertificate(requestParameters: TrustedCertificateApiDeleteCertificateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCertificate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Trusted Certificate
         * @param {TrustedCertificateApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: TrustedCertificateApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<TrustedCertificateResponse> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Trusted Certificate objects
         * @param {TrustedCertificateApiListAllCertificatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCertificates(requestParameters: TrustedCertificateApiListAllCertificatesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TrustedCertificateListResponse> {
            return localVarFp.listAllCertificates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Trusted Certificate by name
         * @param {TrustedCertificateApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: TrustedCertificateApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<TrustedCertificateResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewToConfig operation in TrustedCertificateApi.
 * @export
 * @interface TrustedCertificateApiAddNewToConfigRequest
 */
export type TrustedCertificateApiAddNewToConfigRequest = {
    
} & AddTrustedCertificateRequest

/**
 * Request parameters for deleteCertificate operation in TrustedCertificateApi.
 * @export
 * @interface TrustedCertificateApiDeleteCertificateRequest
 */
export type TrustedCertificateApiDeleteCertificateRequest = {
    
    /**
    * Name of the Trusted Certificate
    * @type {string}
    * @memberof TrustedCertificateApiDeleteCertificate
    */
    readonly trustedCertificateName: string
    
}

/**
 * Request parameters for getSingle operation in TrustedCertificateApi.
 * @export
 * @interface TrustedCertificateApiGetSingleRequest
 */
export type TrustedCertificateApiGetSingleRequest = {
    
    /**
    * Name of the Trusted Certificate
    * @type {string}
    * @memberof TrustedCertificateApiGetSingle
    */
    readonly trustedCertificateName: string
    
}

/**
 * Request parameters for listAllCertificates operation in TrustedCertificateApi.
 * @export
 * @interface TrustedCertificateApiListAllCertificatesRequest
 */
export type TrustedCertificateApiListAllCertificatesRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof TrustedCertificateApiListAllCertificates
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in TrustedCertificateApi.
 * @export
 * @interface TrustedCertificateApiUpdateByNameRequest
 */
export type TrustedCertificateApiUpdateByNameRequest = {
    
    /**
    * Name of the Trusted Certificate
    * @type {string}
    * @memberof TrustedCertificateApiUpdateByName
    */
    readonly trustedCertificateName: string
    
} & UpdateRequest

/**
 * TrustedCertificateApiGenerated - object-oriented interface
 * @export
 * @class TrustedCertificateApiGenerated
 * @extends {BaseAPI}
 */
export class TrustedCertificateApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Trusted Certificate to the config
     * @param {TrustedCertificateApiAddNewToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrustedCertificateApiGenerated
     */
    public addNewToConfig(requestParameters: TrustedCertificateApiAddNewToConfigRequest, options?: AxiosRequestConfig) {
        return TrustedCertificateApiFp(this.configuration).addNewToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Trusted Certificate
     * @param {TrustedCertificateApiDeleteCertificateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrustedCertificateApiGenerated
     */
    public deleteCertificate(requestParameters: TrustedCertificateApiDeleteCertificateRequest, options?: AxiosRequestConfig) {
        return TrustedCertificateApiFp(this.configuration).deleteCertificate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Trusted Certificate
     * @param {TrustedCertificateApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrustedCertificateApiGenerated
     */
    public getSingle(requestParameters: TrustedCertificateApiGetSingleRequest, options?: AxiosRequestConfig) {
        return TrustedCertificateApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Trusted Certificate objects
     * @param {TrustedCertificateApiListAllCertificatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrustedCertificateApiGenerated
     */
    public listAllCertificates(requestParameters: TrustedCertificateApiListAllCertificatesRequest = {}, options?: AxiosRequestConfig) {
        return TrustedCertificateApiFp(this.configuration).listAllCertificates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Trusted Certificate by name
     * @param {TrustedCertificateApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrustedCertificateApiGenerated
     */
    public updateByName(requestParameters: TrustedCertificateApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return TrustedCertificateApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
