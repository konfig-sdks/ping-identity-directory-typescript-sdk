/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDataSecurityAuditor200Response } from '../models';
// @ts-ignore
import { AddDataSecurityAuditorRequest } from '../models';
// @ts-ignore
import { DataSecurityAuditorListResponse } from '../models';
// @ts-ignore
import { EnumdataSecurityAuditorAuditSeverityProp } from '../models';
// @ts-ignore
import { EnumdataSecurityAuditorIncludePrivilegeProp } from '../models';
// @ts-ignore
import { EnumdataSecurityAuditorWeakCryptEncodingProp } from '../models';
// @ts-ignore
import { EnumthirdPartyDataSecurityAuditorSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DataSecurityAuditorApi - axios parameter creator
 * @export
 */
export const DataSecurityAuditorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Data Security Auditor to the config
         * @param {AddDataSecurityAuditorRequest} addDataSecurityAuditorRequest Create a new Data Security Auditor in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewAuditor: async (addDataSecurityAuditorRequest: AddDataSecurityAuditorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addDataSecurityAuditorRequest' is not null or undefined
            assertParamExists('addNewAuditor', 'addDataSecurityAuditorRequest', addDataSecurityAuditorRequest)
            const localVarPath = `/data-security-auditors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addDataSecurityAuditorRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-security-auditors',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addDataSecurityAuditorRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Data Security Auditor
         * @param {string} dataSecurityAuditorName Name of the Data Security Auditor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuditor: async (dataSecurityAuditorName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSecurityAuditorName' is not null or undefined
            assertParamExists('deleteAuditor', 'dataSecurityAuditorName', dataSecurityAuditorName)
            const localVarPath = `/data-security-auditors/{data-security-auditor-name}`
                .replace(`{${"data-security-auditor-name"}}`, encodeURIComponent(String(dataSecurityAuditorName !== undefined ? dataSecurityAuditorName : `-data-security-auditor-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-security-auditors/{data-security-auditor-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Data Security Auditor
         * @param {string} dataSecurityAuditorName Name of the Data Security Auditor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleAuditor: async (dataSecurityAuditorName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSecurityAuditorName' is not null or undefined
            assertParamExists('getSingleAuditor', 'dataSecurityAuditorName', dataSecurityAuditorName)
            const localVarPath = `/data-security-auditors/{data-security-auditor-name}`
                .replace(`{${"data-security-auditor-name"}}`, encodeURIComponent(String(dataSecurityAuditorName !== undefined ? dataSecurityAuditorName : `-data-security-auditor-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-security-auditors/{data-security-auditor-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Data Security Auditor objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllAuditors: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data-security-auditors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-security-auditors',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Data Security Auditor by name
         * @param {string} dataSecurityAuditorName Name of the Data Security Auditor
         * @param {UpdateRequest} updateRequest Update an existing Data Security Auditor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (dataSecurityAuditorName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSecurityAuditorName' is not null or undefined
            assertParamExists('updateByName', 'dataSecurityAuditorName', dataSecurityAuditorName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/data-security-auditors/{data-security-auditor-name}`
                .replace(`{${"data-security-auditor-name"}}`, encodeURIComponent(String(dataSecurityAuditorName !== undefined ? dataSecurityAuditorName : `-data-security-auditor-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-security-auditors/{data-security-auditor-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataSecurityAuditorApi - functional programming interface
 * @export
 */
export const DataSecurityAuditorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataSecurityAuditorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Data Security Auditor to the config
         * @param {DataSecurityAuditorApiAddNewAuditorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewAuditor(requestParameters: DataSecurityAuditorApiAddNewAuditorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddDataSecurityAuditor200Response>> {
            const addDataSecurityAuditorRequest: AddDataSecurityAuditorRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewAuditor(addDataSecurityAuditorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Data Security Auditor
         * @param {DataSecurityAuditorApiDeleteAuditorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuditor(requestParameters: DataSecurityAuditorApiDeleteAuditorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAuditor(requestParameters.dataSecurityAuditorName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Data Security Auditor
         * @param {DataSecurityAuditorApiGetSingleAuditorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleAuditor(requestParameters: DataSecurityAuditorApiGetSingleAuditorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddDataSecurityAuditor200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleAuditor(requestParameters.dataSecurityAuditorName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Data Security Auditor objects
         * @param {DataSecurityAuditorApiListAllAuditorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllAuditors(requestParameters: DataSecurityAuditorApiListAllAuditorsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSecurityAuditorListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllAuditors(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Data Security Auditor by name
         * @param {DataSecurityAuditorApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: DataSecurityAuditorApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddDataSecurityAuditor200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.dataSecurityAuditorName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataSecurityAuditorApi - factory interface
 * @export
 */
export const DataSecurityAuditorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataSecurityAuditorApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Data Security Auditor to the config
         * @param {DataSecurityAuditorApiAddNewAuditorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewAuditor(requestParameters: DataSecurityAuditorApiAddNewAuditorRequest, options?: AxiosRequestConfig): AxiosPromise<AddDataSecurityAuditor200Response> {
            return localVarFp.addNewAuditor(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Data Security Auditor
         * @param {DataSecurityAuditorApiDeleteAuditorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuditor(requestParameters: DataSecurityAuditorApiDeleteAuditorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAuditor(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Data Security Auditor
         * @param {DataSecurityAuditorApiGetSingleAuditorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleAuditor(requestParameters: DataSecurityAuditorApiGetSingleAuditorRequest, options?: AxiosRequestConfig): AxiosPromise<AddDataSecurityAuditor200Response> {
            return localVarFp.getSingleAuditor(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Data Security Auditor objects
         * @param {DataSecurityAuditorApiListAllAuditorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllAuditors(requestParameters: DataSecurityAuditorApiListAllAuditorsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DataSecurityAuditorListResponse> {
            return localVarFp.listAllAuditors(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Data Security Auditor by name
         * @param {DataSecurityAuditorApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: DataSecurityAuditorApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddDataSecurityAuditor200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewAuditor operation in DataSecurityAuditorApi.
 * @export
 * @interface DataSecurityAuditorApiAddNewAuditorRequest
 */
export type DataSecurityAuditorApiAddNewAuditorRequest = {
    
} & AddDataSecurityAuditorRequest

/**
 * Request parameters for deleteAuditor operation in DataSecurityAuditorApi.
 * @export
 * @interface DataSecurityAuditorApiDeleteAuditorRequest
 */
export type DataSecurityAuditorApiDeleteAuditorRequest = {
    
    /**
    * Name of the Data Security Auditor
    * @type {string}
    * @memberof DataSecurityAuditorApiDeleteAuditor
    */
    readonly dataSecurityAuditorName: string
    
}

/**
 * Request parameters for getSingleAuditor operation in DataSecurityAuditorApi.
 * @export
 * @interface DataSecurityAuditorApiGetSingleAuditorRequest
 */
export type DataSecurityAuditorApiGetSingleAuditorRequest = {
    
    /**
    * Name of the Data Security Auditor
    * @type {string}
    * @memberof DataSecurityAuditorApiGetSingleAuditor
    */
    readonly dataSecurityAuditorName: string
    
}

/**
 * Request parameters for listAllAuditors operation in DataSecurityAuditorApi.
 * @export
 * @interface DataSecurityAuditorApiListAllAuditorsRequest
 */
export type DataSecurityAuditorApiListAllAuditorsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof DataSecurityAuditorApiListAllAuditors
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in DataSecurityAuditorApi.
 * @export
 * @interface DataSecurityAuditorApiUpdateByNameRequest
 */
export type DataSecurityAuditorApiUpdateByNameRequest = {
    
    /**
    * Name of the Data Security Auditor
    * @type {string}
    * @memberof DataSecurityAuditorApiUpdateByName
    */
    readonly dataSecurityAuditorName: string
    
} & UpdateRequest

/**
 * DataSecurityAuditorApiGenerated - object-oriented interface
 * @export
 * @class DataSecurityAuditorApiGenerated
 * @extends {BaseAPI}
 */
export class DataSecurityAuditorApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Data Security Auditor to the config
     * @param {DataSecurityAuditorApiAddNewAuditorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSecurityAuditorApiGenerated
     */
    public addNewAuditor(requestParameters: DataSecurityAuditorApiAddNewAuditorRequest, options?: AxiosRequestConfig) {
        return DataSecurityAuditorApiFp(this.configuration).addNewAuditor(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Data Security Auditor
     * @param {DataSecurityAuditorApiDeleteAuditorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSecurityAuditorApiGenerated
     */
    public deleteAuditor(requestParameters: DataSecurityAuditorApiDeleteAuditorRequest, options?: AxiosRequestConfig) {
        return DataSecurityAuditorApiFp(this.configuration).deleteAuditor(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Data Security Auditor
     * @param {DataSecurityAuditorApiGetSingleAuditorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSecurityAuditorApiGenerated
     */
    public getSingleAuditor(requestParameters: DataSecurityAuditorApiGetSingleAuditorRequest, options?: AxiosRequestConfig) {
        return DataSecurityAuditorApiFp(this.configuration).getSingleAuditor(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Data Security Auditor objects
     * @param {DataSecurityAuditorApiListAllAuditorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSecurityAuditorApiGenerated
     */
    public listAllAuditors(requestParameters: DataSecurityAuditorApiListAllAuditorsRequest = {}, options?: AxiosRequestConfig) {
        return DataSecurityAuditorApiFp(this.configuration).listAllAuditors(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Data Security Auditor by name
     * @param {DataSecurityAuditorApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSecurityAuditorApiGenerated
     */
    public updateByName(requestParameters: DataSecurityAuditorApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return DataSecurityAuditorApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
