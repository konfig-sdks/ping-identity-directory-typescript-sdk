/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddKeyPairRequest } from '../models';
// @ts-ignore
import { EnumkeyPairKeyAlgorithmProp } from '../models';
// @ts-ignore
import { EnumkeyPairSchemaUrn } from '../models';
// @ts-ignore
import { KeyPairListResponse } from '../models';
// @ts-ignore
import { KeyPairResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * KeyPairApi - axios parameter creator
 * @export
 */
export const KeyPairApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Key Pair to the config
         * @param {AddKeyPairRequest} addKeyPairRequest Create a new Key Pair in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewKeyPair: async (addKeyPairRequest: AddKeyPairRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addKeyPairRequest' is not null or undefined
            assertParamExists('createNewKeyPair', 'addKeyPairRequest', addKeyPairRequest)
            const localVarPath = `/key-pairs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addKeyPairRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/key-pairs',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addKeyPairRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Key Pair
         * @param {string} keyPairName Name of the Key Pair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKeyPair: async (keyPairName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyPairName' is not null or undefined
            assertParamExists('deleteKeyPair', 'keyPairName', keyPairName)
            const localVarPath = `/key-pairs/{key-pair-name}`
                .replace(`{${"key-pair-name"}}`, encodeURIComponent(String(keyPairName !== undefined ? keyPairName : `-key-pair-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/key-pairs/{key-pair-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Key Pair
         * @param {string} keyPairName Name of the Key Pair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleKeyPair: async (keyPairName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyPairName' is not null or undefined
            assertParamExists('getSingleKeyPair', 'keyPairName', keyPairName)
            const localVarPath = `/key-pairs/{key-pair-name}`
                .replace(`{${"key-pair-name"}}`, encodeURIComponent(String(keyPairName !== undefined ? keyPairName : `-key-pair-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/key-pairs/{key-pair-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Key Pair objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/key-pairs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/key-pairs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Key Pair by name
         * @param {string} keyPairName Name of the Key Pair
         * @param {UpdateRequest} updateRequest Update an existing Key Pair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (keyPairName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyPairName' is not null or undefined
            assertParamExists('updateByName', 'keyPairName', keyPairName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/key-pairs/{key-pair-name}`
                .replace(`{${"key-pair-name"}}`, encodeURIComponent(String(keyPairName !== undefined ? keyPairName : `-key-pair-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/key-pairs/{key-pair-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeyPairApi - functional programming interface
 * @export
 */
export const KeyPairApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KeyPairApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Key Pair to the config
         * @param {KeyPairApiCreateNewKeyPairRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewKeyPair(requestParameters: KeyPairApiCreateNewKeyPairRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyPairResponse>> {
            const addKeyPairRequest: AddKeyPairRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewKeyPair(addKeyPairRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Key Pair
         * @param {KeyPairApiDeleteKeyPairRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteKeyPair(requestParameters: KeyPairApiDeleteKeyPairRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteKeyPair(requestParameters.keyPairName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Key Pair
         * @param {KeyPairApiGetSingleKeyPairRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleKeyPair(requestParameters: KeyPairApiGetSingleKeyPairRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyPairResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleKeyPair(requestParameters.keyPairName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Key Pair objects
         * @param {KeyPairApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listObjects(requestParameters: KeyPairApiListObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyPairListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Key Pair by name
         * @param {KeyPairApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: KeyPairApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyPairResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.keyPairName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KeyPairApi - factory interface
 * @export
 */
export const KeyPairApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KeyPairApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Key Pair to the config
         * @param {KeyPairApiCreateNewKeyPairRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewKeyPair(requestParameters: KeyPairApiCreateNewKeyPairRequest, options?: AxiosRequestConfig): AxiosPromise<KeyPairResponse> {
            return localVarFp.createNewKeyPair(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Key Pair
         * @param {KeyPairApiDeleteKeyPairRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKeyPair(requestParameters: KeyPairApiDeleteKeyPairRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteKeyPair(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Key Pair
         * @param {KeyPairApiGetSingleKeyPairRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleKeyPair(requestParameters: KeyPairApiGetSingleKeyPairRequest, options?: AxiosRequestConfig): AxiosPromise<KeyPairResponse> {
            return localVarFp.getSingleKeyPair(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Key Pair objects
         * @param {KeyPairApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects(requestParameters: KeyPairApiListObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<KeyPairListResponse> {
            return localVarFp.listObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Key Pair by name
         * @param {KeyPairApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: KeyPairApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<KeyPairResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewKeyPair operation in KeyPairApi.
 * @export
 * @interface KeyPairApiCreateNewKeyPairRequest
 */
export type KeyPairApiCreateNewKeyPairRequest = {
    
} & AddKeyPairRequest

/**
 * Request parameters for deleteKeyPair operation in KeyPairApi.
 * @export
 * @interface KeyPairApiDeleteKeyPairRequest
 */
export type KeyPairApiDeleteKeyPairRequest = {
    
    /**
    * Name of the Key Pair
    * @type {string}
    * @memberof KeyPairApiDeleteKeyPair
    */
    readonly keyPairName: string
    
}

/**
 * Request parameters for getSingleKeyPair operation in KeyPairApi.
 * @export
 * @interface KeyPairApiGetSingleKeyPairRequest
 */
export type KeyPairApiGetSingleKeyPairRequest = {
    
    /**
    * Name of the Key Pair
    * @type {string}
    * @memberof KeyPairApiGetSingleKeyPair
    */
    readonly keyPairName: string
    
}

/**
 * Request parameters for listObjects operation in KeyPairApi.
 * @export
 * @interface KeyPairApiListObjectsRequest
 */
export type KeyPairApiListObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof KeyPairApiListObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in KeyPairApi.
 * @export
 * @interface KeyPairApiUpdateByNameRequest
 */
export type KeyPairApiUpdateByNameRequest = {
    
    /**
    * Name of the Key Pair
    * @type {string}
    * @memberof KeyPairApiUpdateByName
    */
    readonly keyPairName: string
    
} & UpdateRequest

/**
 * KeyPairApiGenerated - object-oriented interface
 * @export
 * @class KeyPairApiGenerated
 * @extends {BaseAPI}
 */
export class KeyPairApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Key Pair to the config
     * @param {KeyPairApiCreateNewKeyPairRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyPairApiGenerated
     */
    public createNewKeyPair(requestParameters: KeyPairApiCreateNewKeyPairRequest, options?: AxiosRequestConfig) {
        return KeyPairApiFp(this.configuration).createNewKeyPair(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Key Pair
     * @param {KeyPairApiDeleteKeyPairRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyPairApiGenerated
     */
    public deleteKeyPair(requestParameters: KeyPairApiDeleteKeyPairRequest, options?: AxiosRequestConfig) {
        return KeyPairApiFp(this.configuration).deleteKeyPair(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Key Pair
     * @param {KeyPairApiGetSingleKeyPairRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyPairApiGenerated
     */
    public getSingleKeyPair(requestParameters: KeyPairApiGetSingleKeyPairRequest, options?: AxiosRequestConfig) {
        return KeyPairApiFp(this.configuration).getSingleKeyPair(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Key Pair objects
     * @param {KeyPairApiListObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyPairApiGenerated
     */
    public listObjects(requestParameters: KeyPairApiListObjectsRequest = {}, options?: AxiosRequestConfig) {
        return KeyPairApiFp(this.configuration).listObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Key Pair by name
     * @param {KeyPairApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyPairApiGenerated
     */
    public updateByName(requestParameters: KeyPairApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return KeyPairApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
