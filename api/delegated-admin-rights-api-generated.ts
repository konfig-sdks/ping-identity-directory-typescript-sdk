/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDelegatedAdminRightsRequest } from '../models';
// @ts-ignore
import { DelegatedAdminRightsListResponse } from '../models';
// @ts-ignore
import { DelegatedAdminRightsResponse } from '../models';
// @ts-ignore
import { EnumdelegatedAdminRightsSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DelegatedAdminRightsApi - axios parameter creator
 * @export
 */
export const DelegatedAdminRightsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Delegated Admin Rights to the config
         * @param {AddDelegatedAdminRightsRequest} addDelegatedAdminRightsRequest Create a new Delegated Admin Rights in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig: async (addDelegatedAdminRightsRequest: AddDelegatedAdminRightsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addDelegatedAdminRightsRequest' is not null or undefined
            assertParamExists('addNewConfig', 'addDelegatedAdminRightsRequest', addDelegatedAdminRightsRequest)
            const localVarPath = `/delegated-admin-rights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addDelegatedAdminRightsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/delegated-admin-rights',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addDelegatedAdminRightsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Delegated Admin Rights
         * @param {string} delegatedAdminRightsName Name of the Delegated Admin Rights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDelegatedAdminRights: async (delegatedAdminRightsName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminRightsName' is not null or undefined
            assertParamExists('deleteDelegatedAdminRights', 'delegatedAdminRightsName', delegatedAdminRightsName)
            const localVarPath = `/delegated-admin-rights/{delegated-admin-rights-name}`
                .replace(`{${"delegated-admin-rights-name"}}`, encodeURIComponent(String(delegatedAdminRightsName !== undefined ? delegatedAdminRightsName : `-delegated-admin-rights-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/delegated-admin-rights/{delegated-admin-rights-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Delegated Admin Rights
         * @param {string} delegatedAdminRightsName Name of the Delegated Admin Rights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleRights: async (delegatedAdminRightsName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminRightsName' is not null or undefined
            assertParamExists('getSingleRights', 'delegatedAdminRightsName', delegatedAdminRightsName)
            const localVarPath = `/delegated-admin-rights/{delegated-admin-rights-name}`
                .replace(`{${"delegated-admin-rights-name"}}`, encodeURIComponent(String(delegatedAdminRightsName !== undefined ? delegatedAdminRightsName : `-delegated-admin-rights-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/delegated-admin-rights/{delegated-admin-rights-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Delegated Admin Rights objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delegated-admin-rights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/delegated-admin-rights',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Delegated Admin Rights by name
         * @param {string} delegatedAdminRightsName Name of the Delegated Admin Rights
         * @param {UpdateRequest} updateRequest Update an existing Delegated Admin Rights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (delegatedAdminRightsName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatedAdminRightsName' is not null or undefined
            assertParamExists('updateByName', 'delegatedAdminRightsName', delegatedAdminRightsName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/delegated-admin-rights/{delegated-admin-rights-name}`
                .replace(`{${"delegated-admin-rights-name"}}`, encodeURIComponent(String(delegatedAdminRightsName !== undefined ? delegatedAdminRightsName : `-delegated-admin-rights-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/delegated-admin-rights/{delegated-admin-rights-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DelegatedAdminRightsApi - functional programming interface
 * @export
 */
export const DelegatedAdminRightsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DelegatedAdminRightsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Delegated Admin Rights to the config
         * @param {DelegatedAdminRightsApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewConfig(requestParameters: DelegatedAdminRightsApiAddNewConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegatedAdminRightsResponse>> {
            const addDelegatedAdminRightsRequest: AddDelegatedAdminRightsRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewConfig(addDelegatedAdminRightsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Delegated Admin Rights
         * @param {DelegatedAdminRightsApiDeleteDelegatedAdminRightsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDelegatedAdminRights(requestParameters: DelegatedAdminRightsApiDeleteDelegatedAdminRightsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDelegatedAdminRights(requestParameters.delegatedAdminRightsName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Delegated Admin Rights
         * @param {DelegatedAdminRightsApiGetSingleRightsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleRights(requestParameters: DelegatedAdminRightsApiGetSingleRightsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegatedAdminRightsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleRights(requestParameters.delegatedAdminRightsName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Delegated Admin Rights objects
         * @param {DelegatedAdminRightsApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: DelegatedAdminRightsApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegatedAdminRightsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Delegated Admin Rights by name
         * @param {DelegatedAdminRightsApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: DelegatedAdminRightsApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DelegatedAdminRightsResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.delegatedAdminRightsName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DelegatedAdminRightsApi - factory interface
 * @export
 */
export const DelegatedAdminRightsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DelegatedAdminRightsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Delegated Admin Rights to the config
         * @param {DelegatedAdminRightsApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig(requestParameters: DelegatedAdminRightsApiAddNewConfigRequest, options?: AxiosRequestConfig): AxiosPromise<DelegatedAdminRightsResponse> {
            return localVarFp.addNewConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Delegated Admin Rights
         * @param {DelegatedAdminRightsApiDeleteDelegatedAdminRightsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDelegatedAdminRights(requestParameters: DelegatedAdminRightsApiDeleteDelegatedAdminRightsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDelegatedAdminRights(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Delegated Admin Rights
         * @param {DelegatedAdminRightsApiGetSingleRightsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleRights(requestParameters: DelegatedAdminRightsApiGetSingleRightsRequest, options?: AxiosRequestConfig): AxiosPromise<DelegatedAdminRightsResponse> {
            return localVarFp.getSingleRights(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Delegated Admin Rights objects
         * @param {DelegatedAdminRightsApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: DelegatedAdminRightsApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DelegatedAdminRightsListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Delegated Admin Rights by name
         * @param {DelegatedAdminRightsApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: DelegatedAdminRightsApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<DelegatedAdminRightsResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewConfig operation in DelegatedAdminRightsApi.
 * @export
 * @interface DelegatedAdminRightsApiAddNewConfigRequest
 */
export type DelegatedAdminRightsApiAddNewConfigRequest = {
    
} & AddDelegatedAdminRightsRequest

/**
 * Request parameters for deleteDelegatedAdminRights operation in DelegatedAdminRightsApi.
 * @export
 * @interface DelegatedAdminRightsApiDeleteDelegatedAdminRightsRequest
 */
export type DelegatedAdminRightsApiDeleteDelegatedAdminRightsRequest = {
    
    /**
    * Name of the Delegated Admin Rights
    * @type {string}
    * @memberof DelegatedAdminRightsApiDeleteDelegatedAdminRights
    */
    readonly delegatedAdminRightsName: string
    
}

/**
 * Request parameters for getSingleRights operation in DelegatedAdminRightsApi.
 * @export
 * @interface DelegatedAdminRightsApiGetSingleRightsRequest
 */
export type DelegatedAdminRightsApiGetSingleRightsRequest = {
    
    /**
    * Name of the Delegated Admin Rights
    * @type {string}
    * @memberof DelegatedAdminRightsApiGetSingleRights
    */
    readonly delegatedAdminRightsName: string
    
}

/**
 * Request parameters for listAllObjects operation in DelegatedAdminRightsApi.
 * @export
 * @interface DelegatedAdminRightsApiListAllObjectsRequest
 */
export type DelegatedAdminRightsApiListAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof DelegatedAdminRightsApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in DelegatedAdminRightsApi.
 * @export
 * @interface DelegatedAdminRightsApiUpdateByNameRequest
 */
export type DelegatedAdminRightsApiUpdateByNameRequest = {
    
    /**
    * Name of the Delegated Admin Rights
    * @type {string}
    * @memberof DelegatedAdminRightsApiUpdateByName
    */
    readonly delegatedAdminRightsName: string
    
} & UpdateRequest

/**
 * DelegatedAdminRightsApiGenerated - object-oriented interface
 * @export
 * @class DelegatedAdminRightsApiGenerated
 * @extends {BaseAPI}
 */
export class DelegatedAdminRightsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Delegated Admin Rights to the config
     * @param {DelegatedAdminRightsApiAddNewConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminRightsApiGenerated
     */
    public addNewConfig(requestParameters: DelegatedAdminRightsApiAddNewConfigRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminRightsApiFp(this.configuration).addNewConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Delegated Admin Rights
     * @param {DelegatedAdminRightsApiDeleteDelegatedAdminRightsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminRightsApiGenerated
     */
    public deleteDelegatedAdminRights(requestParameters: DelegatedAdminRightsApiDeleteDelegatedAdminRightsRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminRightsApiFp(this.configuration).deleteDelegatedAdminRights(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Delegated Admin Rights
     * @param {DelegatedAdminRightsApiGetSingleRightsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminRightsApiGenerated
     */
    public getSingleRights(requestParameters: DelegatedAdminRightsApiGetSingleRightsRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminRightsApiFp(this.configuration).getSingleRights(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Delegated Admin Rights objects
     * @param {DelegatedAdminRightsApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminRightsApiGenerated
     */
    public listAllObjects(requestParameters: DelegatedAdminRightsApiListAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return DelegatedAdminRightsApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Delegated Admin Rights by name
     * @param {DelegatedAdminRightsApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DelegatedAdminRightsApiGenerated
     */
    public updateByName(requestParameters: DelegatedAdminRightsApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return DelegatedAdminRightsApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
