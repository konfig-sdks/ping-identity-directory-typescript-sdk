/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddLogFieldMapping200Response } from '../models';
// @ts-ignore
import { AddLogFieldMappingRequest } from '../models';
// @ts-ignore
import { EnumerrorLogFieldMappingSchemaUrn } from '../models';
// @ts-ignore
import { LogFieldMappingListResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LogFieldMappingApi - axios parameter creator
 * @export
 */
export const LogFieldMappingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Log Field Mapping to the config
         * @param {AddLogFieldMappingRequest} addLogFieldMappingRequest Create a new Log Field Mapping in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewMapping: async (addLogFieldMappingRequest: AddLogFieldMappingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addLogFieldMappingRequest' is not null or undefined
            assertParamExists('addNewMapping', 'addLogFieldMappingRequest', addLogFieldMappingRequest)
            const localVarPath = `/log-field-mappings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addLogFieldMappingRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-field-mappings',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addLogFieldMappingRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Log Field Mapping
         * @param {string} logFieldMappingName Name of the Log Field Mapping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMappingById: async (logFieldMappingName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logFieldMappingName' is not null or undefined
            assertParamExists('deleteMappingById', 'logFieldMappingName', logFieldMappingName)
            const localVarPath = `/log-field-mappings/{log-field-mapping-name}`
                .replace(`{${"log-field-mapping-name"}}`, encodeURIComponent(String(logFieldMappingName !== undefined ? logFieldMappingName : `-log-field-mapping-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-field-mappings/{log-field-mapping-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Log Field Mapping objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLogFieldMappings: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-field-mappings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-field-mappings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Log Field Mapping
         * @param {string} logFieldMappingName Name of the Log Field Mapping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (logFieldMappingName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logFieldMappingName' is not null or undefined
            assertParamExists('getSingle', 'logFieldMappingName', logFieldMappingName)
            const localVarPath = `/log-field-mappings/{log-field-mapping-name}`
                .replace(`{${"log-field-mapping-name"}}`, encodeURIComponent(String(logFieldMappingName !== undefined ? logFieldMappingName : `-log-field-mapping-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-field-mappings/{log-field-mapping-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Log Field Mapping by name
         * @param {string} logFieldMappingName Name of the Log Field Mapping
         * @param {UpdateRequest} updateRequest Update an existing Log Field Mapping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (logFieldMappingName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logFieldMappingName' is not null or undefined
            assertParamExists('updateByName', 'logFieldMappingName', logFieldMappingName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/log-field-mappings/{log-field-mapping-name}`
                .replace(`{${"log-field-mapping-name"}}`, encodeURIComponent(String(logFieldMappingName !== undefined ? logFieldMappingName : `-log-field-mapping-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-field-mappings/{log-field-mapping-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogFieldMappingApi - functional programming interface
 * @export
 */
export const LogFieldMappingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogFieldMappingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Log Field Mapping to the config
         * @param {LogFieldMappingApiAddNewMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewMapping(requestParameters: LogFieldMappingApiAddNewMappingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddLogFieldMapping200Response>> {
            const addLogFieldMappingRequest: AddLogFieldMappingRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewMapping(addLogFieldMappingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Log Field Mapping
         * @param {LogFieldMappingApiDeleteMappingByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMappingById(requestParameters: LogFieldMappingApiDeleteMappingByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMappingById(requestParameters.logFieldMappingName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Log Field Mapping objects
         * @param {LogFieldMappingApiGetAllLogFieldMappingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLogFieldMappings(requestParameters: LogFieldMappingApiGetAllLogFieldMappingsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogFieldMappingListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLogFieldMappings(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Log Field Mapping
         * @param {LogFieldMappingApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: LogFieldMappingApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddLogFieldMapping200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.logFieldMappingName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Log Field Mapping by name
         * @param {LogFieldMappingApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: LogFieldMappingApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddLogFieldMapping200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.logFieldMappingName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogFieldMappingApi - factory interface
 * @export
 */
export const LogFieldMappingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogFieldMappingApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Log Field Mapping to the config
         * @param {LogFieldMappingApiAddNewMappingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewMapping(requestParameters: LogFieldMappingApiAddNewMappingRequest, options?: AxiosRequestConfig): AxiosPromise<AddLogFieldMapping200Response> {
            return localVarFp.addNewMapping(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Log Field Mapping
         * @param {LogFieldMappingApiDeleteMappingByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMappingById(requestParameters: LogFieldMappingApiDeleteMappingByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMappingById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Log Field Mapping objects
         * @param {LogFieldMappingApiGetAllLogFieldMappingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLogFieldMappings(requestParameters: LogFieldMappingApiGetAllLogFieldMappingsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LogFieldMappingListResponse> {
            return localVarFp.getAllLogFieldMappings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Log Field Mapping
         * @param {LogFieldMappingApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: LogFieldMappingApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddLogFieldMapping200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Log Field Mapping by name
         * @param {LogFieldMappingApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: LogFieldMappingApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddLogFieldMapping200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewMapping operation in LogFieldMappingApi.
 * @export
 * @interface LogFieldMappingApiAddNewMappingRequest
 */
export type LogFieldMappingApiAddNewMappingRequest = {
    
} & AddLogFieldMappingRequest

/**
 * Request parameters for deleteMappingById operation in LogFieldMappingApi.
 * @export
 * @interface LogFieldMappingApiDeleteMappingByIdRequest
 */
export type LogFieldMappingApiDeleteMappingByIdRequest = {
    
    /**
    * Name of the Log Field Mapping
    * @type {string}
    * @memberof LogFieldMappingApiDeleteMappingById
    */
    readonly logFieldMappingName: string
    
}

/**
 * Request parameters for getAllLogFieldMappings operation in LogFieldMappingApi.
 * @export
 * @interface LogFieldMappingApiGetAllLogFieldMappingsRequest
 */
export type LogFieldMappingApiGetAllLogFieldMappingsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof LogFieldMappingApiGetAllLogFieldMappings
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingle operation in LogFieldMappingApi.
 * @export
 * @interface LogFieldMappingApiGetSingleRequest
 */
export type LogFieldMappingApiGetSingleRequest = {
    
    /**
    * Name of the Log Field Mapping
    * @type {string}
    * @memberof LogFieldMappingApiGetSingle
    */
    readonly logFieldMappingName: string
    
}

/**
 * Request parameters for updateByName operation in LogFieldMappingApi.
 * @export
 * @interface LogFieldMappingApiUpdateByNameRequest
 */
export type LogFieldMappingApiUpdateByNameRequest = {
    
    /**
    * Name of the Log Field Mapping
    * @type {string}
    * @memberof LogFieldMappingApiUpdateByName
    */
    readonly logFieldMappingName: string
    
} & UpdateRequest

/**
 * LogFieldMappingApiGenerated - object-oriented interface
 * @export
 * @class LogFieldMappingApiGenerated
 * @extends {BaseAPI}
 */
export class LogFieldMappingApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Log Field Mapping to the config
     * @param {LogFieldMappingApiAddNewMappingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFieldMappingApiGenerated
     */
    public addNewMapping(requestParameters: LogFieldMappingApiAddNewMappingRequest, options?: AxiosRequestConfig) {
        return LogFieldMappingApiFp(this.configuration).addNewMapping(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Log Field Mapping
     * @param {LogFieldMappingApiDeleteMappingByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFieldMappingApiGenerated
     */
    public deleteMappingById(requestParameters: LogFieldMappingApiDeleteMappingByIdRequest, options?: AxiosRequestConfig) {
        return LogFieldMappingApiFp(this.configuration).deleteMappingById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Log Field Mapping objects
     * @param {LogFieldMappingApiGetAllLogFieldMappingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFieldMappingApiGenerated
     */
    public getAllLogFieldMappings(requestParameters: LogFieldMappingApiGetAllLogFieldMappingsRequest = {}, options?: AxiosRequestConfig) {
        return LogFieldMappingApiFp(this.configuration).getAllLogFieldMappings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Log Field Mapping
     * @param {LogFieldMappingApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFieldMappingApiGenerated
     */
    public getSingle(requestParameters: LogFieldMappingApiGetSingleRequest, options?: AxiosRequestConfig) {
        return LogFieldMappingApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Log Field Mapping by name
     * @param {LogFieldMappingApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFieldMappingApiGenerated
     */
    public updateByName(requestParameters: LogFieldMappingApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return LogFieldMappingApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
