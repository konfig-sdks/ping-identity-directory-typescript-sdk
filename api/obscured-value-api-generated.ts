/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddObscuredValueRequest } from '../models';
// @ts-ignore
import { EnumobscuredValueSchemaUrn } from '../models';
// @ts-ignore
import { ObscuredValueListResponse } from '../models';
// @ts-ignore
import { ObscuredValueResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ObscuredValueApi - axios parameter creator
 * @export
 */
export const ObscuredValueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Obscured Value to the config
         * @param {AddObscuredValueRequest} addObscuredValueRequest Create a new Obscured Value in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig: async (addObscuredValueRequest: AddObscuredValueRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addObscuredValueRequest' is not null or undefined
            assertParamExists('addNewToConfig', 'addObscuredValueRequest', addObscuredValueRequest)
            const localVarPath = `/obscured-values`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addObscuredValueRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/obscured-values',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addObscuredValueRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Obscured Value
         * @param {string} obscuredValueName Name of the Obscured Value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObscuredValue: async (obscuredValueName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'obscuredValueName' is not null or undefined
            assertParamExists('deleteObscuredValue', 'obscuredValueName', obscuredValueName)
            const localVarPath = `/obscured-values/{obscured-value-name}`
                .replace(`{${"obscured-value-name"}}`, encodeURIComponent(String(obscuredValueName !== undefined ? obscuredValueName : `-obscured-value-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/obscured-values/{obscured-value-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Obscured Value
         * @param {string} obscuredValueName Name of the Obscured Value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleValue: async (obscuredValueName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'obscuredValueName' is not null or undefined
            assertParamExists('getSingleValue', 'obscuredValueName', obscuredValueName)
            const localVarPath = `/obscured-values/{obscured-value-name}`
                .replace(`{${"obscured-value-name"}}`, encodeURIComponent(String(obscuredValueName !== undefined ? obscuredValueName : `-obscured-value-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/obscured-values/{obscured-value-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Obscured Value objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/obscured-values`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/obscured-values',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Obscured Value by name
         * @param {string} obscuredValueName Name of the Obscured Value
         * @param {UpdateRequest} updateRequest Update an existing Obscured Value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (obscuredValueName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'obscuredValueName' is not null or undefined
            assertParamExists('updateByName', 'obscuredValueName', obscuredValueName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/obscured-values/{obscured-value-name}`
                .replace(`{${"obscured-value-name"}}`, encodeURIComponent(String(obscuredValueName !== undefined ? obscuredValueName : `-obscured-value-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/obscured-values/{obscured-value-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObscuredValueApi - functional programming interface
 * @export
 */
export const ObscuredValueApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObscuredValueApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Obscured Value to the config
         * @param {ObscuredValueApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewToConfig(requestParameters: ObscuredValueApiAddNewToConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObscuredValueResponse>> {
            const addObscuredValueRequest: AddObscuredValueRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewToConfig(addObscuredValueRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Obscured Value
         * @param {ObscuredValueApiDeleteObscuredValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteObscuredValue(requestParameters: ObscuredValueApiDeleteObscuredValueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteObscuredValue(requestParameters.obscuredValueName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Obscured Value
         * @param {ObscuredValueApiGetSingleValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleValue(requestParameters: ObscuredValueApiGetSingleValueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObscuredValueResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleValue(requestParameters.obscuredValueName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Obscured Value objects
         * @param {ObscuredValueApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: ObscuredValueApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObscuredValueListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Obscured Value by name
         * @param {ObscuredValueApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ObscuredValueApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObscuredValueResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.obscuredValueName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObscuredValueApi - factory interface
 * @export
 */
export const ObscuredValueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObscuredValueApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Obscured Value to the config
         * @param {ObscuredValueApiAddNewToConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewToConfig(requestParameters: ObscuredValueApiAddNewToConfigRequest, options?: AxiosRequestConfig): AxiosPromise<ObscuredValueResponse> {
            return localVarFp.addNewToConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Obscured Value
         * @param {ObscuredValueApiDeleteObscuredValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObscuredValue(requestParameters: ObscuredValueApiDeleteObscuredValueRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteObscuredValue(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Obscured Value
         * @param {ObscuredValueApiGetSingleValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleValue(requestParameters: ObscuredValueApiGetSingleValueRequest, options?: AxiosRequestConfig): AxiosPromise<ObscuredValueResponse> {
            return localVarFp.getSingleValue(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Obscured Value objects
         * @param {ObscuredValueApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: ObscuredValueApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ObscuredValueListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Obscured Value by name
         * @param {ObscuredValueApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ObscuredValueApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<ObscuredValueResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewToConfig operation in ObscuredValueApi.
 * @export
 * @interface ObscuredValueApiAddNewToConfigRequest
 */
export type ObscuredValueApiAddNewToConfigRequest = {
    
} & AddObscuredValueRequest

/**
 * Request parameters for deleteObscuredValue operation in ObscuredValueApi.
 * @export
 * @interface ObscuredValueApiDeleteObscuredValueRequest
 */
export type ObscuredValueApiDeleteObscuredValueRequest = {
    
    /**
    * Name of the Obscured Value
    * @type {string}
    * @memberof ObscuredValueApiDeleteObscuredValue
    */
    readonly obscuredValueName: string
    
}

/**
 * Request parameters for getSingleValue operation in ObscuredValueApi.
 * @export
 * @interface ObscuredValueApiGetSingleValueRequest
 */
export type ObscuredValueApiGetSingleValueRequest = {
    
    /**
    * Name of the Obscured Value
    * @type {string}
    * @memberof ObscuredValueApiGetSingleValue
    */
    readonly obscuredValueName: string
    
}

/**
 * Request parameters for listAllObjects operation in ObscuredValueApi.
 * @export
 * @interface ObscuredValueApiListAllObjectsRequest
 */
export type ObscuredValueApiListAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ObscuredValueApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in ObscuredValueApi.
 * @export
 * @interface ObscuredValueApiUpdateByNameRequest
 */
export type ObscuredValueApiUpdateByNameRequest = {
    
    /**
    * Name of the Obscured Value
    * @type {string}
    * @memberof ObscuredValueApiUpdateByName
    */
    readonly obscuredValueName: string
    
} & UpdateRequest

/**
 * ObscuredValueApiGenerated - object-oriented interface
 * @export
 * @class ObscuredValueApiGenerated
 * @extends {BaseAPI}
 */
export class ObscuredValueApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Obscured Value to the config
     * @param {ObscuredValueApiAddNewToConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObscuredValueApiGenerated
     */
    public addNewToConfig(requestParameters: ObscuredValueApiAddNewToConfigRequest, options?: AxiosRequestConfig) {
        return ObscuredValueApiFp(this.configuration).addNewToConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Obscured Value
     * @param {ObscuredValueApiDeleteObscuredValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObscuredValueApiGenerated
     */
    public deleteObscuredValue(requestParameters: ObscuredValueApiDeleteObscuredValueRequest, options?: AxiosRequestConfig) {
        return ObscuredValueApiFp(this.configuration).deleteObscuredValue(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Obscured Value
     * @param {ObscuredValueApiGetSingleValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObscuredValueApiGenerated
     */
    public getSingleValue(requestParameters: ObscuredValueApiGetSingleValueRequest, options?: AxiosRequestConfig) {
        return ObscuredValueApiFp(this.configuration).getSingleValue(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Obscured Value objects
     * @param {ObscuredValueApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObscuredValueApiGenerated
     */
    public listAllObjects(requestParameters: ObscuredValueApiListAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return ObscuredValueApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Obscured Value by name
     * @param {ObscuredValueApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObscuredValueApiGenerated
     */
    public updateByName(requestParameters: ObscuredValueApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ObscuredValueApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
