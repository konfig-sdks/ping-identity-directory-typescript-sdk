/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddOtpDeliveryMechanism200Response } from '../models';
// @ts-ignore
import { AddOtpDeliveryMechanismRequest } from '../models';
// @ts-ignore
import { EnumthirdPartyOtpDeliveryMechanismSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { OtpDeliveryMechanismListResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OtpDeliveryMechanismApi - axios parameter creator
 * @export
 */
export const OtpDeliveryMechanismApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new OTP Delivery Mechanism to the config
         * @param {AddOtpDeliveryMechanismRequest} addOtpDeliveryMechanismRequest Create a new OTP Delivery Mechanism in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewMethod: async (addOtpDeliveryMechanismRequest: AddOtpDeliveryMechanismRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addOtpDeliveryMechanismRequest' is not null or undefined
            assertParamExists('addNewMethod', 'addOtpDeliveryMechanismRequest', addOtpDeliveryMechanismRequest)
            const localVarPath = `/otp-delivery-mechanisms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addOtpDeliveryMechanismRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/otp-delivery-mechanisms',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addOtpDeliveryMechanismRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a OTP Delivery Mechanism
         * @param {string} otpDeliveryMechanismName Name of the OTP Delivery Mechanism
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeliveryMechanism: async (otpDeliveryMechanismName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'otpDeliveryMechanismName' is not null or undefined
            assertParamExists('deleteDeliveryMechanism', 'otpDeliveryMechanismName', otpDeliveryMechanismName)
            const localVarPath = `/otp-delivery-mechanisms/{otp-delivery-mechanism-name}`
                .replace(`{${"otp-delivery-mechanism-name"}}`, encodeURIComponent(String(otpDeliveryMechanismName !== undefined ? otpDeliveryMechanismName : `-otp-delivery-mechanism-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/otp-delivery-mechanisms/{otp-delivery-mechanism-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single OTP Delivery Mechanism
         * @param {string} otpDeliveryMechanismName Name of the OTP Delivery Mechanism
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleDeliveryMechanism: async (otpDeliveryMechanismName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'otpDeliveryMechanismName' is not null or undefined
            assertParamExists('getSingleDeliveryMechanism', 'otpDeliveryMechanismName', otpDeliveryMechanismName)
            const localVarPath = `/otp-delivery-mechanisms/{otp-delivery-mechanism-name}`
                .replace(`{${"otp-delivery-mechanism-name"}}`, encodeURIComponent(String(otpDeliveryMechanismName !== undefined ? otpDeliveryMechanismName : `-otp-delivery-mechanism-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/otp-delivery-mechanisms/{otp-delivery-mechanism-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all OTP Delivery Mechanism objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/otp-delivery-mechanisms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/otp-delivery-mechanisms',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing OTP Delivery Mechanism by name
         * @param {string} otpDeliveryMechanismName Name of the OTP Delivery Mechanism
         * @param {UpdateRequest} updateRequest Update an existing OTP Delivery Mechanism
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByOtpDeliveryMechanismName: async (otpDeliveryMechanismName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'otpDeliveryMechanismName' is not null or undefined
            assertParamExists('updateByOtpDeliveryMechanismName', 'otpDeliveryMechanismName', otpDeliveryMechanismName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByOtpDeliveryMechanismName', 'updateRequest', updateRequest)
            const localVarPath = `/otp-delivery-mechanisms/{otp-delivery-mechanism-name}`
                .replace(`{${"otp-delivery-mechanism-name"}}`, encodeURIComponent(String(otpDeliveryMechanismName !== undefined ? otpDeliveryMechanismName : `-otp-delivery-mechanism-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/otp-delivery-mechanisms/{otp-delivery-mechanism-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OtpDeliveryMechanismApi - functional programming interface
 * @export
 */
export const OtpDeliveryMechanismApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OtpDeliveryMechanismApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new OTP Delivery Mechanism to the config
         * @param {OtpDeliveryMechanismApiAddNewMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewMethod(requestParameters: OtpDeliveryMechanismApiAddNewMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddOtpDeliveryMechanism200Response>> {
            const addOtpDeliveryMechanismRequest: AddOtpDeliveryMechanismRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewMethod(addOtpDeliveryMechanismRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a OTP Delivery Mechanism
         * @param {OtpDeliveryMechanismApiDeleteDeliveryMechanismRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDeliveryMechanism(requestParameters: OtpDeliveryMechanismApiDeleteDeliveryMechanismRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeliveryMechanism(requestParameters.otpDeliveryMechanismName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single OTP Delivery Mechanism
         * @param {OtpDeliveryMechanismApiGetSingleDeliveryMechanismRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleDeliveryMechanism(requestParameters: OtpDeliveryMechanismApiGetSingleDeliveryMechanismRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddOtpDeliveryMechanism200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleDeliveryMechanism(requestParameters.otpDeliveryMechanismName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all OTP Delivery Mechanism objects
         * @param {OtpDeliveryMechanismApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: OtpDeliveryMechanismApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OtpDeliveryMechanismListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing OTP Delivery Mechanism by name
         * @param {OtpDeliveryMechanismApiUpdateByOtpDeliveryMechanismNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByOtpDeliveryMechanismName(requestParameters: OtpDeliveryMechanismApiUpdateByOtpDeliveryMechanismNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddOtpDeliveryMechanism200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByOtpDeliveryMechanismName(requestParameters.otpDeliveryMechanismName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OtpDeliveryMechanismApi - factory interface
 * @export
 */
export const OtpDeliveryMechanismApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OtpDeliveryMechanismApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new OTP Delivery Mechanism to the config
         * @param {OtpDeliveryMechanismApiAddNewMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewMethod(requestParameters: OtpDeliveryMechanismApiAddNewMethodRequest, options?: AxiosRequestConfig): AxiosPromise<AddOtpDeliveryMechanism200Response> {
            return localVarFp.addNewMethod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a OTP Delivery Mechanism
         * @param {OtpDeliveryMechanismApiDeleteDeliveryMechanismRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeliveryMechanism(requestParameters: OtpDeliveryMechanismApiDeleteDeliveryMechanismRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDeliveryMechanism(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single OTP Delivery Mechanism
         * @param {OtpDeliveryMechanismApiGetSingleDeliveryMechanismRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleDeliveryMechanism(requestParameters: OtpDeliveryMechanismApiGetSingleDeliveryMechanismRequest, options?: AxiosRequestConfig): AxiosPromise<AddOtpDeliveryMechanism200Response> {
            return localVarFp.getSingleDeliveryMechanism(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all OTP Delivery Mechanism objects
         * @param {OtpDeliveryMechanismApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: OtpDeliveryMechanismApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OtpDeliveryMechanismListResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing OTP Delivery Mechanism by name
         * @param {OtpDeliveryMechanismApiUpdateByOtpDeliveryMechanismNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByOtpDeliveryMechanismName(requestParameters: OtpDeliveryMechanismApiUpdateByOtpDeliveryMechanismNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddOtpDeliveryMechanism200Response> {
            return localVarFp.updateByOtpDeliveryMechanismName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewMethod operation in OtpDeliveryMechanismApi.
 * @export
 * @interface OtpDeliveryMechanismApiAddNewMethodRequest
 */
export type OtpDeliveryMechanismApiAddNewMethodRequest = {
    
} & AddOtpDeliveryMechanismRequest

/**
 * Request parameters for deleteDeliveryMechanism operation in OtpDeliveryMechanismApi.
 * @export
 * @interface OtpDeliveryMechanismApiDeleteDeliveryMechanismRequest
 */
export type OtpDeliveryMechanismApiDeleteDeliveryMechanismRequest = {
    
    /**
    * Name of the OTP Delivery Mechanism
    * @type {string}
    * @memberof OtpDeliveryMechanismApiDeleteDeliveryMechanism
    */
    readonly otpDeliveryMechanismName: string
    
}

/**
 * Request parameters for getSingleDeliveryMechanism operation in OtpDeliveryMechanismApi.
 * @export
 * @interface OtpDeliveryMechanismApiGetSingleDeliveryMechanismRequest
 */
export type OtpDeliveryMechanismApiGetSingleDeliveryMechanismRequest = {
    
    /**
    * Name of the OTP Delivery Mechanism
    * @type {string}
    * @memberof OtpDeliveryMechanismApiGetSingleDeliveryMechanism
    */
    readonly otpDeliveryMechanismName: string
    
}

/**
 * Request parameters for listAll operation in OtpDeliveryMechanismApi.
 * @export
 * @interface OtpDeliveryMechanismApiListAllRequest
 */
export type OtpDeliveryMechanismApiListAllRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof OtpDeliveryMechanismApiListAll
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByOtpDeliveryMechanismName operation in OtpDeliveryMechanismApi.
 * @export
 * @interface OtpDeliveryMechanismApiUpdateByOtpDeliveryMechanismNameRequest
 */
export type OtpDeliveryMechanismApiUpdateByOtpDeliveryMechanismNameRequest = {
    
    /**
    * Name of the OTP Delivery Mechanism
    * @type {string}
    * @memberof OtpDeliveryMechanismApiUpdateByOtpDeliveryMechanismName
    */
    readonly otpDeliveryMechanismName: string
    
} & UpdateRequest

/**
 * OtpDeliveryMechanismApiGenerated - object-oriented interface
 * @export
 * @class OtpDeliveryMechanismApiGenerated
 * @extends {BaseAPI}
 */
export class OtpDeliveryMechanismApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new OTP Delivery Mechanism to the config
     * @param {OtpDeliveryMechanismApiAddNewMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtpDeliveryMechanismApiGenerated
     */
    public addNewMethod(requestParameters: OtpDeliveryMechanismApiAddNewMethodRequest, options?: AxiosRequestConfig) {
        return OtpDeliveryMechanismApiFp(this.configuration).addNewMethod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a OTP Delivery Mechanism
     * @param {OtpDeliveryMechanismApiDeleteDeliveryMechanismRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtpDeliveryMechanismApiGenerated
     */
    public deleteDeliveryMechanism(requestParameters: OtpDeliveryMechanismApiDeleteDeliveryMechanismRequest, options?: AxiosRequestConfig) {
        return OtpDeliveryMechanismApiFp(this.configuration).deleteDeliveryMechanism(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single OTP Delivery Mechanism
     * @param {OtpDeliveryMechanismApiGetSingleDeliveryMechanismRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtpDeliveryMechanismApiGenerated
     */
    public getSingleDeliveryMechanism(requestParameters: OtpDeliveryMechanismApiGetSingleDeliveryMechanismRequest, options?: AxiosRequestConfig) {
        return OtpDeliveryMechanismApiFp(this.configuration).getSingleDeliveryMechanism(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all OTP Delivery Mechanism objects
     * @param {OtpDeliveryMechanismApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtpDeliveryMechanismApiGenerated
     */
    public listAll(requestParameters: OtpDeliveryMechanismApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return OtpDeliveryMechanismApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing OTP Delivery Mechanism by name
     * @param {OtpDeliveryMechanismApiUpdateByOtpDeliveryMechanismNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtpDeliveryMechanismApiGenerated
     */
    public updateByOtpDeliveryMechanismName(requestParameters: OtpDeliveryMechanismApiUpdateByOtpDeliveryMechanismNameRequest, options?: AxiosRequestConfig) {
        return OtpDeliveryMechanismApiFp(this.configuration).updateByOtpDeliveryMechanismName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
