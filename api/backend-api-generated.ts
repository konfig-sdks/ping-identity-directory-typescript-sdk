/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddBackend200Response } from '../models';
// @ts-ignore
import { AddLocalDbBackendRequest } from '../models';
// @ts-ignore
import { BackendListResponse } from '../models';
// @ts-ignore
import { EnumbackendDefaultCacheModeProp } from '../models';
// @ts-ignore
import { EnumbackendDn2idCacheModeProp } from '../models';
// @ts-ignore
import { EnumbackendDn2uriCacheModeProp } from '../models';
// @ts-ignore
import { EnumbackendExternalTxnDefaultBackendLockBehaviorProp } from '../models';
// @ts-ignore
import { EnumbackendId2childrenCacheModeProp } from '../models';
// @ts-ignore
import { EnumbackendId2entryCacheModeProp } from '../models';
// @ts-ignore
import { EnumbackendId2subtreeCacheModeProp } from '../models';
// @ts-ignore
import { EnumbackendPrimeMethodProp } from '../models';
// @ts-ignore
import { EnumbackendSingleWriterLockBehaviorProp } from '../models';
// @ts-ignore
import { EnumbackendSystemIndexToPrimeInternalNodesOnlyProp } from '../models';
// @ts-ignore
import { EnumbackendSystemIndexToPrimeProp } from '../models';
// @ts-ignore
import { EnumbackendUncachedId2entryCacheModeProp } from '../models';
// @ts-ignore
import { EnumbackendWritabilityModeProp } from '../models';
// @ts-ignore
import { EnumlocalDbBackendSchemaUrn } from '../models';
// @ts-ignore
import { GetBackend200Response } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BackendApi - axios parameter creator
 * @export
 */
export const BackendApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Backend to the config
         * @param {AddLocalDbBackendRequest} addLocalDbBackendRequest Create a new Backend in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfig: async (addLocalDbBackendRequest: AddLocalDbBackendRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addLocalDbBackendRequest' is not null or undefined
            assertParamExists('createConfig', 'addLocalDbBackendRequest', addLocalDbBackendRequest)
            const localVarPath = `/backends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addLocalDbBackendRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addLocalDbBackendRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Backend
         * @param {string} backendName Name of the Backend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBackend: async (backendName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backendName' is not null or undefined
            assertParamExists('deleteBackend', 'backendName', backendName)
            const localVarPath = `/backends/{backend-name}`
                .replace(`{${"backend-name"}}`, encodeURIComponent(String(backendName !== undefined ? backendName : `-backend-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends/{backend-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Backend objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/backends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Backend
         * @param {string} backendName Name of the Backend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (backendName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backendName' is not null or undefined
            assertParamExists('getSingle', 'backendName', backendName)
            const localVarPath = `/backends/{backend-name}`
                .replace(`{${"backend-name"}}`, encodeURIComponent(String(backendName !== undefined ? backendName : `-backend-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends/{backend-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Backend by name
         * @param {string} backendName Name of the Backend
         * @param {UpdateRequest} updateRequest Update an existing Backend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (backendName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backendName' is not null or undefined
            assertParamExists('updateByName', 'backendName', backendName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/backends/{backend-name}`
                .replace(`{${"backend-name"}}`, encodeURIComponent(String(backendName !== undefined ? backendName : `-backend-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/backends/{backend-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BackendApi - functional programming interface
 * @export
 */
export const BackendApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BackendApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Backend to the config
         * @param {BackendApiCreateConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConfig(requestParameters: BackendApiCreateConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddBackend200Response>> {
            const addLocalDbBackendRequest: AddLocalDbBackendRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConfig(addLocalDbBackendRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Backend
         * @param {BackendApiDeleteBackendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBackend(requestParameters: BackendApiDeleteBackendRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBackend(requestParameters.backendName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Backend objects
         * @param {BackendApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllObjects(requestParameters: BackendApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BackendListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Backend
         * @param {BackendApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: BackendApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBackend200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.backendName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Backend by name
         * @param {BackendApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: BackendApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBackend200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.backendName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BackendApi - factory interface
 * @export
 */
export const BackendApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BackendApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Backend to the config
         * @param {BackendApiCreateConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfig(requestParameters: BackendApiCreateConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AddBackend200Response> {
            return localVarFp.createConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Backend
         * @param {BackendApiDeleteBackendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBackend(requestParameters: BackendApiDeleteBackendRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBackend(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Backend objects
         * @param {BackendApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects(requestParameters: BackendApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BackendListResponse> {
            return localVarFp.getAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Backend
         * @param {BackendApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: BackendApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<GetBackend200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Backend by name
         * @param {BackendApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: BackendApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<GetBackend200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createConfig operation in BackendApi.
 * @export
 * @interface BackendApiCreateConfigRequest
 */
export type BackendApiCreateConfigRequest = {
    
} & AddLocalDbBackendRequest

/**
 * Request parameters for deleteBackend operation in BackendApi.
 * @export
 * @interface BackendApiDeleteBackendRequest
 */
export type BackendApiDeleteBackendRequest = {
    
    /**
    * Name of the Backend
    * @type {string}
    * @memberof BackendApiDeleteBackend
    */
    readonly backendName: string
    
}

/**
 * Request parameters for getAllObjects operation in BackendApi.
 * @export
 * @interface BackendApiGetAllObjectsRequest
 */
export type BackendApiGetAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof BackendApiGetAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingle operation in BackendApi.
 * @export
 * @interface BackendApiGetSingleRequest
 */
export type BackendApiGetSingleRequest = {
    
    /**
    * Name of the Backend
    * @type {string}
    * @memberof BackendApiGetSingle
    */
    readonly backendName: string
    
}

/**
 * Request parameters for updateByName operation in BackendApi.
 * @export
 * @interface BackendApiUpdateByNameRequest
 */
export type BackendApiUpdateByNameRequest = {
    
    /**
    * Name of the Backend
    * @type {string}
    * @memberof BackendApiUpdateByName
    */
    readonly backendName: string
    
} & UpdateRequest

/**
 * BackendApiGenerated - object-oriented interface
 * @export
 * @class BackendApiGenerated
 * @extends {BaseAPI}
 */
export class BackendApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Backend to the config
     * @param {BackendApiCreateConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiGenerated
     */
    public createConfig(requestParameters: BackendApiCreateConfigRequest, options?: AxiosRequestConfig) {
        return BackendApiFp(this.configuration).createConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Backend
     * @param {BackendApiDeleteBackendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiGenerated
     */
    public deleteBackend(requestParameters: BackendApiDeleteBackendRequest, options?: AxiosRequestConfig) {
        return BackendApiFp(this.configuration).deleteBackend(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Backend objects
     * @param {BackendApiGetAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiGenerated
     */
    public getAllObjects(requestParameters: BackendApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return BackendApiFp(this.configuration).getAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Backend
     * @param {BackendApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiGenerated
     */
    public getSingle(requestParameters: BackendApiGetSingleRequest, options?: AxiosRequestConfig) {
        return BackendApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Backend by name
     * @param {BackendApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiGenerated
     */
    public updateByName(requestParameters: BackendApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return BackendApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
