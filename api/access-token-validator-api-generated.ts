/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccessTokenValidatorListResponse } from '../models';
// @ts-ignore
import { AddAccessTokenValidator200Response } from '../models';
// @ts-ignore
import { AddAccessTokenValidatorRequest } from '../models';
// @ts-ignore
import { EnumaccessTokenValidatorAllowedContentEncryptionAlgorithmProp } from '../models';
// @ts-ignore
import { EnumaccessTokenValidatorAllowedKeyEncryptionAlgorithmProp } from '../models';
// @ts-ignore
import { EnumaccessTokenValidatorAllowedSigningAlgorithmProp } from '../models';
// @ts-ignore
import { EnumthirdPartyAccessTokenValidatorSchemaUrn } from '../models';
// @ts-ignore
import { GetAccessTokenValidator200Response } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccessTokenValidatorApi - axios parameter creator
 * @export
 */
export const AccessTokenValidatorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Access Token Validator to the config
         * @param {AddAccessTokenValidatorRequest} addAccessTokenValidatorRequest Create a new Access Token Validator in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewValidator: async (addAccessTokenValidatorRequest: AddAccessTokenValidatorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addAccessTokenValidatorRequest' is not null or undefined
            assertParamExists('addNewValidator', 'addAccessTokenValidatorRequest', addAccessTokenValidatorRequest)
            const localVarPath = `/access-token-validators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addAccessTokenValidatorRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/access-token-validators',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addAccessTokenValidatorRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Access Token Validator
         * @param {string} accessTokenValidatorName Name of the Access Token Validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteValidator: async (accessTokenValidatorName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessTokenValidatorName' is not null or undefined
            assertParamExists('deleteValidator', 'accessTokenValidatorName', accessTokenValidatorName)
            const localVarPath = `/access-token-validators/{access-token-validator-name}`
                .replace(`{${"access-token-validator-name"}}`, encodeURIComponent(String(accessTokenValidatorName !== undefined ? accessTokenValidatorName : `-access-token-validator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/access-token-validators/{access-token-validator-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Access Token Validator
         * @param {string} accessTokenValidatorName Name of the Access Token Validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleValidator: async (accessTokenValidatorName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessTokenValidatorName' is not null or undefined
            assertParamExists('getSingleValidator', 'accessTokenValidatorName', accessTokenValidatorName)
            const localVarPath = `/access-token-validators/{access-token-validator-name}`
                .replace(`{${"access-token-validator-name"}}`, encodeURIComponent(String(accessTokenValidatorName !== undefined ? accessTokenValidatorName : `-access-token-validator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/access-token-validators/{access-token-validator-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Access Token Validator objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/access-token-validators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/access-token-validators',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Access Token Validator by name
         * @param {string} accessTokenValidatorName Name of the Access Token Validator
         * @param {UpdateRequest} updateRequest Update an existing Access Token Validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (accessTokenValidatorName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessTokenValidatorName' is not null or undefined
            assertParamExists('updateByName', 'accessTokenValidatorName', accessTokenValidatorName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/access-token-validators/{access-token-validator-name}`
                .replace(`{${"access-token-validator-name"}}`, encodeURIComponent(String(accessTokenValidatorName !== undefined ? accessTokenValidatorName : `-access-token-validator-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/access-token-validators/{access-token-validator-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessTokenValidatorApi - functional programming interface
 * @export
 */
export const AccessTokenValidatorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccessTokenValidatorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Access Token Validator to the config
         * @param {AccessTokenValidatorApiAddNewValidatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewValidator(requestParameters: AccessTokenValidatorApiAddNewValidatorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddAccessTokenValidator200Response>> {
            const addAccessTokenValidatorRequest: AddAccessTokenValidatorRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewValidator(addAccessTokenValidatorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Access Token Validator
         * @param {AccessTokenValidatorApiDeleteValidatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteValidator(requestParameters: AccessTokenValidatorApiDeleteValidatorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteValidator(requestParameters.accessTokenValidatorName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Access Token Validator
         * @param {AccessTokenValidatorApiGetSingleValidatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleValidator(requestParameters: AccessTokenValidatorApiGetSingleValidatorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccessTokenValidator200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleValidator(requestParameters.accessTokenValidatorName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Access Token Validator objects
         * @param {AccessTokenValidatorApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listObjects(requestParameters: AccessTokenValidatorApiListObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenValidatorListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Access Token Validator by name
         * @param {AccessTokenValidatorApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: AccessTokenValidatorApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccessTokenValidator200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.accessTokenValidatorName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccessTokenValidatorApi - factory interface
 * @export
 */
export const AccessTokenValidatorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccessTokenValidatorApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Access Token Validator to the config
         * @param {AccessTokenValidatorApiAddNewValidatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewValidator(requestParameters: AccessTokenValidatorApiAddNewValidatorRequest, options?: AxiosRequestConfig): AxiosPromise<AddAccessTokenValidator200Response> {
            return localVarFp.addNewValidator(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Access Token Validator
         * @param {AccessTokenValidatorApiDeleteValidatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteValidator(requestParameters: AccessTokenValidatorApiDeleteValidatorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteValidator(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Access Token Validator
         * @param {AccessTokenValidatorApiGetSingleValidatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleValidator(requestParameters: AccessTokenValidatorApiGetSingleValidatorRequest, options?: AxiosRequestConfig): AxiosPromise<GetAccessTokenValidator200Response> {
            return localVarFp.getSingleValidator(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Access Token Validator objects
         * @param {AccessTokenValidatorApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects(requestParameters: AccessTokenValidatorApiListObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccessTokenValidatorListResponse> {
            return localVarFp.listObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Access Token Validator by name
         * @param {AccessTokenValidatorApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: AccessTokenValidatorApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<GetAccessTokenValidator200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewValidator operation in AccessTokenValidatorApi.
 * @export
 * @interface AccessTokenValidatorApiAddNewValidatorRequest
 */
export type AccessTokenValidatorApiAddNewValidatorRequest = {
    
} & AddAccessTokenValidatorRequest

/**
 * Request parameters for deleteValidator operation in AccessTokenValidatorApi.
 * @export
 * @interface AccessTokenValidatorApiDeleteValidatorRequest
 */
export type AccessTokenValidatorApiDeleteValidatorRequest = {
    
    /**
    * Name of the Access Token Validator
    * @type {string}
    * @memberof AccessTokenValidatorApiDeleteValidator
    */
    readonly accessTokenValidatorName: string
    
}

/**
 * Request parameters for getSingleValidator operation in AccessTokenValidatorApi.
 * @export
 * @interface AccessTokenValidatorApiGetSingleValidatorRequest
 */
export type AccessTokenValidatorApiGetSingleValidatorRequest = {
    
    /**
    * Name of the Access Token Validator
    * @type {string}
    * @memberof AccessTokenValidatorApiGetSingleValidator
    */
    readonly accessTokenValidatorName: string
    
}

/**
 * Request parameters for listObjects operation in AccessTokenValidatorApi.
 * @export
 * @interface AccessTokenValidatorApiListObjectsRequest
 */
export type AccessTokenValidatorApiListObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof AccessTokenValidatorApiListObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in AccessTokenValidatorApi.
 * @export
 * @interface AccessTokenValidatorApiUpdateByNameRequest
 */
export type AccessTokenValidatorApiUpdateByNameRequest = {
    
    /**
    * Name of the Access Token Validator
    * @type {string}
    * @memberof AccessTokenValidatorApiUpdateByName
    */
    readonly accessTokenValidatorName: string
    
} & UpdateRequest

/**
 * AccessTokenValidatorApiGenerated - object-oriented interface
 * @export
 * @class AccessTokenValidatorApiGenerated
 * @extends {BaseAPI}
 */
export class AccessTokenValidatorApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Access Token Validator to the config
     * @param {AccessTokenValidatorApiAddNewValidatorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokenValidatorApiGenerated
     */
    public addNewValidator(requestParameters: AccessTokenValidatorApiAddNewValidatorRequest, options?: AxiosRequestConfig) {
        return AccessTokenValidatorApiFp(this.configuration).addNewValidator(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Access Token Validator
     * @param {AccessTokenValidatorApiDeleteValidatorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokenValidatorApiGenerated
     */
    public deleteValidator(requestParameters: AccessTokenValidatorApiDeleteValidatorRequest, options?: AxiosRequestConfig) {
        return AccessTokenValidatorApiFp(this.configuration).deleteValidator(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Access Token Validator
     * @param {AccessTokenValidatorApiGetSingleValidatorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokenValidatorApiGenerated
     */
    public getSingleValidator(requestParameters: AccessTokenValidatorApiGetSingleValidatorRequest, options?: AxiosRequestConfig) {
        return AccessTokenValidatorApiFp(this.configuration).getSingleValidator(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Access Token Validator objects
     * @param {AccessTokenValidatorApiListObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokenValidatorApiGenerated
     */
    public listObjects(requestParameters: AccessTokenValidatorApiListObjectsRequest = {}, options?: AxiosRequestConfig) {
        return AccessTokenValidatorApiFp(this.configuration).listObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Access Token Validator by name
     * @param {AccessTokenValidatorApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokenValidatorApiGenerated
     */
    public updateByName(requestParameters: AccessTokenValidatorApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return AccessTokenValidatorApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
