/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddScimResourceType200Response } from '../models';
// @ts-ignore
import { AddScimResourceTypeRequest } from '../models';
// @ts-ignore
import { EnumldapMappingScimResourceTypeSchemaUrn } from '../models';
// @ts-ignore
import { EnumscimResourceTypeSchemaCheckingOptionProp } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { ScimResourceTypeListResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ScimResourceTypeApi - axios parameter creator
 * @export
 */
export const ScimResourceTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new SCIM Resource Type to the config
         * @param {AddScimResourceTypeRequest} addScimResourceTypeRequest Create a new SCIM Resource Type in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig: async (addScimResourceTypeRequest: AddScimResourceTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addScimResourceTypeRequest' is not null or undefined
            assertParamExists('addNewConfig', 'addScimResourceTypeRequest', addScimResourceTypeRequest)
            const localVarPath = `/scim-resource-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addScimResourceTypeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addScimResourceTypeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a SCIM Resource Type
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceType: async (scimResourceTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('deleteResourceType', 'scimResourceTypeName', scimResourceTypeName)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}`
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single SCIM Resource Type
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (scimResourceTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('getSingle', 'scimResourceTypeName', scimResourceTypeName)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}`
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all SCIM Resource Type objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scim-resource-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing SCIM Resource Type by name
         * @param {string} scimResourceTypeName Name of the SCIM Resource Type
         * @param {UpdateRequest} updateRequest Update an existing SCIM Resource Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (scimResourceTypeName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimResourceTypeName' is not null or undefined
            assertParamExists('updateByName', 'scimResourceTypeName', scimResourceTypeName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/scim-resource-types/{scim-resource-type-name}`
                .replace(`{${"scim-resource-type-name"}}`, encodeURIComponent(String(scimResourceTypeName !== undefined ? scimResourceTypeName : `-scim-resource-type-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scim-resource-types/{scim-resource-type-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScimResourceTypeApi - functional programming interface
 * @export
 */
export const ScimResourceTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScimResourceTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new SCIM Resource Type to the config
         * @param {ScimResourceTypeApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewConfig(requestParameters: ScimResourceTypeApiAddNewConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddScimResourceType200Response>> {
            const addScimResourceTypeRequest: AddScimResourceTypeRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewConfig(addScimResourceTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a SCIM Resource Type
         * @param {ScimResourceTypeApiDeleteResourceTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResourceType(requestParameters: ScimResourceTypeApiDeleteResourceTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceType(requestParameters.scimResourceTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single SCIM Resource Type
         * @param {ScimResourceTypeApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: ScimResourceTypeApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddScimResourceType200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.scimResourceTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all SCIM Resource Type objects
         * @param {ScimResourceTypeApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: ScimResourceTypeApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimResourceTypeListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing SCIM Resource Type by name
         * @param {ScimResourceTypeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ScimResourceTypeApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddScimResourceType200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.scimResourceTypeName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScimResourceTypeApi - factory interface
 * @export
 */
export const ScimResourceTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScimResourceTypeApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new SCIM Resource Type to the config
         * @param {ScimResourceTypeApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig(requestParameters: ScimResourceTypeApiAddNewConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AddScimResourceType200Response> {
            return localVarFp.addNewConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a SCIM Resource Type
         * @param {ScimResourceTypeApiDeleteResourceTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceType(requestParameters: ScimResourceTypeApiDeleteResourceTypeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteResourceType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single SCIM Resource Type
         * @param {ScimResourceTypeApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: ScimResourceTypeApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddScimResourceType200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all SCIM Resource Type objects
         * @param {ScimResourceTypeApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: ScimResourceTypeApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ScimResourceTypeListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing SCIM Resource Type by name
         * @param {ScimResourceTypeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ScimResourceTypeApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddScimResourceType200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewConfig operation in ScimResourceTypeApi.
 * @export
 * @interface ScimResourceTypeApiAddNewConfigRequest
 */
export type ScimResourceTypeApiAddNewConfigRequest = {
    
} & AddScimResourceTypeRequest

/**
 * Request parameters for deleteResourceType operation in ScimResourceTypeApi.
 * @export
 * @interface ScimResourceTypeApiDeleteResourceTypeRequest
 */
export type ScimResourceTypeApiDeleteResourceTypeRequest = {
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof ScimResourceTypeApiDeleteResourceType
    */
    readonly scimResourceTypeName: string
    
}

/**
 * Request parameters for getSingle operation in ScimResourceTypeApi.
 * @export
 * @interface ScimResourceTypeApiGetSingleRequest
 */
export type ScimResourceTypeApiGetSingleRequest = {
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof ScimResourceTypeApiGetSingle
    */
    readonly scimResourceTypeName: string
    
}

/**
 * Request parameters for listAllObjects operation in ScimResourceTypeApi.
 * @export
 * @interface ScimResourceTypeApiListAllObjectsRequest
 */
export type ScimResourceTypeApiListAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ScimResourceTypeApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in ScimResourceTypeApi.
 * @export
 * @interface ScimResourceTypeApiUpdateByNameRequest
 */
export type ScimResourceTypeApiUpdateByNameRequest = {
    
    /**
    * Name of the SCIM Resource Type
    * @type {string}
    * @memberof ScimResourceTypeApiUpdateByName
    */
    readonly scimResourceTypeName: string
    
} & UpdateRequest

/**
 * ScimResourceTypeApiGenerated - object-oriented interface
 * @export
 * @class ScimResourceTypeApiGenerated
 * @extends {BaseAPI}
 */
export class ScimResourceTypeApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new SCIM Resource Type to the config
     * @param {ScimResourceTypeApiAddNewConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimResourceTypeApiGenerated
     */
    public addNewConfig(requestParameters: ScimResourceTypeApiAddNewConfigRequest, options?: AxiosRequestConfig) {
        return ScimResourceTypeApiFp(this.configuration).addNewConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a SCIM Resource Type
     * @param {ScimResourceTypeApiDeleteResourceTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimResourceTypeApiGenerated
     */
    public deleteResourceType(requestParameters: ScimResourceTypeApiDeleteResourceTypeRequest, options?: AxiosRequestConfig) {
        return ScimResourceTypeApiFp(this.configuration).deleteResourceType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single SCIM Resource Type
     * @param {ScimResourceTypeApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimResourceTypeApiGenerated
     */
    public getSingle(requestParameters: ScimResourceTypeApiGetSingleRequest, options?: AxiosRequestConfig) {
        return ScimResourceTypeApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all SCIM Resource Type objects
     * @param {ScimResourceTypeApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimResourceTypeApiGenerated
     */
    public listAllObjects(requestParameters: ScimResourceTypeApiListAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return ScimResourceTypeApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing SCIM Resource Type by name
     * @param {ScimResourceTypeApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimResourceTypeApiGenerated
     */
    public updateByName(requestParameters: ScimResourceTypeApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ScimResourceTypeApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
