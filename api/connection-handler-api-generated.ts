/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddConnectionHandler200Response } from '../models';
// @ts-ignore
import { AddConnectionHandlerRequest } from '../models';
// @ts-ignore
import { ConnectionHandlerListResponse } from '../models';
// @ts-ignore
import { EnumconnectionHandlerSslClientAuthPolicyProp } from '../models';
// @ts-ignore
import { EnumhttpConnectionHandlerSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConnectionHandlerApi - axios parameter creator
 * @export
 */
export const ConnectionHandlerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Connection Handler to the config
         * @param {AddConnectionHandlerRequest} addConnectionHandlerRequest Create a new Connection Handler in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig: async (addConnectionHandlerRequest: AddConnectionHandlerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addConnectionHandlerRequest' is not null or undefined
            assertParamExists('addNewConfig', 'addConnectionHandlerRequest', addConnectionHandlerRequest)
            const localVarPath = `/connection-handlers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addConnectionHandlerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connection-handlers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addConnectionHandlerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Connection Handler
         * @param {string} connectionHandlerName Name of the Connection Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHandler: async (connectionHandlerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionHandlerName' is not null or undefined
            assertParamExists('deleteHandler', 'connectionHandlerName', connectionHandlerName)
            const localVarPath = `/connection-handlers/{connection-handler-name}`
                .replace(`{${"connection-handler-name"}}`, encodeURIComponent(String(connectionHandlerName !== undefined ? connectionHandlerName : `-connection-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connection-handlers/{connection-handler-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Connection Handler
         * @param {string} connectionHandlerName Name of the Connection Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (connectionHandlerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionHandlerName' is not null or undefined
            assertParamExists('getSingle', 'connectionHandlerName', connectionHandlerName)
            const localVarPath = `/connection-handlers/{connection-handler-name}`
                .replace(`{${"connection-handler-name"}}`, encodeURIComponent(String(connectionHandlerName !== undefined ? connectionHandlerName : `-connection-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connection-handlers/{connection-handler-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Connection Handler objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/connection-handlers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connection-handlers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Connection Handler by name
         * @param {string} connectionHandlerName Name of the Connection Handler
         * @param {UpdateRequest} updateRequest Update an existing Connection Handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (connectionHandlerName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionHandlerName' is not null or undefined
            assertParamExists('updateByName', 'connectionHandlerName', connectionHandlerName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/connection-handlers/{connection-handler-name}`
                .replace(`{${"connection-handler-name"}}`, encodeURIComponent(String(connectionHandlerName !== undefined ? connectionHandlerName : `-connection-handler-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connection-handlers/{connection-handler-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnectionHandlerApi - functional programming interface
 * @export
 */
export const ConnectionHandlerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConnectionHandlerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Connection Handler to the config
         * @param {ConnectionHandlerApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewConfig(requestParameters: ConnectionHandlerApiAddNewConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddConnectionHandler200Response>> {
            const addConnectionHandlerRequest: AddConnectionHandlerRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewConfig(addConnectionHandlerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Connection Handler
         * @param {ConnectionHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHandler(requestParameters: ConnectionHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHandler(requestParameters.connectionHandlerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Connection Handler
         * @param {ConnectionHandlerApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: ConnectionHandlerApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddConnectionHandler200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.connectionHandlerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Connection Handler objects
         * @param {ConnectionHandlerApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listObjects(requestParameters: ConnectionHandlerApiListObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectionHandlerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Connection Handler by name
         * @param {ConnectionHandlerApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ConnectionHandlerApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddConnectionHandler200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.connectionHandlerName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConnectionHandlerApi - factory interface
 * @export
 */
export const ConnectionHandlerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConnectionHandlerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Connection Handler to the config
         * @param {ConnectionHandlerApiAddNewConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewConfig(requestParameters: ConnectionHandlerApiAddNewConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AddConnectionHandler200Response> {
            return localVarFp.addNewConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Connection Handler
         * @param {ConnectionHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHandler(requestParameters: ConnectionHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Connection Handler
         * @param {ConnectionHandlerApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: ConnectionHandlerApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddConnectionHandler200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Connection Handler objects
         * @param {ConnectionHandlerApiListObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjects(requestParameters: ConnectionHandlerApiListObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ConnectionHandlerListResponse> {
            return localVarFp.listObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Connection Handler by name
         * @param {ConnectionHandlerApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ConnectionHandlerApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddConnectionHandler200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewConfig operation in ConnectionHandlerApi.
 * @export
 * @interface ConnectionHandlerApiAddNewConfigRequest
 */
export type ConnectionHandlerApiAddNewConfigRequest = {
    
} & AddConnectionHandlerRequest

/**
 * Request parameters for deleteHandler operation in ConnectionHandlerApi.
 * @export
 * @interface ConnectionHandlerApiDeleteHandlerRequest
 */
export type ConnectionHandlerApiDeleteHandlerRequest = {
    
    /**
    * Name of the Connection Handler
    * @type {string}
    * @memberof ConnectionHandlerApiDeleteHandler
    */
    readonly connectionHandlerName: string
    
}

/**
 * Request parameters for getSingle operation in ConnectionHandlerApi.
 * @export
 * @interface ConnectionHandlerApiGetSingleRequest
 */
export type ConnectionHandlerApiGetSingleRequest = {
    
    /**
    * Name of the Connection Handler
    * @type {string}
    * @memberof ConnectionHandlerApiGetSingle
    */
    readonly connectionHandlerName: string
    
}

/**
 * Request parameters for listObjects operation in ConnectionHandlerApi.
 * @export
 * @interface ConnectionHandlerApiListObjectsRequest
 */
export type ConnectionHandlerApiListObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ConnectionHandlerApiListObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in ConnectionHandlerApi.
 * @export
 * @interface ConnectionHandlerApiUpdateByNameRequest
 */
export type ConnectionHandlerApiUpdateByNameRequest = {
    
    /**
    * Name of the Connection Handler
    * @type {string}
    * @memberof ConnectionHandlerApiUpdateByName
    */
    readonly connectionHandlerName: string
    
} & UpdateRequest

/**
 * ConnectionHandlerApiGenerated - object-oriented interface
 * @export
 * @class ConnectionHandlerApiGenerated
 * @extends {BaseAPI}
 */
export class ConnectionHandlerApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Connection Handler to the config
     * @param {ConnectionHandlerApiAddNewConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionHandlerApiGenerated
     */
    public addNewConfig(requestParameters: ConnectionHandlerApiAddNewConfigRequest, options?: AxiosRequestConfig) {
        return ConnectionHandlerApiFp(this.configuration).addNewConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Connection Handler
     * @param {ConnectionHandlerApiDeleteHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionHandlerApiGenerated
     */
    public deleteHandler(requestParameters: ConnectionHandlerApiDeleteHandlerRequest, options?: AxiosRequestConfig) {
        return ConnectionHandlerApiFp(this.configuration).deleteHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Connection Handler
     * @param {ConnectionHandlerApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionHandlerApiGenerated
     */
    public getSingle(requestParameters: ConnectionHandlerApiGetSingleRequest, options?: AxiosRequestConfig) {
        return ConnectionHandlerApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Connection Handler objects
     * @param {ConnectionHandlerApiListObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionHandlerApiGenerated
     */
    public listObjects(requestParameters: ConnectionHandlerApiListObjectsRequest = {}, options?: AxiosRequestConfig) {
        return ConnectionHandlerApiFp(this.configuration).listObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Connection Handler by name
     * @param {ConnectionHandlerApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionHandlerApiGenerated
     */
    public updateByName(requestParameters: ConnectionHandlerApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ConnectionHandlerApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
