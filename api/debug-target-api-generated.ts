/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDebugTargetRequest } from '../models';
// @ts-ignore
import { DebugTargetListResponse } from '../models';
// @ts-ignore
import { DebugTargetResponse } from '../models';
// @ts-ignore
import { EnumdebugTargetDebugCategoryProp } from '../models';
// @ts-ignore
import { EnumdebugTargetDebugLevelProp } from '../models';
// @ts-ignore
import { EnumdebugTargetSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DebugTargetApi - axios parameter creator
 * @export
 */
export const DebugTargetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Debug Target to the config
         * @param {string} logPublisherName Name of the Log Publisher
         * @param {AddDebugTargetRequest} addDebugTargetRequest Create a new Debug Target in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewDebugTarget: async (logPublisherName: string, addDebugTargetRequest: AddDebugTargetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logPublisherName' is not null or undefined
            assertParamExists('addNewDebugTarget', 'logPublisherName', logPublisherName)
            // verify required parameter 'addDebugTargetRequest' is not null or undefined
            assertParamExists('addNewDebugTarget', 'addDebugTargetRequest', addDebugTargetRequest)
            const localVarPath = `/log-publishers/{log-publisher-name}/debug-targets`
                .replace(`{${"log-publisher-name"}}`, encodeURIComponent(String(logPublisherName !== undefined ? logPublisherName : `-log-publisher-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addDebugTargetRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-publishers/{log-publisher-name}/debug-targets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addDebugTargetRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Debug Target
         * @param {string} debugTargetName Name of the Debug Target
         * @param {string} logPublisherName Name of the Log Publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDebugTarget: async (debugTargetName: string, logPublisherName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'debugTargetName' is not null or undefined
            assertParamExists('deleteDebugTarget', 'debugTargetName', debugTargetName)
            // verify required parameter 'logPublisherName' is not null or undefined
            assertParamExists('deleteDebugTarget', 'logPublisherName', logPublisherName)
            const localVarPath = `/log-publishers/{log-publisher-name}/debug-targets/{debug-target-name}`
                .replace(`{${"debug-target-name"}}`, encodeURIComponent(String(debugTargetName !== undefined ? debugTargetName : `-debug-target-name-`)))
                .replace(`{${"log-publisher-name"}}`, encodeURIComponent(String(logPublisherName !== undefined ? logPublisherName : `-log-publisher-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-publishers/{log-publisher-name}/debug-targets/{debug-target-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Debug Target
         * @param {string} debugTargetName Name of the Debug Target
         * @param {string} logPublisherName Name of the Log Publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleDebugTarget: async (debugTargetName: string, logPublisherName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'debugTargetName' is not null or undefined
            assertParamExists('getSingleDebugTarget', 'debugTargetName', debugTargetName)
            // verify required parameter 'logPublisherName' is not null or undefined
            assertParamExists('getSingleDebugTarget', 'logPublisherName', logPublisherName)
            const localVarPath = `/log-publishers/{log-publisher-name}/debug-targets/{debug-target-name}`
                .replace(`{${"debug-target-name"}}`, encodeURIComponent(String(debugTargetName !== undefined ? debugTargetName : `-debug-target-name-`)))
                .replace(`{${"log-publisher-name"}}`, encodeURIComponent(String(logPublisherName !== undefined ? logPublisherName : `-log-publisher-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-publishers/{log-publisher-name}/debug-targets/{debug-target-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Debug Target objects
         * @param {string} logPublisherName Name of the Log Publisher
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllDebugTargets: async (logPublisherName: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logPublisherName' is not null or undefined
            assertParamExists('listAllDebugTargets', 'logPublisherName', logPublisherName)
            const localVarPath = `/log-publishers/{log-publisher-name}/debug-targets`
                .replace(`{${"log-publisher-name"}}`, encodeURIComponent(String(logPublisherName !== undefined ? logPublisherName : `-log-publisher-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-publishers/{log-publisher-name}/debug-targets',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Debug Target by name
         * @param {string} debugTargetName Name of the Debug Target
         * @param {string} logPublisherName Name of the Log Publisher
         * @param {UpdateRequest} updateRequest Update an existing Debug Target
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (debugTargetName: string, logPublisherName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'debugTargetName' is not null or undefined
            assertParamExists('updateByName', 'debugTargetName', debugTargetName)
            // verify required parameter 'logPublisherName' is not null or undefined
            assertParamExists('updateByName', 'logPublisherName', logPublisherName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/log-publishers/{log-publisher-name}/debug-targets/{debug-target-name}`
                .replace(`{${"debug-target-name"}}`, encodeURIComponent(String(debugTargetName !== undefined ? debugTargetName : `-debug-target-name-`)))
                .replace(`{${"log-publisher-name"}}`, encodeURIComponent(String(logPublisherName !== undefined ? logPublisherName : `-log-publisher-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-publishers/{log-publisher-name}/debug-targets/{debug-target-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DebugTargetApi - functional programming interface
 * @export
 */
export const DebugTargetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DebugTargetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Debug Target to the config
         * @param {DebugTargetApiAddNewDebugTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewDebugTarget(requestParameters: DebugTargetApiAddNewDebugTargetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DebugTargetResponse>> {
            const addDebugTargetRequest: AddDebugTargetRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewDebugTarget(requestParameters.logPublisherName, addDebugTargetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Debug Target
         * @param {DebugTargetApiDeleteDebugTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDebugTarget(requestParameters: DebugTargetApiDeleteDebugTargetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDebugTarget(requestParameters.debugTargetName, requestParameters.logPublisherName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Debug Target
         * @param {DebugTargetApiGetSingleDebugTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleDebugTarget(requestParameters: DebugTargetApiGetSingleDebugTargetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DebugTargetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleDebugTarget(requestParameters.debugTargetName, requestParameters.logPublisherName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Debug Target objects
         * @param {DebugTargetApiListAllDebugTargetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllDebugTargets(requestParameters: DebugTargetApiListAllDebugTargetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DebugTargetListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllDebugTargets(requestParameters.logPublisherName, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Debug Target by name
         * @param {DebugTargetApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: DebugTargetApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DebugTargetResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.debugTargetName, requestParameters.logPublisherName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DebugTargetApi - factory interface
 * @export
 */
export const DebugTargetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DebugTargetApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Debug Target to the config
         * @param {DebugTargetApiAddNewDebugTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewDebugTarget(requestParameters: DebugTargetApiAddNewDebugTargetRequest, options?: AxiosRequestConfig): AxiosPromise<DebugTargetResponse> {
            return localVarFp.addNewDebugTarget(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Debug Target
         * @param {DebugTargetApiDeleteDebugTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDebugTarget(requestParameters: DebugTargetApiDeleteDebugTargetRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDebugTarget(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Debug Target
         * @param {DebugTargetApiGetSingleDebugTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleDebugTarget(requestParameters: DebugTargetApiGetSingleDebugTargetRequest, options?: AxiosRequestConfig): AxiosPromise<DebugTargetResponse> {
            return localVarFp.getSingleDebugTarget(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Debug Target objects
         * @param {DebugTargetApiListAllDebugTargetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllDebugTargets(requestParameters: DebugTargetApiListAllDebugTargetsRequest, options?: AxiosRequestConfig): AxiosPromise<DebugTargetListResponse> {
            return localVarFp.listAllDebugTargets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Debug Target by name
         * @param {DebugTargetApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: DebugTargetApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<DebugTargetResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewDebugTarget operation in DebugTargetApi.
 * @export
 * @interface DebugTargetApiAddNewDebugTargetRequest
 */
export type DebugTargetApiAddNewDebugTargetRequest = {
    
    /**
    * Name of the Log Publisher
    * @type {string}
    * @memberof DebugTargetApiAddNewDebugTarget
    */
    readonly logPublisherName: string
    
} & AddDebugTargetRequest

/**
 * Request parameters for deleteDebugTarget operation in DebugTargetApi.
 * @export
 * @interface DebugTargetApiDeleteDebugTargetRequest
 */
export type DebugTargetApiDeleteDebugTargetRequest = {
    
    /**
    * Name of the Debug Target
    * @type {string}
    * @memberof DebugTargetApiDeleteDebugTarget
    */
    readonly debugTargetName: string
    
    /**
    * Name of the Log Publisher
    * @type {string}
    * @memberof DebugTargetApiDeleteDebugTarget
    */
    readonly logPublisherName: string
    
}

/**
 * Request parameters for getSingleDebugTarget operation in DebugTargetApi.
 * @export
 * @interface DebugTargetApiGetSingleDebugTargetRequest
 */
export type DebugTargetApiGetSingleDebugTargetRequest = {
    
    /**
    * Name of the Debug Target
    * @type {string}
    * @memberof DebugTargetApiGetSingleDebugTarget
    */
    readonly debugTargetName: string
    
    /**
    * Name of the Log Publisher
    * @type {string}
    * @memberof DebugTargetApiGetSingleDebugTarget
    */
    readonly logPublisherName: string
    
}

/**
 * Request parameters for listAllDebugTargets operation in DebugTargetApi.
 * @export
 * @interface DebugTargetApiListAllDebugTargetsRequest
 */
export type DebugTargetApiListAllDebugTargetsRequest = {
    
    /**
    * Name of the Log Publisher
    * @type {string}
    * @memberof DebugTargetApiListAllDebugTargets
    */
    readonly logPublisherName: string
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof DebugTargetApiListAllDebugTargets
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in DebugTargetApi.
 * @export
 * @interface DebugTargetApiUpdateByNameRequest
 */
export type DebugTargetApiUpdateByNameRequest = {
    
    /**
    * Name of the Debug Target
    * @type {string}
    * @memberof DebugTargetApiUpdateByName
    */
    readonly debugTargetName: string
    
    /**
    * Name of the Log Publisher
    * @type {string}
    * @memberof DebugTargetApiUpdateByName
    */
    readonly logPublisherName: string
    
} & UpdateRequest

/**
 * DebugTargetApiGenerated - object-oriented interface
 * @export
 * @class DebugTargetApiGenerated
 * @extends {BaseAPI}
 */
export class DebugTargetApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Debug Target to the config
     * @param {DebugTargetApiAddNewDebugTargetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugTargetApiGenerated
     */
    public addNewDebugTarget(requestParameters: DebugTargetApiAddNewDebugTargetRequest, options?: AxiosRequestConfig) {
        return DebugTargetApiFp(this.configuration).addNewDebugTarget(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Debug Target
     * @param {DebugTargetApiDeleteDebugTargetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugTargetApiGenerated
     */
    public deleteDebugTarget(requestParameters: DebugTargetApiDeleteDebugTargetRequest, options?: AxiosRequestConfig) {
        return DebugTargetApiFp(this.configuration).deleteDebugTarget(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Debug Target
     * @param {DebugTargetApiGetSingleDebugTargetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugTargetApiGenerated
     */
    public getSingleDebugTarget(requestParameters: DebugTargetApiGetSingleDebugTargetRequest, options?: AxiosRequestConfig) {
        return DebugTargetApiFp(this.configuration).getSingleDebugTarget(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Debug Target objects
     * @param {DebugTargetApiListAllDebugTargetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugTargetApiGenerated
     */
    public listAllDebugTargets(requestParameters: DebugTargetApiListAllDebugTargetsRequest, options?: AxiosRequestConfig) {
        return DebugTargetApiFp(this.configuration).listAllDebugTargets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Debug Target by name
     * @param {DebugTargetApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugTargetApiGenerated
     */
    public updateByName(requestParameters: DebugTargetApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return DebugTargetApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
