/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddSearchEntryCriteria200Response } from '../models';
// @ts-ignore
import { AddSearchEntryCriteriaRequest } from '../models';
// @ts-ignore
import { EnumthirdPartySearchEntryCriteriaSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { SearchEntryCriteriaListResponse } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SearchEntryCriteriaApi - axios parameter creator
 * @export
 */
export const SearchEntryCriteriaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Search Entry Criteria to the config
         * @param {AddSearchEntryCriteriaRequest} addSearchEntryCriteriaRequest Create a new Search Entry Criteria in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCriteria: async (addSearchEntryCriteriaRequest: AddSearchEntryCriteriaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addSearchEntryCriteriaRequest' is not null or undefined
            assertParamExists('addNewCriteria', 'addSearchEntryCriteriaRequest', addSearchEntryCriteriaRequest)
            const localVarPath = `/search-entry-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addSearchEntryCriteriaRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search-entry-criteria',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addSearchEntryCriteriaRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Search Entry Criteria
         * @param {string} searchEntryCriteriaName Name of the Search Entry Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntryCriteria: async (searchEntryCriteriaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchEntryCriteriaName' is not null or undefined
            assertParamExists('deleteEntryCriteria', 'searchEntryCriteriaName', searchEntryCriteriaName)
            const localVarPath = `/search-entry-criteria/{search-entry-criteria-name}`
                .replace(`{${"search-entry-criteria-name"}}`, encodeURIComponent(String(searchEntryCriteriaName !== undefined ? searchEntryCriteriaName : `-search-entry-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search-entry-criteria/{search-entry-criteria-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Search Entry Criteria
         * @param {string} searchEntryCriteriaName Name of the Search Entry Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (searchEntryCriteriaName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchEntryCriteriaName' is not null or undefined
            assertParamExists('getSingle', 'searchEntryCriteriaName', searchEntryCriteriaName)
            const localVarPath = `/search-entry-criteria/{search-entry-criteria-name}`
                .replace(`{${"search-entry-criteria-name"}}`, encodeURIComponent(String(searchEntryCriteriaName !== undefined ? searchEntryCriteriaName : `-search-entry-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search-entry-criteria/{search-entry-criteria-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Search Entry Criteria objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/search-entry-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search-entry-criteria',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Search Entry Criteria by name
         * @param {string} searchEntryCriteriaName Name of the Search Entry Criteria
         * @param {UpdateRequest} updateRequest Update an existing Search Entry Criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (searchEntryCriteriaName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchEntryCriteriaName' is not null or undefined
            assertParamExists('updateByName', 'searchEntryCriteriaName', searchEntryCriteriaName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/search-entry-criteria/{search-entry-criteria-name}`
                .replace(`{${"search-entry-criteria-name"}}`, encodeURIComponent(String(searchEntryCriteriaName !== undefined ? searchEntryCriteriaName : `-search-entry-criteria-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search-entry-criteria/{search-entry-criteria-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchEntryCriteriaApi - functional programming interface
 * @export
 */
export const SearchEntryCriteriaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchEntryCriteriaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Search Entry Criteria to the config
         * @param {SearchEntryCriteriaApiAddNewCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewCriteria(requestParameters: SearchEntryCriteriaApiAddNewCriteriaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddSearchEntryCriteria200Response>> {
            const addSearchEntryCriteriaRequest: AddSearchEntryCriteriaRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewCriteria(addSearchEntryCriteriaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Search Entry Criteria
         * @param {SearchEntryCriteriaApiDeleteEntryCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntryCriteria(requestParameters: SearchEntryCriteriaApiDeleteEntryCriteriaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntryCriteria(requestParameters.searchEntryCriteriaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Search Entry Criteria
         * @param {SearchEntryCriteriaApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: SearchEntryCriteriaApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddSearchEntryCriteria200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.searchEntryCriteriaName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Search Entry Criteria objects
         * @param {SearchEntryCriteriaApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllObjects(requestParameters: SearchEntryCriteriaApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchEntryCriteriaListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Search Entry Criteria by name
         * @param {SearchEntryCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: SearchEntryCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddSearchEntryCriteria200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.searchEntryCriteriaName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchEntryCriteriaApi - factory interface
 * @export
 */
export const SearchEntryCriteriaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchEntryCriteriaApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Search Entry Criteria to the config
         * @param {SearchEntryCriteriaApiAddNewCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCriteria(requestParameters: SearchEntryCriteriaApiAddNewCriteriaRequest, options?: AxiosRequestConfig): AxiosPromise<AddSearchEntryCriteria200Response> {
            return localVarFp.addNewCriteria(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Search Entry Criteria
         * @param {SearchEntryCriteriaApiDeleteEntryCriteriaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntryCriteria(requestParameters: SearchEntryCriteriaApiDeleteEntryCriteriaRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEntryCriteria(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Search Entry Criteria
         * @param {SearchEntryCriteriaApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: SearchEntryCriteriaApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<AddSearchEntryCriteria200Response> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Search Entry Criteria objects
         * @param {SearchEntryCriteriaApiListAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllObjects(requestParameters: SearchEntryCriteriaApiListAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SearchEntryCriteriaListResponse> {
            return localVarFp.listAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Search Entry Criteria by name
         * @param {SearchEntryCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: SearchEntryCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<AddSearchEntryCriteria200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewCriteria operation in SearchEntryCriteriaApi.
 * @export
 * @interface SearchEntryCriteriaApiAddNewCriteriaRequest
 */
export type SearchEntryCriteriaApiAddNewCriteriaRequest = {
    
} & AddSearchEntryCriteriaRequest

/**
 * Request parameters for deleteEntryCriteria operation in SearchEntryCriteriaApi.
 * @export
 * @interface SearchEntryCriteriaApiDeleteEntryCriteriaRequest
 */
export type SearchEntryCriteriaApiDeleteEntryCriteriaRequest = {
    
    /**
    * Name of the Search Entry Criteria
    * @type {string}
    * @memberof SearchEntryCriteriaApiDeleteEntryCriteria
    */
    readonly searchEntryCriteriaName: string
    
}

/**
 * Request parameters for getSingle operation in SearchEntryCriteriaApi.
 * @export
 * @interface SearchEntryCriteriaApiGetSingleRequest
 */
export type SearchEntryCriteriaApiGetSingleRequest = {
    
    /**
    * Name of the Search Entry Criteria
    * @type {string}
    * @memberof SearchEntryCriteriaApiGetSingle
    */
    readonly searchEntryCriteriaName: string
    
}

/**
 * Request parameters for listAllObjects operation in SearchEntryCriteriaApi.
 * @export
 * @interface SearchEntryCriteriaApiListAllObjectsRequest
 */
export type SearchEntryCriteriaApiListAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof SearchEntryCriteriaApiListAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in SearchEntryCriteriaApi.
 * @export
 * @interface SearchEntryCriteriaApiUpdateByNameRequest
 */
export type SearchEntryCriteriaApiUpdateByNameRequest = {
    
    /**
    * Name of the Search Entry Criteria
    * @type {string}
    * @memberof SearchEntryCriteriaApiUpdateByName
    */
    readonly searchEntryCriteriaName: string
    
} & UpdateRequest

/**
 * SearchEntryCriteriaApiGenerated - object-oriented interface
 * @export
 * @class SearchEntryCriteriaApiGenerated
 * @extends {BaseAPI}
 */
export class SearchEntryCriteriaApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Search Entry Criteria to the config
     * @param {SearchEntryCriteriaApiAddNewCriteriaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchEntryCriteriaApiGenerated
     */
    public addNewCriteria(requestParameters: SearchEntryCriteriaApiAddNewCriteriaRequest, options?: AxiosRequestConfig) {
        return SearchEntryCriteriaApiFp(this.configuration).addNewCriteria(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Search Entry Criteria
     * @param {SearchEntryCriteriaApiDeleteEntryCriteriaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchEntryCriteriaApiGenerated
     */
    public deleteEntryCriteria(requestParameters: SearchEntryCriteriaApiDeleteEntryCriteriaRequest, options?: AxiosRequestConfig) {
        return SearchEntryCriteriaApiFp(this.configuration).deleteEntryCriteria(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Search Entry Criteria
     * @param {SearchEntryCriteriaApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchEntryCriteriaApiGenerated
     */
    public getSingle(requestParameters: SearchEntryCriteriaApiGetSingleRequest, options?: AxiosRequestConfig) {
        return SearchEntryCriteriaApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Search Entry Criteria objects
     * @param {SearchEntryCriteriaApiListAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchEntryCriteriaApiGenerated
     */
    public listAllObjects(requestParameters: SearchEntryCriteriaApiListAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return SearchEntryCriteriaApiFp(this.configuration).listAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Search Entry Criteria by name
     * @param {SearchEntryCriteriaApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchEntryCriteriaApiGenerated
     */
    public updateByName(requestParameters: SearchEntryCriteriaApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return SearchEntryCriteriaApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
