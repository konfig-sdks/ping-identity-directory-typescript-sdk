/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddConstructedAttributeRequest } from '../models';
// @ts-ignore
import { ConstructedAttributeListResponse } from '../models';
// @ts-ignore
import { ConstructedAttributeResponse } from '../models';
// @ts-ignore
import { EnumconstructedAttributeSchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConstructedAttributeApi - axios parameter creator
 * @export
 */
export const ConstructedAttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Constructed Attribute to the config
         * @param {AddConstructedAttributeRequest} addConstructedAttributeRequest Create a new Constructed Attribute in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewAttribute: async (addConstructedAttributeRequest: AddConstructedAttributeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addConstructedAttributeRequest' is not null or undefined
            assertParamExists('addNewAttribute', 'addConstructedAttributeRequest', addConstructedAttributeRequest)
            const localVarPath = `/constructed-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addConstructedAttributeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/constructed-attributes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addConstructedAttributeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Constructed Attribute
         * @param {string} constructedAttributeName Name of the Constructed Attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttribute: async (constructedAttributeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'constructedAttributeName' is not null or undefined
            assertParamExists('deleteAttribute', 'constructedAttributeName', constructedAttributeName)
            const localVarPath = `/constructed-attributes/{constructed-attribute-name}`
                .replace(`{${"constructed-attribute-name"}}`, encodeURIComponent(String(constructedAttributeName !== undefined ? constructedAttributeName : `-constructed-attribute-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/constructed-attributes/{constructed-attribute-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Constructed Attribute
         * @param {string} constructedAttributeName Name of the Constructed Attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleAttribute: async (constructedAttributeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'constructedAttributeName' is not null or undefined
            assertParamExists('getSingleAttribute', 'constructedAttributeName', constructedAttributeName)
            const localVarPath = `/constructed-attributes/{constructed-attribute-name}`
                .replace(`{${"constructed-attribute-name"}}`, encodeURIComponent(String(constructedAttributeName !== undefined ? constructedAttributeName : `-constructed-attribute-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/constructed-attributes/{constructed-attribute-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Constructed Attribute objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllAttributes: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/constructed-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/constructed-attributes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Constructed Attribute by name
         * @param {string} constructedAttributeName Name of the Constructed Attribute
         * @param {UpdateRequest} updateRequest Update an existing Constructed Attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (constructedAttributeName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'constructedAttributeName' is not null or undefined
            assertParamExists('updateByName', 'constructedAttributeName', constructedAttributeName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/constructed-attributes/{constructed-attribute-name}`
                .replace(`{${"constructed-attribute-name"}}`, encodeURIComponent(String(constructedAttributeName !== undefined ? constructedAttributeName : `-constructed-attribute-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/constructed-attributes/{constructed-attribute-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConstructedAttributeApi - functional programming interface
 * @export
 */
export const ConstructedAttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConstructedAttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Constructed Attribute to the config
         * @param {ConstructedAttributeApiAddNewAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewAttribute(requestParameters: ConstructedAttributeApiAddNewAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConstructedAttributeResponse>> {
            const addConstructedAttributeRequest: AddConstructedAttributeRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewAttribute(addConstructedAttributeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Constructed Attribute
         * @param {ConstructedAttributeApiDeleteAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttribute(requestParameters: ConstructedAttributeApiDeleteAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttribute(requestParameters.constructedAttributeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Constructed Attribute
         * @param {ConstructedAttributeApiGetSingleAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleAttribute(requestParameters: ConstructedAttributeApiGetSingleAttributeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConstructedAttributeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleAttribute(requestParameters.constructedAttributeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Constructed Attribute objects
         * @param {ConstructedAttributeApiListAllAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllAttributes(requestParameters: ConstructedAttributeApiListAllAttributesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConstructedAttributeListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllAttributes(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Constructed Attribute by name
         * @param {ConstructedAttributeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ConstructedAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConstructedAttributeResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.constructedAttributeName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConstructedAttributeApi - factory interface
 * @export
 */
export const ConstructedAttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConstructedAttributeApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Constructed Attribute to the config
         * @param {ConstructedAttributeApiAddNewAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewAttribute(requestParameters: ConstructedAttributeApiAddNewAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<ConstructedAttributeResponse> {
            return localVarFp.addNewAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Constructed Attribute
         * @param {ConstructedAttributeApiDeleteAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttribute(requestParameters: ConstructedAttributeApiDeleteAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Constructed Attribute
         * @param {ConstructedAttributeApiGetSingleAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleAttribute(requestParameters: ConstructedAttributeApiGetSingleAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<ConstructedAttributeResponse> {
            return localVarFp.getSingleAttribute(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Constructed Attribute objects
         * @param {ConstructedAttributeApiListAllAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllAttributes(requestParameters: ConstructedAttributeApiListAllAttributesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ConstructedAttributeListResponse> {
            return localVarFp.listAllAttributes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Constructed Attribute by name
         * @param {ConstructedAttributeApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ConstructedAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<ConstructedAttributeResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewAttribute operation in ConstructedAttributeApi.
 * @export
 * @interface ConstructedAttributeApiAddNewAttributeRequest
 */
export type ConstructedAttributeApiAddNewAttributeRequest = {
    
} & AddConstructedAttributeRequest

/**
 * Request parameters for deleteAttribute operation in ConstructedAttributeApi.
 * @export
 * @interface ConstructedAttributeApiDeleteAttributeRequest
 */
export type ConstructedAttributeApiDeleteAttributeRequest = {
    
    /**
    * Name of the Constructed Attribute
    * @type {string}
    * @memberof ConstructedAttributeApiDeleteAttribute
    */
    readonly constructedAttributeName: string
    
}

/**
 * Request parameters for getSingleAttribute operation in ConstructedAttributeApi.
 * @export
 * @interface ConstructedAttributeApiGetSingleAttributeRequest
 */
export type ConstructedAttributeApiGetSingleAttributeRequest = {
    
    /**
    * Name of the Constructed Attribute
    * @type {string}
    * @memberof ConstructedAttributeApiGetSingleAttribute
    */
    readonly constructedAttributeName: string
    
}

/**
 * Request parameters for listAllAttributes operation in ConstructedAttributeApi.
 * @export
 * @interface ConstructedAttributeApiListAllAttributesRequest
 */
export type ConstructedAttributeApiListAllAttributesRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ConstructedAttributeApiListAllAttributes
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in ConstructedAttributeApi.
 * @export
 * @interface ConstructedAttributeApiUpdateByNameRequest
 */
export type ConstructedAttributeApiUpdateByNameRequest = {
    
    /**
    * Name of the Constructed Attribute
    * @type {string}
    * @memberof ConstructedAttributeApiUpdateByName
    */
    readonly constructedAttributeName: string
    
} & UpdateRequest

/**
 * ConstructedAttributeApiGenerated - object-oriented interface
 * @export
 * @class ConstructedAttributeApiGenerated
 * @extends {BaseAPI}
 */
export class ConstructedAttributeApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Constructed Attribute to the config
     * @param {ConstructedAttributeApiAddNewAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstructedAttributeApiGenerated
     */
    public addNewAttribute(requestParameters: ConstructedAttributeApiAddNewAttributeRequest, options?: AxiosRequestConfig) {
        return ConstructedAttributeApiFp(this.configuration).addNewAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Constructed Attribute
     * @param {ConstructedAttributeApiDeleteAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstructedAttributeApiGenerated
     */
    public deleteAttribute(requestParameters: ConstructedAttributeApiDeleteAttributeRequest, options?: AxiosRequestConfig) {
        return ConstructedAttributeApiFp(this.configuration).deleteAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Constructed Attribute
     * @param {ConstructedAttributeApiGetSingleAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstructedAttributeApiGenerated
     */
    public getSingleAttribute(requestParameters: ConstructedAttributeApiGetSingleAttributeRequest, options?: AxiosRequestConfig) {
        return ConstructedAttributeApiFp(this.configuration).getSingleAttribute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Constructed Attribute objects
     * @param {ConstructedAttributeApiListAllAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstructedAttributeApiGenerated
     */
    public listAllAttributes(requestParameters: ConstructedAttributeApiListAllAttributesRequest = {}, options?: AxiosRequestConfig) {
        return ConstructedAttributeApiFp(this.configuration).listAllAttributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Constructed Attribute by name
     * @param {ConstructedAttributeApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstructedAttributeApiGenerated
     */
    public updateByName(requestParameters: ConstructedAttributeApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ConstructedAttributeApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
