/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddLogPublisher200Response } from '../models';
// @ts-ignore
import { AddLogPublisherRequest } from '../models';
// @ts-ignore
import { EnumgroovyScriptedHttpOperationLogPublisherSchemaUrn } from '../models';
// @ts-ignore
import { EnumlogPublisherAccessTokenValidatorMessageTypeProp } from '../models';
// @ts-ignore
import { EnumlogPublisherCompressionMechanismProp } from '../models';
// @ts-ignore
import { EnumlogPublisherConsentMessageTypeProp } from '../models';
// @ts-ignore
import { EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp } from '../models';
// @ts-ignore
import { EnumlogPublisherDebugMessageTypeProp } from '../models';
// @ts-ignore
import { EnumlogPublisherDefaultDebugCategoryProp } from '../models';
// @ts-ignore
import { EnumlogPublisherDefaultDebugLevelProp } from '../models';
// @ts-ignore
import { EnumlogPublisherDefaultSeverityProp } from '../models';
// @ts-ignore
import { EnumlogPublisherDirectoryRESTAPIMessageTypeProp } from '../models';
// @ts-ignore
import { EnumlogPublisherExtensionMessageTypeProp } from '../models';
// @ts-ignore
import { EnumlogPublisherHttpMessageTypeProp } from '../models';
// @ts-ignore
import { EnumlogPublisherIdTokenValidatorMessageTypeProp } from '../models';
// @ts-ignore
import { EnumlogPublisherLogRequestHeadersProp } from '../models';
// @ts-ignore
import { EnumlogPublisherLogRequestParametersProp } from '../models';
// @ts-ignore
import { EnumlogPublisherLogResponseHeadersProp } from '../models';
// @ts-ignore
import { EnumlogPublisherLoggingErrorBehaviorProp } from '../models';
// @ts-ignore
import { EnumlogPublisherOutputLocationProp } from '../models';
// @ts-ignore
import { EnumlogPublisherScimMessageTypeProp } from '../models';
// @ts-ignore
import { EnumlogPublisherSyslogFacilityProp } from '../models';
// @ts-ignore
import { EnumlogPublisherSyslogSeverityProp } from '../models';
// @ts-ignore
import { EnumlogPublisherTimestampPrecisionProp } from '../models';
// @ts-ignore
import { GetLogPublisher200Response } from '../models';
// @ts-ignore
import { LogPublisherListResponse } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LogPublisherApi - axios parameter creator
 * @export
 */
export const LogPublisherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Log Publisher to the config
         * @param {AddLogPublisherRequest} addLogPublisherRequest Create a new Log Publisher in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPublisher: async (addLogPublisherRequest: AddLogPublisherRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addLogPublisherRequest' is not null or undefined
            assertParamExists('addNewPublisher', 'addLogPublisherRequest', addLogPublisherRequest)
            const localVarPath = `/log-publishers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addLogPublisherRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-publishers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addLogPublisherRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Log Publisher
         * @param {string} logPublisherName Name of the Log Publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLogPublisher: async (logPublisherName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logPublisherName' is not null or undefined
            assertParamExists('deleteLogPublisher', 'logPublisherName', logPublisherName)
            const localVarPath = `/log-publishers/{log-publisher-name}`
                .replace(`{${"log-publisher-name"}}`, encodeURIComponent(String(logPublisherName !== undefined ? logPublisherName : `-log-publisher-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-publishers/{log-publisher-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Log Publisher
         * @param {string} logPublisherName Name of the Log Publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePublisher: async (logPublisherName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logPublisherName' is not null or undefined
            assertParamExists('getSinglePublisher', 'logPublisherName', logPublisherName)
            const localVarPath = `/log-publishers/{log-publisher-name}`
                .replace(`{${"log-publisher-name"}}`, encodeURIComponent(String(logPublisherName !== undefined ? logPublisherName : `-log-publisher-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-publishers/{log-publisher-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Log Publisher objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogPublishers: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-publishers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-publishers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Log Publisher by name
         * @param {string} logPublisherName Name of the Log Publisher
         * @param {UpdateRequest} updateRequest Update an existing Log Publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (logPublisherName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logPublisherName' is not null or undefined
            assertParamExists('updateByName', 'logPublisherName', logPublisherName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/log-publishers/{log-publisher-name}`
                .replace(`{${"log-publisher-name"}}`, encodeURIComponent(String(logPublisherName !== undefined ? logPublisherName : `-log-publisher-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/log-publishers/{log-publisher-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogPublisherApi - functional programming interface
 * @export
 */
export const LogPublisherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogPublisherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Log Publisher to the config
         * @param {LogPublisherApiAddNewPublisherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewPublisher(requestParameters: LogPublisherApiAddNewPublisherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddLogPublisher200Response>> {
            const addLogPublisherRequest: AddLogPublisherRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewPublisher(addLogPublisherRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Log Publisher
         * @param {LogPublisherApiDeleteLogPublisherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLogPublisher(requestParameters: LogPublisherApiDeleteLogPublisherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLogPublisher(requestParameters.logPublisherName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Log Publisher
         * @param {LogPublisherApiGetSinglePublisherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSinglePublisher(requestParameters: LogPublisherApiGetSinglePublisherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLogPublisher200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSinglePublisher(requestParameters.logPublisherName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Log Publisher objects
         * @param {LogPublisherApiListLogPublishersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLogPublishers(requestParameters: LogPublisherApiListLogPublishersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogPublisherListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLogPublishers(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Log Publisher by name
         * @param {LogPublisherApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: LogPublisherApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLogPublisher200Response>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.logPublisherName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogPublisherApi - factory interface
 * @export
 */
export const LogPublisherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogPublisherApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Log Publisher to the config
         * @param {LogPublisherApiAddNewPublisherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPublisher(requestParameters: LogPublisherApiAddNewPublisherRequest, options?: AxiosRequestConfig): AxiosPromise<AddLogPublisher200Response> {
            return localVarFp.addNewPublisher(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Log Publisher
         * @param {LogPublisherApiDeleteLogPublisherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLogPublisher(requestParameters: LogPublisherApiDeleteLogPublisherRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteLogPublisher(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Log Publisher
         * @param {LogPublisherApiGetSinglePublisherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePublisher(requestParameters: LogPublisherApiGetSinglePublisherRequest, options?: AxiosRequestConfig): AxiosPromise<GetLogPublisher200Response> {
            return localVarFp.getSinglePublisher(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Log Publisher objects
         * @param {LogPublisherApiListLogPublishersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogPublishers(requestParameters: LogPublisherApiListLogPublishersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LogPublisherListResponse> {
            return localVarFp.listLogPublishers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Log Publisher by name
         * @param {LogPublisherApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: LogPublisherApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<GetLogPublisher200Response> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewPublisher operation in LogPublisherApi.
 * @export
 * @interface LogPublisherApiAddNewPublisherRequest
 */
export type LogPublisherApiAddNewPublisherRequest = {
    
} & AddLogPublisherRequest

/**
 * Request parameters for deleteLogPublisher operation in LogPublisherApi.
 * @export
 * @interface LogPublisherApiDeleteLogPublisherRequest
 */
export type LogPublisherApiDeleteLogPublisherRequest = {
    
    /**
    * Name of the Log Publisher
    * @type {string}
    * @memberof LogPublisherApiDeleteLogPublisher
    */
    readonly logPublisherName: string
    
}

/**
 * Request parameters for getSinglePublisher operation in LogPublisherApi.
 * @export
 * @interface LogPublisherApiGetSinglePublisherRequest
 */
export type LogPublisherApiGetSinglePublisherRequest = {
    
    /**
    * Name of the Log Publisher
    * @type {string}
    * @memberof LogPublisherApiGetSinglePublisher
    */
    readonly logPublisherName: string
    
}

/**
 * Request parameters for listLogPublishers operation in LogPublisherApi.
 * @export
 * @interface LogPublisherApiListLogPublishersRequest
 */
export type LogPublisherApiListLogPublishersRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof LogPublisherApiListLogPublishers
    */
    readonly filter?: string
    
}

/**
 * Request parameters for updateByName operation in LogPublisherApi.
 * @export
 * @interface LogPublisherApiUpdateByNameRequest
 */
export type LogPublisherApiUpdateByNameRequest = {
    
    /**
    * Name of the Log Publisher
    * @type {string}
    * @memberof LogPublisherApiUpdateByName
    */
    readonly logPublisherName: string
    
} & UpdateRequest

/**
 * LogPublisherApiGenerated - object-oriented interface
 * @export
 * @class LogPublisherApiGenerated
 * @extends {BaseAPI}
 */
export class LogPublisherApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Log Publisher to the config
     * @param {LogPublisherApiAddNewPublisherRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogPublisherApiGenerated
     */
    public addNewPublisher(requestParameters: LogPublisherApiAddNewPublisherRequest, options?: AxiosRequestConfig) {
        return LogPublisherApiFp(this.configuration).addNewPublisher(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Log Publisher
     * @param {LogPublisherApiDeleteLogPublisherRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogPublisherApiGenerated
     */
    public deleteLogPublisher(requestParameters: LogPublisherApiDeleteLogPublisherRequest, options?: AxiosRequestConfig) {
        return LogPublisherApiFp(this.configuration).deleteLogPublisher(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Log Publisher
     * @param {LogPublisherApiGetSinglePublisherRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogPublisherApiGenerated
     */
    public getSinglePublisher(requestParameters: LogPublisherApiGetSinglePublisherRequest, options?: AxiosRequestConfig) {
        return LogPublisherApiFp(this.configuration).getSinglePublisher(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Log Publisher objects
     * @param {LogPublisherApiListLogPublishersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogPublisherApiGenerated
     */
    public listLogPublishers(requestParameters: LogPublisherApiListLogPublishersRequest = {}, options?: AxiosRequestConfig) {
        return LogPublisherApiFp(this.configuration).listLogPublishers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Log Publisher by name
     * @param {LogPublisherApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogPublisherApiGenerated
     */
    public updateByName(requestParameters: LogPublisherApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return LogPublisherApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
