/* tslint:disable */
/* eslint-disable */
/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddClientConnectionPolicyRequest } from '../models';
// @ts-ignore
import { ClientConnectionPolicyListResponse } from '../models';
// @ts-ignore
import { ClientConnectionPolicyResponse } from '../models';
// @ts-ignore
import { EnumclientConnectionPolicyAllowedAuthTypeProp } from '../models';
// @ts-ignore
import { EnumclientConnectionPolicyAllowedFilterTypeProp } from '../models';
// @ts-ignore
import { EnumclientConnectionPolicyAllowedOperationProp } from '../models';
// @ts-ignore
import { EnumclientConnectionPolicyConnectionOperationRateExceededBehaviorProp } from '../models';
// @ts-ignore
import { EnumclientConnectionPolicyMaximumConcurrentOperationsPerConnectionExceededBehaviorProp } from '../models';
// @ts-ignore
import { EnumclientConnectionPolicyPolicyOperationRateExceededBehaviorProp } from '../models';
// @ts-ignore
import { EnumclientConnectionPolicySchemaUrn } from '../models';
// @ts-ignore
import { Operation } from '../models';
// @ts-ignore
import { UpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ClientConnectionPolicyApi - axios parameter creator
 * @export
 */
export const ClientConnectionPolicyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Client Connection Policy to the config
         * @param {AddClientConnectionPolicyRequest} addClientConnectionPolicyRequest Create a new Client Connection Policy in the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPolicy: async (addClientConnectionPolicyRequest: AddClientConnectionPolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addClientConnectionPolicyRequest' is not null or undefined
            assertParamExists('addNewPolicy', 'addClientConnectionPolicyRequest', addClientConnectionPolicyRequest)
            const localVarPath = `/client-connection-policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addClientConnectionPolicyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/client-connection-policies',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addClientConnectionPolicyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Client Connection Policy
         * @param {string} clientConnectionPolicyName Name of the Client Connection Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (clientConnectionPolicyName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientConnectionPolicyName' is not null or undefined
            assertParamExists('deleteById', 'clientConnectionPolicyName', clientConnectionPolicyName)
            const localVarPath = `/client-connection-policies/{client-connection-policy-name}`
                .replace(`{${"client-connection-policy-name"}}`, encodeURIComponent(String(clientConnectionPolicyName !== undefined ? clientConnectionPolicyName : `-client-connection-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/client-connection-policies/{client-connection-policy-name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all Client Connection Policy objects
         * @param {string} [filter] SCIM filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/client-connection-policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/client-connection-policies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a single Client Connection Policy
         * @param {string} clientConnectionPolicyName Name of the Client Connection Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (clientConnectionPolicyName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientConnectionPolicyName' is not null or undefined
            assertParamExists('getSingle', 'clientConnectionPolicyName', clientConnectionPolicyName)
            const localVarPath = `/client-connection-policies/{client-connection-policy-name}`
                .replace(`{${"client-connection-policy-name"}}`, encodeURIComponent(String(clientConnectionPolicyName !== undefined ? clientConnectionPolicyName : `-client-connection-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/client-connection-policies/{client-connection-policy-name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Client Connection Policy by name
         * @param {string} clientConnectionPolicyName Name of the Client Connection Policy
         * @param {UpdateRequest} updateRequest Update an existing Client Connection Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName: async (clientConnectionPolicyName: string, updateRequest: UpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientConnectionPolicyName' is not null or undefined
            assertParamExists('updateByName', 'clientConnectionPolicyName', clientConnectionPolicyName)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateByName', 'updateRequest', updateRequest)
            const localVarPath = `/client-connection-policies/{client-connection-policy-name}`
                .replace(`{${"client-connection-policy-name"}}`, encodeURIComponent(String(clientConnectionPolicyName !== undefined ? clientConnectionPolicyName : `-client-connection-policy-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/client-connection-policies/{client-connection-policy-name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientConnectionPolicyApi - functional programming interface
 * @export
 */
export const ClientConnectionPolicyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientConnectionPolicyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Client Connection Policy to the config
         * @param {ClientConnectionPolicyApiAddNewPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewPolicy(requestParameters: ClientConnectionPolicyApiAddNewPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientConnectionPolicyResponse>> {
            const addClientConnectionPolicyRequest: AddClientConnectionPolicyRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewPolicy(addClientConnectionPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Client Connection Policy
         * @param {ClientConnectionPolicyApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: ClientConnectionPolicyApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.clientConnectionPolicyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of all Client Connection Policy objects
         * @param {ClientConnectionPolicyApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllObjects(requestParameters: ClientConnectionPolicyApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientConnectionPolicyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllObjects(requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a single Client Connection Policy
         * @param {ClientConnectionPolicyApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: ClientConnectionPolicyApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientConnectionPolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.clientConnectionPolicyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing Client Connection Policy by name
         * @param {ClientConnectionPolicyApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByName(requestParameters: ClientConnectionPolicyApiUpdateByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientConnectionPolicyResponse>> {
            const updateRequest: UpdateRequest = {
                operations: requestParameters.operations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByName(requestParameters.clientConnectionPolicyName, updateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientConnectionPolicyApi - factory interface
 * @export
 */
export const ClientConnectionPolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientConnectionPolicyApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Client Connection Policy to the config
         * @param {ClientConnectionPolicyApiAddNewPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPolicy(requestParameters: ClientConnectionPolicyApiAddNewPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<ClientConnectionPolicyResponse> {
            return localVarFp.addNewPolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Client Connection Policy
         * @param {ClientConnectionPolicyApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: ClientConnectionPolicyApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of all Client Connection Policy objects
         * @param {ClientConnectionPolicyApiGetAllObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllObjects(requestParameters: ClientConnectionPolicyApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ClientConnectionPolicyListResponse> {
            return localVarFp.getAllObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a single Client Connection Policy
         * @param {ClientConnectionPolicyApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: ClientConnectionPolicyApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<ClientConnectionPolicyResponse> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Client Connection Policy by name
         * @param {ClientConnectionPolicyApiUpdateByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByName(requestParameters: ClientConnectionPolicyApiUpdateByNameRequest, options?: AxiosRequestConfig): AxiosPromise<ClientConnectionPolicyResponse> {
            return localVarFp.updateByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewPolicy operation in ClientConnectionPolicyApi.
 * @export
 * @interface ClientConnectionPolicyApiAddNewPolicyRequest
 */
export type ClientConnectionPolicyApiAddNewPolicyRequest = {
    
} & AddClientConnectionPolicyRequest

/**
 * Request parameters for deleteById operation in ClientConnectionPolicyApi.
 * @export
 * @interface ClientConnectionPolicyApiDeleteByIdRequest
 */
export type ClientConnectionPolicyApiDeleteByIdRequest = {
    
    /**
    * Name of the Client Connection Policy
    * @type {string}
    * @memberof ClientConnectionPolicyApiDeleteById
    */
    readonly clientConnectionPolicyName: string
    
}

/**
 * Request parameters for getAllObjects operation in ClientConnectionPolicyApi.
 * @export
 * @interface ClientConnectionPolicyApiGetAllObjectsRequest
 */
export type ClientConnectionPolicyApiGetAllObjectsRequest = {
    
    /**
    * SCIM filter
    * @type {string}
    * @memberof ClientConnectionPolicyApiGetAllObjects
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getSingle operation in ClientConnectionPolicyApi.
 * @export
 * @interface ClientConnectionPolicyApiGetSingleRequest
 */
export type ClientConnectionPolicyApiGetSingleRequest = {
    
    /**
    * Name of the Client Connection Policy
    * @type {string}
    * @memberof ClientConnectionPolicyApiGetSingle
    */
    readonly clientConnectionPolicyName: string
    
}

/**
 * Request parameters for updateByName operation in ClientConnectionPolicyApi.
 * @export
 * @interface ClientConnectionPolicyApiUpdateByNameRequest
 */
export type ClientConnectionPolicyApiUpdateByNameRequest = {
    
    /**
    * Name of the Client Connection Policy
    * @type {string}
    * @memberof ClientConnectionPolicyApiUpdateByName
    */
    readonly clientConnectionPolicyName: string
    
} & UpdateRequest

/**
 * ClientConnectionPolicyApiGenerated - object-oriented interface
 * @export
 * @class ClientConnectionPolicyApiGenerated
 * @extends {BaseAPI}
 */
export class ClientConnectionPolicyApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add a new Client Connection Policy to the config
     * @param {ClientConnectionPolicyApiAddNewPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientConnectionPolicyApiGenerated
     */
    public addNewPolicy(requestParameters: ClientConnectionPolicyApiAddNewPolicyRequest, options?: AxiosRequestConfig) {
        return ClientConnectionPolicyApiFp(this.configuration).addNewPolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Client Connection Policy
     * @param {ClientConnectionPolicyApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientConnectionPolicyApiGenerated
     */
    public deleteById(requestParameters: ClientConnectionPolicyApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return ClientConnectionPolicyApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of all Client Connection Policy objects
     * @param {ClientConnectionPolicyApiGetAllObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientConnectionPolicyApiGenerated
     */
    public getAllObjects(requestParameters: ClientConnectionPolicyApiGetAllObjectsRequest = {}, options?: AxiosRequestConfig) {
        return ClientConnectionPolicyApiFp(this.configuration).getAllObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a single Client Connection Policy
     * @param {ClientConnectionPolicyApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientConnectionPolicyApiGenerated
     */
    public getSingle(requestParameters: ClientConnectionPolicyApiGetSingleRequest, options?: AxiosRequestConfig) {
        return ClientConnectionPolicyApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Client Connection Policy by name
     * @param {ClientConnectionPolicyApiUpdateByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientConnectionPolicyApiGenerated
     */
    public updateByName(requestParameters: ClientConnectionPolicyApiUpdateByNameRequest, options?: AxiosRequestConfig) {
        return ClientConnectionPolicyApiFp(this.configuration).updateByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
