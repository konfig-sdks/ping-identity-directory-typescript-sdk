/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { EnumfileBasedJsonSyncLogPublisherSchemaUrn } from './enumfile-based-json-sync-log-publisher-schema-urn';
import { EnumlogPublisherCompressionMechanismProp } from './enumlog-publisher-compression-mechanism-prop';
import { EnumlogPublisherLoggedMessageTypeProp } from './enumlog-publisher-logged-message-type-prop';
import { EnumlogPublisherLoggingErrorBehaviorProp } from './enumlog-publisher-logging-error-behavior-prop';

/**
 * 
 * @export
 * @interface FileBasedJsonSyncLogPublisherResponseAllOf
 */
export interface FileBasedJsonSyncLogPublisherResponseAllOf {
    /**
     * A description for this Log Publisher
     * @type {string}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'description'?: string;
    /**
     * 
     * @type {Array<EnumfileBasedJsonSyncLogPublisherSchemaUrn>}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'schemas'?: Array<EnumfileBasedJsonSyncLogPublisherSchemaUrn>;
    /**
     * Name of the Log Publisher
     * @type {string}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'id'?: string;
    /**
     * The file name to use for the log files generated by the File Based JSON Sync Log Publisher. The path to the file can be specified either as relative to the server root or as an absolute path.
     * @type {string}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'logFile'?: string;
    /**
     * The UNIX permissions of the log files created by this File Based JSON Sync Log Publisher.
     * @type {string}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'logFilePermissions'?: string;
    /**
     * The rotation policy to use for the File Based JSON Sync Log Publisher .
     * @type {Array<string>}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'rotationPolicy'?: Array<string>;
    /**
     * A listener that should be notified whenever a log file is rotated out of service.
     * @type {Array<string>}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'rotationListener'?: Array<string>;
    /**
     * The retention policy to use for the File Based JSON Sync Log Publisher .
     * @type {Array<string>}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'retentionPolicy'?: Array<string>;
    /**
     * Specifies the type of compression (if any) to use for log files that are written.
     * @type {EnumlogPublisherCompressionMechanismProp}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'compressionMechanism'?: EnumlogPublisherCompressionMechanismProp;
    /**
     * Indicates whether the log should be cryptographically signed so that the log content cannot be altered in an undetectable manner.
     * @type {boolean}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'signLog'?: boolean;
    /**
     * Indicates whether log files should be encrypted so that their content is not available to unauthorized users.
     * @type {boolean}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'encryptLog'?: boolean;
    /**
     * Specifies the ID of the encryption settings definition that should be used to encrypt the data. If this is not provided, the server\'s preferred encryption settings definition will be used. The \"encryption-settings list\" command can be used to obtain a list of the encryption settings definitions available in the server.
     * @type {string}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'encryptionSettingsDefinitionID'?: string;
    /**
     * Specifies whether to append to existing log files.
     * @type {boolean}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'append'?: boolean;
    /**
     * Indicates whether the File Based JSON Sync Log Publisher will publish records asynchronously.
     * @type {boolean}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'asynchronous'?: boolean;
    /**
     * Specifies whether to flush the writer after every log record.
     * @type {boolean}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'autoFlush'?: boolean;
    /**
     * Specifies the log file buffer size.
     * @type {string}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'bufferSize'?: string;
    /**
     * The maximum number of log records that can be stored in the asynchronous queue.
     * @type {number}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'queueSize'?: number;
    /**
     * Specifies the interval at which to check whether the log files need to be rotated.
     * @type {string}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'timeInterval'?: string;
    /**
     * Indicates whether the JSON objects should use a multi-line representation (with each object field and array value on its own line) that may be easier for administrators to read, but each message will be larger (because of additional spaces and end-of-line markers), and it may be more difficult to consume and parse through some text-oriented tools.
     * @type {boolean}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'writeMultiLineMessages'?: boolean;
    /**
     * Indicates whether log messages should include the product name for the Directory Server.
     * @type {boolean}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'includeProductName'?: boolean;
    /**
     * Indicates whether log messages should include the instance name for the Directory Server.
     * @type {boolean}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'includeInstanceName'?: boolean;
    /**
     * Indicates whether log messages should include the startup ID for the Directory Server, which is a value assigned to the server instance at startup and may be used to identify when the server has been restarted.
     * @type {boolean}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'includeStartupID'?: boolean;
    /**
     * Indicates whether log messages should include the thread ID for the Directory Server in each log message. This ID can be used to correlate log messages from the same thread within a single log as well as generated by the same thread across different types of log files. More information about the thread with a specific ID can be obtained using the cn=JVM Stack Trace,cn=monitor entry.
     * @type {boolean}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'includeThreadID'?: boolean;
    /**
     * Specifies which Sync Pipes can log messages to this Sync Log Publisher.
     * @type {Array<string>}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'includeSyncPipe'?: Array<string>;
    /**
     * 
     * @type {Array<EnumlogPublisherLoggedMessageTypeProp>}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'loggedMessageType'?: Array<EnumlogPublisherLoggedMessageTypeProp>;
    /**
     * Indicates whether the Log Publisher is enabled for use.
     * @type {boolean}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'enabled'?: boolean;
    /**
     * Specifies the behavior that the server should exhibit if an error occurs during logging processing.
     * @type {EnumlogPublisherLoggingErrorBehaviorProp}
     * @memberof FileBasedJsonSyncLogPublisherResponseAllOf
     */
    'loggingErrorBehavior'?: EnumlogPublisherLoggingErrorBehaviorProp;
}

