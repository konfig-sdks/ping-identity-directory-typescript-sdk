/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { EnumreplicationAssurancePolicyLocalLevelProp } from './enumreplication-assurance-policy-local-level-prop';
import { EnumreplicationAssurancePolicyRemoteLevelProp } from './enumreplication-assurance-policy-remote-level-prop';
import { EnumreplicationAssurancePolicySchemaUrn } from './enumreplication-assurance-policy-schema-urn';

/**
 * 
 * @export
 * @interface ReplicationAssurancePolicyShared
 */
export interface ReplicationAssurancePolicyShared {
    /**
     * Description of the Replication Assurance Policy.
     * @type {string}
     * @memberof ReplicationAssurancePolicyShared
     */
    'description'?: string;
    /**
     * 
     * @type {Array<EnumreplicationAssurancePolicySchemaUrn>}
     * @memberof ReplicationAssurancePolicyShared
     */
    'schemas'?: Array<EnumreplicationAssurancePolicySchemaUrn>;
    /**
     * Indicates whether this Replication Assurance Policy is enabled for use in the server. If a Replication Assurance Policy is disabled, then no new operations will be associated with it.
     * @type {boolean}
     * @memberof ReplicationAssurancePolicyShared
     */
    'enabled'?: boolean;
    /**
     * When multiple Replication Assurance Policies are defined, this property determines the evaluation order for finding a Replication Assurance Policy match against an operation. Policies are evaluated based on this index from least to greatest. Values of this property must be unique but not necessarily contiguous.
     * @type {number}
     * @memberof ReplicationAssurancePolicyShared
     */
    'evaluationOrderIndex': number;
    /**
     * Specifies the assurance level used to replicate to local servers. A local server is defined as one with the same value for the location setting in the global configuration.  The local-level must be set to an assurance level at least as strict as the remote-level. In other words, if remote-level is set to \"received-any-remote-location\" or \"received-all-remote-locations\", then local-level must be either \"received-any-server\" or \"processed-all-servers\". If remote-level is \"processed-all-remote-servers\", then local-level must be \"processed-all-servers\".
     * @type {EnumreplicationAssurancePolicyLocalLevelProp}
     * @memberof ReplicationAssurancePolicyShared
     */
    'localLevel'?: EnumreplicationAssurancePolicyLocalLevelProp;
    /**
     * Specifies the assurance level used to replicate to remote servers. A remote server is defined as one with a different value for the location setting in the global configuration.
     * @type {EnumreplicationAssurancePolicyRemoteLevelProp}
     * @memberof ReplicationAssurancePolicyShared
     */
    'remoteLevel'?: EnumreplicationAssurancePolicyRemoteLevelProp;
    /**
     * Specifies the maximum length of time to wait for the replication assurance requirements to be met before timing out and replying to the client.
     * @type {string}
     * @memberof ReplicationAssurancePolicyShared
     */
    'timeout': string;
    /**
     * Specifies a connection criteria used to indicate which operations from clients matching this criteria use this policy. If both a connection criteria and a request criteria are specified for a policy, then both must match an operation for the policy to be assigned.
     * @type {string}
     * @memberof ReplicationAssurancePolicyShared
     */
    'connectionCriteria'?: string;
    /**
     * Specifies a request criteria used to indicate which operations from clients matching this criteria use this policy. If both a connection criteria and a request criteria are specified for a policy, then both must match an operation for the policy to be assigned.
     * @type {string}
     * @memberof ReplicationAssurancePolicyShared
     */
    'requestCriteria'?: string;
}

