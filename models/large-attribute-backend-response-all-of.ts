/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { EnumbackendDefaultCacheModeProp } from './enumbackend-default-cache-mode-prop';
import { EnumbackendDn2idCacheModeProp } from './enumbackend-dn2id-cache-mode-prop';
import { EnumbackendDn2uriCacheModeProp } from './enumbackend-dn2uri-cache-mode-prop';
import { EnumbackendExternalTxnDefaultBackendLockBehaviorProp } from './enumbackend-external-txn-default-backend-lock-behavior-prop';
import { EnumbackendId2childrenCacheModeProp } from './enumbackend-id2children-cache-mode-prop';
import { EnumbackendId2entryCacheModeProp } from './enumbackend-id2entry-cache-mode-prop';
import { EnumbackendId2subtreeCacheModeProp } from './enumbackend-id2subtree-cache-mode-prop';
import { EnumbackendPrimeMethodProp } from './enumbackend-prime-method-prop';
import { EnumbackendSingleWriterLockBehaviorProp } from './enumbackend-single-writer-lock-behavior-prop';
import { EnumbackendSystemIndexToPrimeInternalNodesOnlyProp } from './enumbackend-system-index-to-prime-internal-nodes-only-prop';
import { EnumbackendSystemIndexToPrimeProp } from './enumbackend-system-index-to-prime-prop';
import { EnumbackendWritabilityModeProp } from './enumbackend-writability-mode-prop';
import { EnumlargeAttributeBackendSchemaUrn } from './enumlarge-attribute-backend-schema-urn';

/**
 * 
 * @export
 * @interface LargeAttributeBackendResponseAllOf
 */
export interface LargeAttributeBackendResponseAllOf {
    /**
     * A description for this Backend
     * @type {string}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'description'?: string;
    /**
     * 
     * @type {Array<EnumlargeAttributeBackendSchemaUrn>}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'schemas'?: Array<EnumlargeAttributeBackendSchemaUrn>;
    /**
     * Name of the Backend
     * @type {string}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'id'?: string;
    /**
     * Indicates whether the backend is enabled in the server.
     * @type {boolean}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'enabled'?: boolean;
    /**
     * Specifies the base DN(s) for the data that the backend handles.
     * @type {Array<string>}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'baseDN'?: Array<string>;
    /**
     * Specifies the behavior that the backend should use when processing write operations.
     * @type {EnumbackendWritabilityModeProp}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'writabilityMode'?: EnumbackendWritabilityModeProp;
    /**
     * Indicates whether this backend should be considered a private backend in the server. Private backends are meant for storing server-internal information and should not be used for user or application data.
     * @type {boolean}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'isPrivateBackend'?: boolean;
    /**
     * Specifies the percentage of JVM memory to allocate to the database cache.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dbCachePercent'?: number;
    /**
     * Specifies the cache mode that should be used for any database for which the cache mode is not explicitly specified. This includes the id2entry database, which stores encoded entries, and all attribute indexes.
     * @type {EnumbackendDefaultCacheModeProp}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'defaultCacheMode'?: EnumbackendDefaultCacheModeProp;
    /**
     * Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files containing the data for this backend. The files for this backend are stored in a sub-directory named after the backend-id.
     * @type {string}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dbDirectory'?: string;
    /**
     * Specifies the permissions that should be applied to the directory containing the backend database files and to directories and files created during backup or LDIF export of the backend.
     * @type {string}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dbDirectoryPermissions'?: string;
    /**
     * Provides a DN of an entry that may be the parent for a large number of entries in the backend. This may be used to help increase the space efficiency when encoding entries for storage.
     * @type {Array<string>}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'compactCommonParentDN'?: Array<string>;
    /**
     * Indicates whether the backend should attempt to compress entries before storing them in the database.
     * @type {boolean}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'compressEntries'?: boolean;
    /**
     * Indicates whether to calculate and store a message digest of the entry contents along with the entry data, in order to provide a means of verifying the integrity of the entry data.
     * @type {boolean}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'hashEntries'?: boolean;
    /**
     * Specifies the number of threads that the backend should maintain to keep the database log files at or near the desired utilization. A value of zero indicates that the number of cleaner threads should be automatically configured based on the number of available CPUs.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dbNumCleanerThreads'?: number;
    /**
     * Specifies the minimum percentage of \"live\" data that the database cleaner attempts to keep in database log files.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dbCleanerMinUtilization'?: number;
    /**
     * Specifies the percentage over the configured maximum that the database cache is allowed to grow. It is recommended to set this value slightly above zero when the database is too large to fully cache in memory. In this case, a dedicated background evictor thread is used to perform evictions once the cache fills up reducing the possibility that server threads are blocked.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dbEvictorCriticalPercentage'?: number;
    /**
     * Specifies the maximum length of time that should pass between checkpoints.
     * @type {string}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dbCheckpointerWakeupInterval'?: string;
    /**
     * Specifies the interval to use when performing background synchronous writes in the database environment in order to smooth overall write performance and increase data durability. A value of \"0 s\" will disable background synchronous writes.
     * @type {string}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dbBackgroundSyncInterval'?: string;
    /**
     * Indicates whether to use thread-local database handles to reduce contention in the backend.
     * @type {boolean}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dbUseThreadLocalHandles'?: boolean;
    /**
     * Specifies the maximum size for a database log file.
     * @type {string}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dbLogFileMax'?: string;
    /**
     * Specifies the log level that should be used by the database when it is writing information into the je.info file.
     * @type {string}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dbLoggingLevel'?: string;
    /**
     * Specifies the database and environment properties for the Berkeley DB Java Edition database serving the data for this backend.
     * @type {Array<string>}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'jeProperty'?: Array<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the id2entry database, which provides a mapping between entry IDs and entry contents. Consider configuring uncached entries or uncached attributes in lieu of changing from the \"cache-keys-and-values\" default value.
     * @type {EnumbackendId2entryCacheModeProp}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'id2entryCacheMode'?: EnumbackendId2entryCacheModeProp;
    /**
     * Specifies the cache mode that should be used when accessing the records in the dn2id database, which provides a mapping between normalized entry DNs and the corresponding entry IDs.
     * @type {EnumbackendDn2idCacheModeProp}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dn2idCacheMode'?: EnumbackendDn2idCacheModeProp;
    /**
     * Specifies the cache mode that should be used when accessing the records in the id2children database, which provides a mapping between the entry ID of a particular entry and the entry IDs of all of its immediate children. This index may be used when performing searches with a single-level scope if the search filter cannot be resolved to a small enough candidate list. The size of this database directly depends on the number of entries that have children.
     * @type {EnumbackendId2childrenCacheModeProp}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'id2childrenCacheMode'?: EnumbackendId2childrenCacheModeProp;
    /**
     * Specifies the cache mode that should be used when accessing the records in the id2subtree database, which provides a mapping between the entry ID of a particular entry and the entry IDs of all of its children to any depth. This index may be used when performing searches with a whole-subtree or subordinate-subtree scope if the search filter cannot be resolved to a small enough candidate list. The size of this database directly depends on the number of entries that have children.
     * @type {EnumbackendId2subtreeCacheModeProp}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'id2subtreeCacheMode'?: EnumbackendId2subtreeCacheModeProp;
    /**
     * Specifies the cache mode that should be used when accessing the records in the dn2uri database, which provides a mapping between a normalized entry DN and a set of referral URLs contained in the associated smart referral entry.
     * @type {EnumbackendDn2uriCacheModeProp}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dn2uriCacheMode'?: EnumbackendDn2uriCacheModeProp;
    /**
     * 
     * @type {Array<EnumbackendPrimeMethodProp>}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'primeMethod'?: Array<EnumbackendPrimeMethodProp>;
    /**
     * Specifies the number of threads to use when priming. At present, this applies only to the preload and cursor-across-indexes prime methods.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'primeThreadCount'?: number;
    /**
     * Specifies the maximum length of time that the backend prime should be allowed to run. A duration of zero seconds indicates that there should not be a time limit.
     * @type {string}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'primeTimeLimit'?: string;
    /**
     * Indicates whether to prime all indexes associated with this backend, or to only prime the specified set of indexes (as configured with the system-index-to-prime property for the system indexes, and the prime-index property in the attribute index definition for attribute indexes).
     * @type {boolean}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'primeAllIndexes'?: boolean;
    /**
     * 
     * @type {Array<EnumbackendSystemIndexToPrimeProp>}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'systemIndexToPrime'?: Array<EnumbackendSystemIndexToPrimeProp>;
    /**
     * 
     * @type {Array<EnumbackendSystemIndexToPrimeInternalNodesOnlyProp>}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'systemIndexToPrimeInternalNodesOnly'?: Array<EnumbackendSystemIndexToPrimeInternalNodesOnlyProp>;
    /**
     * Indicates whether to attempt to perform the prime using a background thread if possible. If background priming is enabled, then the Directory Server may be allowed to accept client connections and process requests while the prime is in progress.
     * @type {boolean}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'backgroundPrime'?: boolean;
    /**
     * Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'indexEntryLimit'?: number;
    /**
     * Specifies the maximum number of entries that are allowed to match a given composite index key before that particular composite index key is no longer maintained.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'compositeIndexEntryLimit'?: number;
    /**
     * Specifies the maximum number of entry IDs to maintain for each entry in the id2children system index (which keeps track of the immediate children for an entry, to assist in otherwise unindexed searches with a single-level scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'id2childrenIndexEntryLimit'?: number;
    /**
     * Specifies the maximum number of entry IDs to maintain for each entry in the id2subtree system index (which keeps track of all descendants below an entry, to assist in otherwise unindexed searches with a whole-subtree or subordinate subtree scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'id2subtreeIndexEntryLimit'?: number;
    /**
     * Specifies the location of the directory that is used to hold temporary information during the index post-processing phase of an LDIF import.
     * @type {string}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'importTempDirectory'?: string;
    /**
     * Specifies the number of threads to use for concurrent processing during an LDIF import.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'importThreadCount'?: number;
    /**
     * Specifies the number of threads to use for concurrently retrieving and encoding entries during an LDIF export.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'exportThreadCount'?: number;
    /**
     * The percentage of JVM memory to allocate to the database cache during import operations.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dbImportCachePercent'?: number;
    /**
     * Indicates whether the database should synchronously flush data as it is written to disk.
     * @type {boolean}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'dbTxnWriteNoSync'?: boolean;
    /**
     * Specifies the number of times that the server should retry an attempted operation in the backend if a deadlock results from two concurrent requests that interfere with each other in a conflicting manner.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'deadlockRetryLimit'?: number;
    /**
     * Specifies the default behavior that should be exhibited by external transactions (e.g., an LDAP transaction or an atomic multi-update operation) with regard to acquiring an exclusive lock in this backend.
     * @type {EnumbackendExternalTxnDefaultBackendLockBehaviorProp}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'externalTxnDefaultBackendLockBehavior'?: EnumbackendExternalTxnDefaultBackendLockBehaviorProp;
    /**
     * Specifies the condition under which to acquire a single-writer lock to ensure that the associated operation will be the only write in progress at the time the lock is held. The single-writer lock can help avoid problems that result from database lock conflicts that arise between two write operations being processed at the same time in the same backend. This will not have any effect on the read operations processed while the write is in progress.
     * @type {EnumbackendSingleWriterLockBehaviorProp}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'singleWriterLockBehavior'?: EnumbackendSingleWriterLockBehaviorProp;
    /**
     * Specifies the maximum number of entries that may be deleted from the backend when using the subtree delete control.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'subtreeDeleteSizeLimit'?: number;
    /**
     * Specifies the number of recent LDAP entry changes per replica for which the backend keeps a record to allow replication to recover in the event that the server is abruptly terminated. Increasing this value can lead to an increased peak server modification rate as well as increased replication throughput.
     * @type {number}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'numRecentChanges'?: number;
    /**
     * Specifies a timeout duration which will be used for opening the database environment by an offline process, such as export-ldif.
     * @type {string}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'offlineProcessDatabaseOpenTimeout'?: string;
    /**
     * Specifies a name to identify the associated backend.
     * @type {string}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'backendID'?: string;
    /**
     * Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.
     * @type {boolean}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'setDegradedAlertWhenDisabled'?: boolean;
    /**
     * Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.
     * @type {boolean}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'returnUnavailableWhenDisabled'?: boolean;
    /**
     * Specifies a notification manager for changes resulting from operations processed through this Backend
     * @type {string}
     * @memberof LargeAttributeBackendResponseAllOf
     */
    'notificationManager'?: string;
}

