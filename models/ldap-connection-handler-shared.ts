/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { EnumconnectionHandlerSslClientAuthPolicyProp } from './enumconnection-handler-ssl-client-auth-policy-prop';
import { EnumldapConnectionHandlerSchemaUrn } from './enumldap-connection-handler-schema-urn';

/**
 * 
 * @export
 * @interface LdapConnectionHandlerShared
 */
export interface LdapConnectionHandlerShared {
    /**
     * A description for this Connection Handler
     * @type {string}
     * @memberof LdapConnectionHandlerShared
     */
    'description'?: string;
    /**
     * 
     * @type {Array<EnumldapConnectionHandlerSchemaUrn>}
     * @memberof LdapConnectionHandlerShared
     */
    'schemas': Array<EnumldapConnectionHandlerSchemaUrn>;
    /**
     * Specifies the address or set of addresses on which this LDAP Connection Handler should listen for connections from LDAP clients.
     * @type {Array<string>}
     * @memberof LdapConnectionHandlerShared
     */
    'listenAddress'?: Array<string>;
    /**
     * Specifies the port number on which the LDAP Connection Handler will listen for connections from clients.
     * @type {number}
     * @memberof LdapConnectionHandlerShared
     */
    'listenPort': number;
    /**
     * Indicates whether the LDAP Connection Handler should use SSL.
     * @type {boolean}
     * @memberof LdapConnectionHandlerShared
     */
    'useSSL'?: boolean;
    /**
     * Indicates whether clients are allowed to use StartTLS.
     * @type {boolean}
     * @memberof LdapConnectionHandlerShared
     */
    'allowStartTLS'?: boolean;
    /**
     * Specifies the nickname (also called the alias) of the certificate that the LDAP Connection Handler should use when performing SSL communication.
     * @type {string}
     * @memberof LdapConnectionHandlerShared
     */
    'sslCertNickname'?: string;
    /**
     * Specifies the name of the key manager that should be used with this LDAP Connection Handler .
     * @type {string}
     * @memberof LdapConnectionHandlerShared
     */
    'keyManagerProvider'?: string;
    /**
     * Specifies the name of the trust manager that should be used with the LDAP Connection Handler .
     * @type {string}
     * @memberof LdapConnectionHandlerShared
     */
    'trustManagerProvider'?: string;
    /**
     * Indicates whether connections from LDAPv2 clients are allowed.
     * @type {boolean}
     * @memberof LdapConnectionHandlerShared
     */
    'allowLDAPV2'?: boolean;
    /**
     * Indicates whether the LDAP Connection Handler should use TCP keep-alive.
     * @type {boolean}
     * @memberof LdapConnectionHandlerShared
     */
    'useTCPKeepAlive'?: boolean;
    /**
     * Indicates whether the LDAP Connection Handler should send a notice of disconnection extended response message to the client if a new connection is rejected for some reason.
     * @type {boolean}
     * @memberof LdapConnectionHandlerShared
     */
    'sendRejectionNotice'?: boolean;
    /**
     * Specifies the length of time that the server should delay the response to non-successful bind operations. A value of zero milliseconds indicates that non-successful bind operations should not be delayed.
     * @type {string}
     * @memberof LdapConnectionHandlerShared
     */
    'failedBindResponseDelay'?: string;
    /**
     * Specifies the size of the largest LDAP request message that will be allowed by this LDAP Connection handler.
     * @type {string}
     * @memberof LdapConnectionHandlerShared
     */
    'maxRequestSize'?: string;
    /**
     * Specifies the maximum number of threads that are used to process cancel and abandon requests from clients.
     * @type {number}
     * @memberof LdapConnectionHandlerShared
     */
    'maxCancelHandlers'?: number;
    /**
     * Specifies the number of threads that are used to accept new client connections, and to perform any initial preparation on those connections that may be needed before the connection can be used to read requests and send responses.
     * @type {number}
     * @memberof LdapConnectionHandlerShared
     */
    'numAcceptHandlers'?: number;
    /**
     * Specifies the number of request handlers that are used to read requests from clients.
     * @type {number}
     * @memberof LdapConnectionHandlerShared
     */
    'numRequestHandlers'?: number;
    /**
     * Indicates whether a separate request handler thread should be created for each client connection, which can help avoid starvation of client connections for cases in which one or more clients send large numbers of concurrent asynchronous requests. This should only be used for cases in which a relatively small number of connections will be established at any given time, the connections established will generally be long-lived, and at least one client may send high volumes of asynchronous requests. This property can be used to alleviate possible blocking during long-running TLS negotiation on a single request handler which can result in it being unable to acknowledge further client requests until the TLS negotation completes or times out.
     * @type {boolean}
     * @memberof LdapConnectionHandlerShared
     */
    'requestHandlerPerConnection'?: boolean;
    /**
     * Specifies the policy that the HTTP Connection Handler should use regarding client SSL certificates. In order for a client certificate to be accepted it must be known to the trust-manager-provider associated with this HTTP Connection Handler. Client certificates received by the HTTP Connection Handler are by default used for TLS mutual authentication only, as there is no support for user authentication.
     * @type {EnumconnectionHandlerSslClientAuthPolicyProp}
     * @memberof LdapConnectionHandlerShared
     */
    'sslClientAuthPolicy'?: EnumconnectionHandlerSslClientAuthPolicyProp;
    /**
     * Specifies the maximum number of pending connection attempts that are allowed to queue up in the accept backlog before the server starts rejecting new connection attempts.
     * @type {number}
     * @memberof LdapConnectionHandlerShared
     */
    'acceptBacklog'?: number;
    /**
     * Specifies the names of the TLS protocols that are allowed for use in SSL or StartTLS communication. The set of supported ssl protocols can be viewed via the ssl context monitor entry.
     * @type {Array<string>}
     * @memberof LdapConnectionHandlerShared
     */
    'sslProtocol'?: Array<string>;
    /**
     * Specifies the names of the TLS cipher suites that are allowed for use in SSL or StartTLS communication. The set of supported cipher suites can be viewed via the ssl context monitor entry.
     * @type {Array<string>}
     * @memberof LdapConnectionHandlerShared
     */
    'sslCipherSuite'?: Array<string>;
    /**
     * Specifies the maximum length of time that attempts to write data to LDAP clients should be allowed to block.
     * @type {string}
     * @memberof LdapConnectionHandlerShared
     */
    'maxBlockedWriteTimeLimit'?: string;
    /**
     * Indicates whether to attempt to automatically authenticate a client connection that has established a secure communication channel (using either SSL or StartTLS) and presented its own client certificate. Generally, clients should use the SASL EXTERNAL mechanism to authenticate using a client certificate, but some clients may not support that capability and/or may expect automatic authentication.
     * @type {boolean}
     * @memberof LdapConnectionHandlerShared
     */
    'autoAuthenticateUsingClientCertificate'?: boolean;
    /**
     * Indicates whether all connections associated with this LDAP Connection Handler should be closed and no new connections accepted when the server has determined that it is \"unavailable.\" This allows clients (or a network load balancer) to route requests to another server.
     * @type {boolean}
     * @memberof LdapConnectionHandlerShared
     */
    'closeConnectionsWhenUnavailable'?: boolean;
    /**
     * Indicates whether all connections associated with this LDAP Connection Handler should be closed before an explicit garbage collection is performed to allow clients to route requests to another server.
     * @type {boolean}
     * @memberof LdapConnectionHandlerShared
     */
    'closeConnectionsOnExplicitGC'?: boolean;
    /**
     * Indicates whether the Connection Handler is enabled.
     * @type {boolean}
     * @memberof LdapConnectionHandlerShared
     */
    'enabled': boolean;
    /**
     * Specifies a set of address masks that determines the addresses of the clients that are allowed to establish connections to this connection handler.
     * @type {Array<string>}
     * @memberof LdapConnectionHandlerShared
     */
    'allowedClient'?: Array<string>;
    /**
     * Specifies a set of address masks that determines the addresses of the clients that are not allowed to establish connections to this connection handler.
     * @type {Array<string>}
     * @memberof LdapConnectionHandlerShared
     */
    'deniedClient'?: Array<string>;
}

