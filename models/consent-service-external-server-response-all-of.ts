/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { EnumconsentServiceExternalServerSchemaUrn } from './enumconsent-service-external-server-schema-urn';
import { EnumexternalServerConsentServiceHostnameVerificationMethodProp } from './enumexternal-server-consent-service-hostname-verification-method-prop';

/**
 * 
 * @export
 * @interface ConsentServiceExternalServerResponseAllOf
 */
export interface ConsentServiceExternalServerResponseAllOf {
    /**
     * A description for this External Server
     * @type {string}
     * @memberof ConsentServiceExternalServerResponseAllOf
     */
    'description'?: string;
    /**
     * 
     * @type {Array<EnumconsentServiceExternalServerSchemaUrn>}
     * @memberof ConsentServiceExternalServerResponseAllOf
     */
    'schemas'?: Array<EnumconsentServiceExternalServerSchemaUrn>;
    /**
     * Name of the External Server
     * @type {string}
     * @memberof ConsentServiceExternalServerResponseAllOf
     */
    'id'?: string;
    /**
     * The base URL of the external Consent Service, including the base path and optionally including the port number. For example, \"https://example.com:1443/consent/v1\".
     * @type {string}
     * @memberof ConsentServiceExternalServerResponseAllOf
     */
    'baseURL'?: string;
    /**
     * The name of the login account to use when using Basic authentication on REST calls to the Consent Service.
     * @type {string}
     * @memberof ConsentServiceExternalServerResponseAllOf
     */
    'userName'?: string;
    /**
     * The login password to use when using Basic authentication on REST calls to the Consent Service.
     * @type {string}
     * @memberof ConsentServiceExternalServerResponseAllOf
     */
    'password'?: string;
    /**
     * The mechanism for checking if the hostname of the HTTP External Server matches the name(s) stored inside the server\'s X.509 certificate. This is only applicable if SSL is being used for connection security.
     * @type {EnumexternalServerConsentServiceHostnameVerificationMethodProp}
     * @memberof ConsentServiceExternalServerResponseAllOf
     */
    'hostnameVerificationMethod'?: EnumexternalServerConsentServiceHostnameVerificationMethodProp;
    /**
     * The key manager provider to use if SSL (HTTPS) is to be used for connection-level security. When specifying a value for this property (except when using the Null key manager provider) you must ensure that the external server trusts this server\'s public certificate by adding this server\'s public certificate to the external server\'s trust store.
     * @type {string}
     * @memberof ConsentServiceExternalServerResponseAllOf
     */
    'keyManagerProvider'?: string;
    /**
     * The trust manager provider to use if SSL (HTTPS) is to be used for connection-level security.
     * @type {string}
     * @memberof ConsentServiceExternalServerResponseAllOf
     */
    'trustManagerProvider'?: string;
    /**
     * The certificate alias within the keystore to use if SSL (HTTPS) is to be used for connection-level security. When specifying a value for this property you must ensure that the external server trusts this server\'s public certificate by adding this server\'s public certificate to the external server\'s trust store.
     * @type {string}
     * @memberof ConsentServiceExternalServerResponseAllOf
     */
    'sslCertNickname'?: string;
    /**
     * Specifies the maximum length of time to wait for a connection to be established before aborting a request to the server.
     * @type {string}
     * @memberof ConsentServiceExternalServerResponseAllOf
     */
    'connectTimeout'?: string;
    /**
     * Specifies the maximum length of time to wait for response data to be read from an established connection before aborting a request to the server.
     * @type {string}
     * @memberof ConsentServiceExternalServerResponseAllOf
     */
    'responseTimeout'?: string;
}

