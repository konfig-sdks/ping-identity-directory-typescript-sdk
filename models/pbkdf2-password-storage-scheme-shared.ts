/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { EnumpasswordStorageSchemeDigestAlgorithmProp } from './enumpassword-storage-scheme-digest-algorithm-prop';
import { Enumpbkdf2PasswordStorageSchemeSchemaUrn } from './enumpbkdf2-password-storage-scheme-schema-urn';

/**
 * 
 * @export
 * @interface Pbkdf2PasswordStorageSchemeShared
 */
export interface Pbkdf2PasswordStorageSchemeShared {
    /**
     * A description for this Password Storage Scheme
     * @type {string}
     * @memberof Pbkdf2PasswordStorageSchemeShared
     */
    'description'?: string;
    /**
     * 
     * @type {Array<Enumpbkdf2PasswordStorageSchemeSchemaUrn>}
     * @memberof Pbkdf2PasswordStorageSchemeShared
     */
    'schemas': Array<Enumpbkdf2PasswordStorageSchemeSchemaUrn>;
    /**
     * Specifies the digest algorithm that will be used when encoding passwords.
     * @type {EnumpasswordStorageSchemeDigestAlgorithmProp}
     * @memberof Pbkdf2PasswordStorageSchemeShared
     */
    'digestAlgorithm'?: EnumpasswordStorageSchemeDigestAlgorithmProp;
    /**
     * Specifies the number of iterations to use when encoding passwords. The value must be greater than or equal to 1000.
     * @type {number}
     * @memberof Pbkdf2PasswordStorageSchemeShared
     */
    'iterationCount'?: number;
    /**
     * Specifies the number of bytes to use for the generated salt. The value must be greater than or equal to 8.
     * @type {number}
     * @memberof Pbkdf2PasswordStorageSchemeShared
     */
    'saltLengthBytes'?: number;
    /**
     * Specifies the number of bytes to use for the derived key. The value must be greater than or equal to 8.
     * @type {number}
     * @memberof Pbkdf2PasswordStorageSchemeShared
     */
    'derivedKeyLengthBytes'?: number;
    /**
     * Specifies the maximum allowed length, in bytes, for passwords encoded with this scheme, which can help mitigate denial of service attacks from clients that attempt to bind with very long passwords.
     * @type {number}
     * @memberof Pbkdf2PasswordStorageSchemeShared
     */
    'maxPasswordLength'?: number;
    /**
     * Indicates whether the Password Storage Scheme is enabled for use.
     * @type {boolean}
     * @memberof Pbkdf2PasswordStorageSchemeShared
     */
    'enabled': boolean;
}

