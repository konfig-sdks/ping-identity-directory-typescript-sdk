/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { EnumfileBasedSyncLogPublisherSchemaUrn } from './enumfile-based-sync-log-publisher-schema-urn';
import { EnumlogPublisherCompressionMechanismProp } from './enumlog-publisher-compression-mechanism-prop';
import { EnumlogPublisherLoggedMessageTypeProp } from './enumlog-publisher-logged-message-type-prop';
import { EnumlogPublisherLoggingErrorBehaviorProp } from './enumlog-publisher-logging-error-behavior-prop';
import { EnumlogPublisherTimestampPrecisionProp } from './enumlog-publisher-timestamp-precision-prop';

/**
 * 
 * @export
 * @interface FileBasedSyncLogPublisherResponseAllOf
 */
export interface FileBasedSyncLogPublisherResponseAllOf {
    /**
     * A description for this Log Publisher
     * @type {string}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'description'?: string;
    /**
     * 
     * @type {Array<EnumfileBasedSyncLogPublisherSchemaUrn>}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'schemas'?: Array<EnumfileBasedSyncLogPublisherSchemaUrn>;
    /**
     * Name of the Log Publisher
     * @type {string}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'id'?: string;
    /**
     * The file name to use for the log files generated by the File Based Sync Log Publisher. The path to the file can be specified either as relative to the server root or as an absolute path.
     * @type {string}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'logFile'?: string;
    /**
     * The UNIX permissions of the log files created by this File Based Sync Log Publisher.
     * @type {string}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'logFilePermissions'?: string;
    /**
     * The rotation policy to use for the File Based Sync Log Publisher .
     * @type {Array<string>}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'rotationPolicy'?: Array<string>;
    /**
     * A listener that should be notified whenever a log file is rotated out of service.
     * @type {Array<string>}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'rotationListener'?: Array<string>;
    /**
     * The retention policy to use for the File Based Sync Log Publisher .
     * @type {Array<string>}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'retentionPolicy'?: Array<string>;
    /**
     * Specifies the type of compression (if any) to use for log files that are written.
     * @type {EnumlogPublisherCompressionMechanismProp}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'compressionMechanism'?: EnumlogPublisherCompressionMechanismProp;
    /**
     * Indicates whether the log should be cryptographically signed so that the log content cannot be altered in an undetectable manner.
     * @type {boolean}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'signLog'?: boolean;
    /**
     * Indicates whether log files should be encrypted so that their content is not available to unauthorized users.
     * @type {boolean}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'encryptLog'?: boolean;
    /**
     * Specifies the ID of the encryption settings definition that should be used to encrypt the data. If this is not provided, the server\'s preferred encryption settings definition will be used. The \"encryption-settings list\" command can be used to obtain a list of the encryption settings definitions available in the server.
     * @type {string}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'encryptionSettingsDefinitionID'?: string;
    /**
     * Specifies whether to append to existing log files.
     * @type {boolean}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'append'?: boolean;
    /**
     * Indicates whether the File Based Sync Log Publisher will publish records asynchronously.
     * @type {boolean}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'asynchronous'?: boolean;
    /**
     * Specifies whether to flush the writer after every log record.
     * @type {boolean}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'autoFlush'?: boolean;
    /**
     * Specifies the log file buffer size.
     * @type {string}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'bufferSize'?: string;
    /**
     * The maximum number of log records that can be stored in the asynchronous queue.
     * @type {number}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'queueSize'?: number;
    /**
     * Specifies the interval at which to check whether the log files need to be rotated.
     * @type {string}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'timeInterval'?: string;
    /**
     * Specifies the smallest time unit to be included in timestamps.
     * @type {EnumlogPublisherTimestampPrecisionProp}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'timestampPrecision'?: EnumlogPublisherTimestampPrecisionProp;
    /**
     * Specifies which Sync Pipes can log messages to this Sync Log Publisher.
     * @type {Array<string>}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'includeSyncPipe'?: Array<string>;
    /**
     * 
     * @type {Array<EnumlogPublisherLoggedMessageTypeProp>}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'loggedMessageType'?: Array<EnumlogPublisherLoggedMessageTypeProp>;
    /**
     * Indicates whether the Log Publisher is enabled for use.
     * @type {boolean}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'enabled'?: boolean;
    /**
     * Specifies the behavior that the server should exhibit if an error occurs during logging processing.
     * @type {EnumlogPublisherLoggingErrorBehaviorProp}
     * @memberof FileBasedSyncLogPublisherResponseAllOf
     */
    'loggingErrorBehavior'?: EnumlogPublisherLoggingErrorBehaviorProp;
}

