/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { EnumfileBasedTraceLogPublisherSchemaUrn } from './enumfile-based-trace-log-publisher-schema-urn';
import { EnumlogPublisherAccessTokenValidatorMessageTypeProp } from './enumlog-publisher-access-token-validator-message-type-prop';
import { EnumlogPublisherCompressionMechanismProp } from './enumlog-publisher-compression-mechanism-prop';
import { EnumlogPublisherConsentMessageTypeProp } from './enumlog-publisher-consent-message-type-prop';
import { EnumlogPublisherDebugMessageTypeProp } from './enumlog-publisher-debug-message-type-prop';
import { EnumlogPublisherDirectoryRESTAPIMessageTypeProp } from './enumlog-publisher-directory-restapimessage-type-prop';
import { EnumlogPublisherExtensionMessageTypeProp } from './enumlog-publisher-extension-message-type-prop';
import { EnumlogPublisherHttpMessageTypeProp } from './enumlog-publisher-http-message-type-prop';
import { EnumlogPublisherIdTokenValidatorMessageTypeProp } from './enumlog-publisher-id-token-validator-message-type-prop';
import { EnumlogPublisherLoggingErrorBehaviorProp } from './enumlog-publisher-logging-error-behavior-prop';
import { EnumlogPublisherScimMessageTypeProp } from './enumlog-publisher-scim-message-type-prop';

/**
 * 
 * @export
 * @interface FileBasedTraceLogPublisherShared
 */
export interface FileBasedTraceLogPublisherShared {
    /**
     * A description for this Log Publisher
     * @type {string}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'description'?: string;
    /**
     * 
     * @type {Array<EnumfileBasedTraceLogPublisherSchemaUrn>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'schemas': Array<EnumfileBasedTraceLogPublisherSchemaUrn>;
    /**
     * The file name to use for the log files generated by the File Based Trace Log Publisher. The path to the file can be specified either as relative to the server root or as an absolute path.
     * @type {string}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'logFile': string;
    /**
     * The UNIX permissions of the log files created by this File Based Trace Log Publisher.
     * @type {string}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'logFilePermissions'?: string;
    /**
     * The rotation policy to use for the File Based Trace Log Publisher .
     * @type {Array<string>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'rotationPolicy'?: Array<string>;
    /**
     * A listener that should be notified whenever a log file is rotated out of service.
     * @type {Array<string>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'rotationListener'?: Array<string>;
    /**
     * The retention policy to use for the File Based Trace Log Publisher .
     * @type {Array<string>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'retentionPolicy'?: Array<string>;
    /**
     * Specifies the type of compression (if any) to use for log files that are written.
     * @type {EnumlogPublisherCompressionMechanismProp}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'compressionMechanism'?: EnumlogPublisherCompressionMechanismProp;
    /**
     * Indicates whether the log should be cryptographically signed so that the log content cannot be altered in an undetectable manner.
     * @type {boolean}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'signLog'?: boolean;
    /**
     * Indicates whether log files should be encrypted so that their content is not available to unauthorized users.
     * @type {boolean}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'encryptLog'?: boolean;
    /**
     * Specifies the ID of the encryption settings definition that should be used to encrypt the data. If this is not provided, the server\'s preferred encryption settings definition will be used. The \"encryption-settings list\" command can be used to obtain a list of the encryption settings definitions available in the server.
     * @type {string}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'encryptionSettingsDefinitionID'?: string;
    /**
     * Specifies whether to append to existing log files.
     * @type {boolean}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'append'?: boolean;
    /**
     * Specifies the log file buffer size.
     * @type {string}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'bufferSize'?: string;
    /**
     * Specifies the interval at which to check whether the log files need to be rotated.
     * @type {string}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'timeInterval'?: string;
    /**
     * Indicates whether the Writer Based Trace Log Publisher will publish records asynchronously.
     * @type {boolean}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'asynchronous'?: boolean;
    /**
     * The maximum number of log records that can be stored in the asynchronous queue.
     * @type {number}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'queueSize'?: number;
    /**
     * Specifies the maximum number of characters that may be included in any string in a log message before that string is truncated and replaced with a placeholder indicating the number of characters that were omitted. This can help prevent extremely long log messages from being written.
     * @type {number}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'maxStringLength'?: number;
    /**
     * 
     * @type {Array<EnumlogPublisherDebugMessageTypeProp>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'debugMessageType'?: Array<EnumlogPublisherDebugMessageTypeProp>;
    /**
     * 
     * @type {Array<EnumlogPublisherHttpMessageTypeProp>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'httpMessageType'?: Array<EnumlogPublisherHttpMessageTypeProp>;
    /**
     * 
     * @type {Array<EnumlogPublisherAccessTokenValidatorMessageTypeProp>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'accessTokenValidatorMessageType'?: Array<EnumlogPublisherAccessTokenValidatorMessageTypeProp>;
    /**
     * 
     * @type {Array<EnumlogPublisherIdTokenValidatorMessageTypeProp>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'idTokenValidatorMessageType'?: Array<EnumlogPublisherIdTokenValidatorMessageTypeProp>;
    /**
     * 
     * @type {Array<EnumlogPublisherScimMessageTypeProp>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'scimMessageType'?: Array<EnumlogPublisherScimMessageTypeProp>;
    /**
     * 
     * @type {Array<EnumlogPublisherConsentMessageTypeProp>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'consentMessageType'?: Array<EnumlogPublisherConsentMessageTypeProp>;
    /**
     * 
     * @type {Array<EnumlogPublisherDirectoryRESTAPIMessageTypeProp>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'directoryRESTAPIMessageType'?: Array<EnumlogPublisherDirectoryRESTAPIMessageTypeProp>;
    /**
     * 
     * @type {Array<EnumlogPublisherExtensionMessageTypeProp>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'extensionMessageType'?: Array<EnumlogPublisherExtensionMessageTypeProp>;
    /**
     * Specifies a set of HTTP request URL paths to determine whether log messages are included for a HTTP request. Log messages are included for a HTTP request if the request path does not match any exclude-path-pattern, and the request path does match an include-path-pattern (or no include-path-pattern is specified).
     * @type {Array<string>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'includePathPattern'?: Array<string>;
    /**
     * Specifies a set of HTTP request URL paths to determine whether log messages are excluded for a HTTP request. Log messages are included for a HTTP request if the request path does not match any exclude-path-pattern, and the request path does match an include-path-pattern (or no include-path-pattern is specified).
     * @type {Array<string>}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'excludePathPattern'?: Array<string>;
    /**
     * Indicates whether the Log Publisher is enabled for use.
     * @type {boolean}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'enabled': boolean;
    /**
     * Specifies the behavior that the server should exhibit if an error occurs during logging processing.
     * @type {EnumlogPublisherLoggingErrorBehaviorProp}
     * @memberof FileBasedTraceLogPublisherShared
     */
    'loggingErrorBehavior'?: EnumlogPublisherLoggingErrorBehaviorProp;
}

