/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { EnumcollectSupportDataRecurringTaskSchemaUrn } from './enumcollect-support-data-recurring-task-schema-urn';
import { EnumrecurringTaskSecurityLevelProp } from './enumrecurring-task-security-level-prop';

/**
 * 
 * @export
 * @interface CollectSupportDataRecurringTaskShared
 */
export interface CollectSupportDataRecurringTaskShared {
    /**
     * A description for this Recurring Task
     * @type {string}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'description'?: string;
    /**
     * 
     * @type {Array<EnumcollectSupportDataRecurringTaskSchemaUrn>}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'schemas': Array<EnumcollectSupportDataRecurringTaskSchemaUrn>;
    /**
     * The directory in which the support data archive files will be placed. The path must be a directory, and that directory must already exist. Relative paths will be interpreted as relative to the server root.
     * @type {string}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'outputDirectory': string;
    /**
     * The path to a file that contains the passphrase to encrypt the contents of the support data archive.
     * @type {string}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'encryptionPassphraseFile'?: string;
    /**
     * Indicates whether the support data archive should include information that may be expensive to obtain, and that may temporarily affect the server\'s performance or responsiveness.
     * @type {boolean}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'includeExpensiveData'?: boolean;
    /**
     * Indicates whether the support data archive should include a replication state dump, which may be several megabytes in size.
     * @type {boolean}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'includeReplicationStateDump'?: boolean;
    /**
     * Indicates whether the support data archive should include binary files that may not have otherwise been included. Note that it may not be possible to obscure or redact sensitive information in binary files.
     * @type {boolean}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'includeBinaryFiles'?: boolean;
    /**
     * Indicates whether the support data archive should include the source code (if available) for any third-party extensions that may be installed in the server.
     * @type {boolean}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'includeExtensionSource'?: boolean;
    /**
     * Indicates whether to capture support data information sequentially rather than in parallel. Capturing data in sequential mode may reduce the amount of memory that the tool requires to operate, at the cost of taking longer to run.
     * @type {boolean}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'useSequentialMode'?: boolean;
    /**
     * The security level to use when deciding which information to include in or exclude from the support data archive, and which included data should be obscured or redacted.
     * @type {EnumrecurringTaskSecurityLevelProp}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'securityLevel'?: EnumrecurringTaskSecurityLevelProp;
    /**
     * The number of times to invoke the jstack utility to obtain a stack trace of all threads running in the JVM. A value of zero indicates that the jstack utility should not be invoked.
     * @type {number}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'jstackCount'?: number;
    /**
     * The number of intervals of data to collect from tools that use sample-based reporting, like vmstat, iostat, and mpstat. A value of zero indicates that these kinds of tools should not be used to collect any information.
     * @type {number}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'reportCount'?: number;
    /**
     * The duration (in seconds) between each interval of data to collect from tools that use sample-based reporting, like vmstat, iostat, and mpstat.
     * @type {number}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'reportIntervalSeconds'?: number;
    /**
     * The maximum age (leading up to the time the collect-support-data tool was invoked) for log content to include in the support data archive.
     * @type {string}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'logDuration'?: string;
    /**
     * The amount of data to collect from the beginning of each log file included in the support data archive.
     * @type {string}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'logFileHeadCollectionSize'?: string;
    /**
     * The amount of data to collect from the end of each log file included in the support data archive.
     * @type {string}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'logFileTailCollectionSize'?: string;
    /**
     * An optional comment to include in a README file within the support data archive.
     * @type {string}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'comment'?: string;
    /**
     * The minimum number of previous support data archives that should be preserved after a new archive is generated.
     * @type {number}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'retainPreviousSupportDataArchiveCount'?: number;
    /**
     * The minimum age of previous support data archives that should be preserved after a new archive is generated.
     * @type {string}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'retainPreviousSupportDataArchiveAge'?: string;
    /**
     * Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).
     * @type {boolean}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'cancelOnTaskDependencyFailure'?: boolean;
    /**
     * The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.
     * @type {Array<string>}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'emailOnStart'?: Array<string>;
    /**
     * The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
     * @type {Array<string>}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'emailOnSuccess'?: Array<string>;
    /**
     * The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
     * @type {Array<string>}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'emailOnFailure'?: Array<string>;
    /**
     * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.
     * @type {boolean}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'alertOnStart'?: boolean;
    /**
     * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.
     * @type {boolean}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'alertOnSuccess'?: boolean;
    /**
     * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.
     * @type {boolean}
     * @memberof CollectSupportDataRecurringTaskShared
     */
    'alertOnFailure'?: boolean;
}

