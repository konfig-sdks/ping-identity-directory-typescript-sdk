/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { EnumpluginDatetimeFormatProp } from './enumplugin-datetime-format-prop';
import { EnumpluginPurgeBehaviorProp } from './enumplugin-purge-behavior-prop';
import { EnumpurgeExpiredDataPluginSchemaUrn } from './enumpurge-expired-data-plugin-schema-urn';

/**
 * 
 * @export
 * @interface PurgeExpiredDataPluginShared
 */
export interface PurgeExpiredDataPluginShared {
    /**
     * A description for this Plugin
     * @type {string}
     * @memberof PurgeExpiredDataPluginShared
     */
    'description'?: string;
    /**
     * 
     * @type {Array<EnumpurgeExpiredDataPluginSchemaUrn>}
     * @memberof PurgeExpiredDataPluginShared
     */
    'schemas': Array<EnumpurgeExpiredDataPluginSchemaUrn>;
    /**
     * The LDAP attribute that determines when data should be deleted. This could store the expiration time, or it could store the creation time and the expiration-offset property specifies the duration before data is deleted.
     * @type {string}
     * @memberof PurgeExpiredDataPluginShared
     */
    'datetimeAttribute': string;
    /**
     * The top-level JSON field within the configured datetime-attribute that determines when data should be deleted. This could store the expiration time, or it could store the creation time and the expiration-offset property specifies the duration before data is deleted.
     * @type {string}
     * @memberof PurgeExpiredDataPluginShared
     */
    'datetimeJSONField'?: string;
    /**
     * Specifies the format of the datetime stored within the entry that determines when data should be purged.
     * @type {EnumpluginDatetimeFormatProp}
     * @memberof PurgeExpiredDataPluginShared
     */
    'datetimeFormat'?: EnumpluginDatetimeFormatProp;
    /**
     * When the datetime-format property is configured with a value of \"custom\", this specifies the format (using a string compatible with the java.text.SimpleDateFormat class) that will be used to search for expired data.
     * @type {string}
     * @memberof PurgeExpiredDataPluginShared
     */
    'customDatetimeFormat'?: string;
    /**
     * Specifies the time zone to use when generating a date string using the configured custom-datetime-format value. The provided value must be accepted by java.util.TimeZone.getTimeZone.
     * @type {string}
     * @memberof PurgeExpiredDataPluginShared
     */
    'customTimezone'?: string;
    /**
     * The duration to wait after the value specified in datetime-attribute (and optionally datetime-json-field) before purging the data.
     * @type {string}
     * @memberof PurgeExpiredDataPluginShared
     */
    'expirationOffset': string;
    /**
     * Specifies whether to delete expired entries or attribute values. By default entries are deleted.
     * @type {EnumpluginPurgeBehaviorProp}
     * @memberof PurgeExpiredDataPluginShared
     */
    'purgeBehavior'?: EnumpluginPurgeBehaviorProp;
    /**
     * Only entries located within the subtree specified by this base DN are eligible for purging.
     * @type {string}
     * @memberof PurgeExpiredDataPluginShared
     */
    'baseDN'?: string;
    /**
     * Only entries that match this LDAP filter will be eligible for having data purged.
     * @type {string}
     * @memberof PurgeExpiredDataPluginShared
     */
    'filter'?: string;
    /**
     * This specifies how often the plugin should check for expired data. It also controls the offset of peer servers (see the peer-server-priority-index for more information).
     * @type {string}
     * @memberof PurgeExpiredDataPluginShared
     */
    'pollingInterval'?: string;
    /**
     * This setting smooths out the performance impact on the server by throttling the purging to the specified maximum number of updates per second. To avoid a large backlog, this value should be set comfortably above the average rate that expired data is generated. When purge-behavior is set to subtree-delete-entries, then deletion of the entire subtree is considered a single update for the purposes of throttling.
     * @type {number}
     * @memberof PurgeExpiredDataPluginShared
     */
    'maxUpdatesPerSecond'?: number;
    /**
     * In a replicated environment, this determines the order in which peer servers should attempt to purge data.
     * @type {number}
     * @memberof PurgeExpiredDataPluginShared
     */
    'peerServerPriorityIndex'?: number;
    /**
     * The number of threads used to delete expired entries.
     * @type {number}
     * @memberof PurgeExpiredDataPluginShared
     */
    'numDeleteThreads'?: number;
    /**
     * Indicates whether the plug-in is enabled for use.
     * @type {boolean}
     * @memberof PurgeExpiredDataPluginShared
     */
    'enabled': boolean;
}

