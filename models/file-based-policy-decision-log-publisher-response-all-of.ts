/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { EnumfileBasedPolicyDecisionLogPublisherSchemaUrn } from './enumfile-based-policy-decision-log-publisher-schema-urn';
import { EnumlogPublisherCompressionMechanismProp } from './enumlog-publisher-compression-mechanism-prop';
import { EnumlogPublisherLoggingErrorBehaviorProp } from './enumlog-publisher-logging-error-behavior-prop';
import { EnumlogPublisherPolicyMessageTypeProp } from './enumlog-publisher-policy-message-type-prop';

/**
 * 
 * @export
 * @interface FileBasedPolicyDecisionLogPublisherResponseAllOf
 */
export interface FileBasedPolicyDecisionLogPublisherResponseAllOf {
    /**
     * A description for this Log Publisher
     * @type {string}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'description'?: string;
    /**
     * 
     * @type {Array<EnumfileBasedPolicyDecisionLogPublisherSchemaUrn>}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'schemas'?: Array<EnumfileBasedPolicyDecisionLogPublisherSchemaUrn>;
    /**
     * Name of the Log Publisher
     * @type {string}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'id'?: string;
    /**
     * Indicates whether the File Based Policy Decision Log Publisher will publish records asynchronously.
     * @type {boolean}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'asynchronous'?: boolean;
    /**
     * The maximum number of log records that can be stored in the asynchronous queue.
     * @type {number}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'queueSize'?: number;
    /**
     * Specifies the log file buffer size.
     * @type {string}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'bufferSize'?: string;
    /**
     * Specifies the interval at which to check whether the log files need to be rotated.
     * @type {string}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'timeInterval'?: string;
    /**
     * The file name to use for the log files generated by the File Based Policy Decision Log Publisher. The path to the file can be specified either as relative to the server root or as an absolute path.
     * @type {string}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'logFile'?: string;
    /**
     * The UNIX permissions of the log files created by this File Based Policy Decision Log Publisher.
     * @type {string}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'logFilePermissions'?: string;
    /**
     * The rotation policy to use for the File Based Policy Decision Log Publisher .
     * @type {Array<string>}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'rotationPolicy'?: Array<string>;
    /**
     * A listener that should be notified whenever a log file is rotated out of service.
     * @type {Array<string>}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'rotationListener'?: Array<string>;
    /**
     * The retention policy to use for the File Based Policy Decision Log Publisher .
     * @type {Array<string>}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'retentionPolicy'?: Array<string>;
    /**
     * Specifies the type of compression (if any) to use for log files that are written.
     * @type {EnumlogPublisherCompressionMechanismProp}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'compressionMechanism'?: EnumlogPublisherCompressionMechanismProp;
    /**
     * Indicates whether the log should be cryptographically signed so that the log content cannot be altered in an undetectable manner.
     * @type {boolean}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'signLog'?: boolean;
    /**
     * Indicates whether log files should be encrypted so that their content is not available to unauthorized users.
     * @type {boolean}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'encryptLog'?: boolean;
    /**
     * Specifies the ID of the encryption settings definition that should be used to encrypt the data. If this is not provided, the server\'s preferred encryption settings definition will be used. The \"encryption-settings list\" command can be used to obtain a list of the encryption settings definitions available in the server.
     * @type {string}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'encryptionSettingsDefinitionID'?: string;
    /**
     * Specifies whether to append to existing log files.
     * @type {boolean}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'append'?: boolean;
    /**
     * Indicates whether policy decision messages recorded by this log publisher will include the full response returned by the PDP.
     * @type {boolean}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'includePDPResponse'?: boolean;
    /**
     * 
     * @type {Array<EnumlogPublisherPolicyMessageTypeProp>}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'policyMessageType'?: Array<EnumlogPublisherPolicyMessageTypeProp>;
    /**
     * Indicates whether the Log Publisher is enabled for use.
     * @type {boolean}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'enabled'?: boolean;
    /**
     * Specifies the behavior that the server should exhibit if an error occurs during logging processing.
     * @type {EnumlogPublisherLoggingErrorBehaviorProp}
     * @memberof FileBasedPolicyDecisionLogPublisherResponseAllOf
     */
    'loggingErrorBehavior'?: EnumlogPublisherLoggingErrorBehaviorProp;
}

