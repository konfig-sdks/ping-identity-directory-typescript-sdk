/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

The version of the OpenAPI document: 0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { EnumcommonLogFileHttpOperationLogPublisherSchemaUrn } from './enumcommon-log-file-http-operation-log-publisher-schema-urn';
import { EnumlogPublisherCompressionMechanismProp } from './enumlog-publisher-compression-mechanism-prop';
import { EnumlogPublisherLoggingErrorBehaviorProp } from './enumlog-publisher-logging-error-behavior-prop';

/**
 * 
 * @export
 * @interface CommonLogFileHttpOperationLogPublisherShared
 */
export interface CommonLogFileHttpOperationLogPublisherShared {
    /**
     * A description for this Log Publisher
     * @type {string}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'description'?: string;
    /**
     * 
     * @type {Array<EnumcommonLogFileHttpOperationLogPublisherSchemaUrn>}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'schemas': Array<EnumcommonLogFileHttpOperationLogPublisherSchemaUrn>;
    /**
     * The file name to use for the log files generated by the Common Log File HTTP Operation Log Publisher. The path to the file can be specified either as relative to the server root or as an absolute path.
     * @type {string}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'logFile': string;
    /**
     * The UNIX permissions of the log files created by this Common Log File HTTP Operation Log Publisher.
     * @type {string}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'logFilePermissions'?: string;
    /**
     * The rotation policy to use for the Common Log File HTTP Operation Log Publisher .
     * @type {Array<string>}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'rotationPolicy'?: Array<string>;
    /**
     * A listener that should be notified whenever a log file is rotated out of service.
     * @type {Array<string>}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'rotationListener'?: Array<string>;
    /**
     * The retention policy to use for the Common Log File HTTP Operation Log Publisher .
     * @type {Array<string>}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'retentionPolicy'?: Array<string>;
    /**
     * Specifies the type of compression (if any) to use for log files that are written.
     * @type {EnumlogPublisherCompressionMechanismProp}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'compressionMechanism'?: EnumlogPublisherCompressionMechanismProp;
    /**
     * Indicates whether the log should be cryptographically signed so that the log content cannot be altered in an undetectable manner.
     * @type {boolean}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'signLog'?: boolean;
    /**
     * Indicates whether log files should be encrypted so that their content is not available to unauthorized users.
     * @type {boolean}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'encryptLog'?: boolean;
    /**
     * Specifies the ID of the encryption settings definition that should be used to encrypt the data. If this is not provided, the server\'s preferred encryption settings definition will be used. The \"encryption-settings list\" command can be used to obtain a list of the encryption settings definitions available in the server.
     * @type {string}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'encryptionSettingsDefinitionID'?: string;
    /**
     * Specifies whether to append to existing log files.
     * @type {boolean}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'append'?: boolean;
    /**
     * Indicates whether the Common Log File HTTP Operation Log Publisher will publish records asynchronously.
     * @type {boolean}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'asynchronous'?: boolean;
    /**
     * Specifies whether to flush the writer after every log record.
     * @type {boolean}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'autoFlush'?: boolean;
    /**
     * Specifies the log file buffer size.
     * @type {string}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'bufferSize'?: string;
    /**
     * The maximum number of log records that can be stored in the asynchronous queue.
     * @type {number}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'queueSize'?: number;
    /**
     * Specifies the interval at which to check whether the log files need to be rotated.
     * @type {string}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'timeInterval'?: string;
    /**
     * Indicates whether the Log Publisher is enabled for use.
     * @type {boolean}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'enabled': boolean;
    /**
     * Specifies the behavior that the server should exhibit if an error occurs during logging processing.
     * @type {EnumlogPublisherLoggingErrorBehaviorProp}
     * @memberof CommonLogFileHttpOperationLogPublisherShared
     */
    'loggingErrorBehavior'?: EnumlogPublisherLoggingErrorBehaviorProp;
}

